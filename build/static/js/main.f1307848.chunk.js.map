{"version":3,"sources":["config.ts","hooks/apiHooks.tsx","contexts/mediaContext.tsx","components/nav.tsx","contexts/websocketContext.tsx","components/message.tsx","hooks/windowDimensionsHook.tsx","components/thread.tsx","components/threadButton.tsx","hooks/formHooks.tsx","components/threadForm.tsx","components/modal.tsx","views/home.tsx","components/loginForm.tsx","components/registerForm.tsx","views/login.tsx","views/logout.tsx","views/profile.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["envConfig","backendUrl","doFetch","url","a","options","fetch","config","response","json","error","Error","message","ok","useUsers","getUsers","fetchOptions","method","credentials","getUserAvailable","username","alert","getUsernameById","id","register","inputs","headers","body","JSON","stringify","result","console","log","getIsLoggedIn","postLogin","logout","getProfile","useChats","getThreadIds","userId","getUserIds","getThreadName","threadId","thread","name","postMessage","messageObject","success","getMessages","getAllMessages","getLastMessage","createNewChatThread","chatThreadObject","contextDefaultValues","user","setUser","MediaContext","React","createContext","MediaProvider","children","useState","Provider","value","useStyles","makeStyles","theme","appBar","zIndex","drawer","backgroundColor","width","root","flexGrow","menuButton","marginRight","spacing","title","paddingRight","toolbar","display","justifyContent","itemPack","alignItems","logo","position","left","transform","Nav","classes","logged","setLogged","useContext","useEffect","isLoggedIn","AppBar","className","Toolbar","Link","component","RouterLink","to","color","style","textDecoration","Button","startIcon","websocket","undefined","setWebsocket","WebsocketContext","WebsocketProvider","marginBottom","borderRadius","padding","maxWidth","breakpoints","down","ownMessage","inline","inlineOwn","timestamp","fontSize","marginLeft","dateIndicator","background","textAlign","Message","message_id","user_id","contents","setMessageId","usernames","index","messageArray","setUsername","time","setTime","setOwnMessage","showDate","setShowDate","formattedTimestamp","moment","format","i","length","formattedPreviousTimestamp","d","Date","hours","getHours","toString","minutes","getMinutes","e","ListItem","flexDirection","Grid","container","Typography","variant","justify","item","ListItemText","primary","secondary","getWindowDimensions","window","innerWidth","height","innerHeight","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","textField","marginTop","sendButton","overflowX","overflowY","arrowBack","top","Thread","messages","messageAmount","setMessageAmount","setThreadOpen","setThreadId","setMessage","messageId","showButton","setShowButton","setUsernames","moreMessages","setMoreMessages","loadMore","setLoadMore","messageScroll","setMessageScroll","currentThread","setCurrentThread","heightCorrected","setHeightCorrected","messagesEndRef","useRef","messagesEndRef2","isMobile","useMediaQuery","query","scrollToBottom","number","current","scrollIntoView","userIds","usernameArray","userObject","push","handleSubmit","event","preventDefault","tzoffset","getTimezoneOffset","localISOTime","now","toISOString","slice","thread_id","webSocketUpdate","type","send","loadAllMessages","amount","allMessages","splice","onClick","direction","List","map","ref","onSubmit","TextField","label","onInput","target","size","IconButton","fill","text","lastMessage","overflow","textOverflow","whiteSpace","button","borderBottom","cursor","ThreadButton","threadOpen","updateThreadButtonInfos","setName","setLastMessage","threadName","lastMessageData","startOf","formatedDate","difference","diff","formatedTime","lastMessageObject","close","useForm","callback","initState","setInputs","handleInputChange","persist","handleFileChange","files","select","minWidth","formControl","header","createButton","ThreadForm","setModalOpen","usersArray","setUsersArray","newThreadId","setNewThreadId","user2","user2_id","users","arrayForUsers","onChange","validators","errorMessages","FormControl","InputLabel","Select","autoWidth","MenuItem","box","maxHeight","closeButton","right","Modal","modalOpen","handleClose","open","onClose","Box","sx","bgcolor","border","boxShadow","p","newThreadButton","desktopContainer","up","mobileWelcomeCard","margin","mobileSubtitle","Home","history","setusername","threads","setThreads","sortedThreads","setSortedThreads","setMessages","updateState","setUpdateState","updateThreadButtons","setUpdateThreadButtons","setUpdateThreadButtonInfos","wsMessage","setWsMessage","isDesktop","chatThreads","idArray","threadMessages","threadIdObject","sort","b","reversedArray","reverse","newMessageObject","readyState","socket","WebSocket","client","data","parse","setTimeout","setCreateNewChatThreadOpen","Card","borderTop","borderRight","loginHeader","loginButton","withRouter","userdata","localStorage","setItem","password","gutterBottom","fullWidth","registerHeader","registerButton","RegisterForm","setToggle","confirm","ValidatorForm","addValidationRule","available","xs","Login","toggle","Logout","Profile","content","paddingTop","App","Container","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1307848.chunk.js","sourcesContent":["const env = process.env.NODE_ENV === 'production' ? 'production' : 'development'\r\n\r\nconst envConfig = {\r\n    development: {\r\n        backendUrl: 'http://localhost:3001'\r\n    },\r\n    production: {\r\n        backendUrl: 'https://something.com'\r\n    }\r\n}\r\n\r\nexport default envConfig[env]","import config from '../config'\r\n\r\nconst doFetch = async (url: string, options = {}) => {\r\n    const response = await fetch(config.backendUrl + url, options);\r\n    const json = await response.json();\r\n    if (json.error) {\r\n        // if API response contains error message (use Postman to get further details)\r\n        throw new Error(json.message + ': ' + json.error);\r\n    } else if (!response.ok) {\r\n        // if API response does not contain error message, but there is some other error\r\n        throw new Error('doFetch failed');\r\n    } else {\r\n        // if all goes well\r\n        return json;\r\n    }\r\n};\r\n\r\nconst useUsers = () => {\r\n\r\n    const getUsers = async () => {\r\n        const fetchOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            return await doFetch('/users', fetchOptions);\r\n        } catch (e) {\r\n            throw new Error(e.message);\r\n        }\r\n    };\r\n\r\n    const getUserAvailable = async (username: String) => {\r\n        try {\r\n            return await doFetch('/users/username/' + username);\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const getUsernameById = async (id: number) => {\r\n        try {\r\n            return await doFetch('/user/' + id);\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const register = async (inputs: Object) => {\r\n        const fetchOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(inputs),\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            const result = await doFetch('/user', fetchOptions);\r\n            console.log('RegisterResult', result.message)\r\n            return result.message\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const getIsLoggedIn = async () => {\r\n        const fetchOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            return await doFetch('/isloggedin', fetchOptions);\r\n        } catch (e) {\r\n            throw new Error(e.message);\r\n        }\r\n    };\r\n\r\n    const postLogin = async (inputs: Object) => {\r\n        const fetchOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(inputs),\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            const result = await doFetch('/login', fetchOptions);\r\n            return result\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const logout = async () => {\r\n        const fetchOptions = {\r\n            method: 'DELETE',\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            return await doFetch('/logout', fetchOptions);\r\n        } catch (e) {\r\n            throw new Error(e.message);\r\n        }\r\n    }\r\n\r\n    const getProfile = async () => {\r\n        const fetchOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            return await doFetch('/profile', fetchOptions);\r\n        } catch (e) {\r\n            throw new Error(e.message);\r\n        }\r\n    };\r\n\r\n    return { getUsers, getUserAvailable, getUsernameById, register, getIsLoggedIn, postLogin, logout, getProfile };\r\n};\r\n\r\nconst useChats = () => {\r\n\r\n    const getThreadIds = async (userId: number) => {\r\n        try {\r\n            return await doFetch('/threads/' + userId);\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const getUserIds = async (userId: number) => {\r\n        try {\r\n            return await doFetch('/threadusers/' + userId);\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const getThreadName = async (threadId: number) => {\r\n        try {\r\n            const thread = await doFetch('/thread/' + threadId);\r\n            return thread.name;\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const postMessage = async (messageObject: Object) => {\r\n        const fetchOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: messageObject,\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            const result = await doFetch('/message', fetchOptions);\r\n            return result.success\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const getMessages = async (threadId: number) => {\r\n        try {\r\n            return await doFetch('/messages/' + threadId);\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const getAllMessages = async (threadId: number) => {\r\n        try {\r\n            return await doFetch('/all_messages/' + threadId);\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const getLastMessage = async (id: number) => {\r\n        try {\r\n            return await doFetch('/last_message/' + id);\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const createNewChatThread = async (chatThreadObject: Object) => {\r\n        const fetchOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: chatThreadObject,\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            const result = await doFetch('/new_thread', fetchOptions);\r\n            return result\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    return { getThreadIds, getUserIds, getThreadName, postMessage, getMessages, getAllMessages, getLastMessage, createNewChatThread }\r\n}\r\n\r\nexport { useUsers, useChats };","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface propType {\r\n    children: any\r\n}\r\n\r\ntype userContextState = {\r\n    user: number;\r\n    setUser: (id: number) => void;\r\n};\r\n\r\nconst contextDefaultValues: userContextState = {\r\n    user: 0,\r\n    setUser: () => { }\r\n};\r\n\r\nconst MediaContext = React.createContext<userContextState>(contextDefaultValues)\r\n\r\nconst MediaProvider = ({ children }: propType) => {\r\n    const [user, setUser] = useState<number>(contextDefaultValues.user);\r\n    return (\r\n        <MediaContext.Provider value={{ user, setUser }}>\r\n            {children}\r\n        </MediaContext.Provider>\r\n    );\r\n};\r\n\r\nMediaProvider.propTypes = {\r\n    children: PropTypes.node,\r\n};\r\n\r\nexport { MediaContext, MediaProvider };","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport {\r\n    AppBar,\r\n    makeStyles,\r\n    Toolbar,\r\n    Link,\r\n    Button,\r\n} from '@material-ui/core';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport { useUsers } from '../hooks/apiHooks';\r\nimport { useContext, useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { MediaContext } from '../contexts/mediaContext';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        backgroundColor: '#5F4B8BFF',\r\n        width: '100vw',\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        paddingRight: '24px',\r\n    },\r\n    toolbar: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n    },\r\n    itemPack: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    logo: {\r\n        position: 'absolute',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        left: '71px',\r\n        transform: 'translate(-50%)',\r\n    },\r\n}));\r\n\r\nconst Nav = () => {\r\n    const classes = useStyles();\r\n    const [logged, setLogged] = useState(false);\r\n    const { user, setUser } = useContext(MediaContext);\r\n    const { getIsLoggedIn } = useUsers();\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                console.log('NAV');\r\n                const isLoggedIn = await getIsLoggedIn()\r\n                if (isLoggedIn.success) {\r\n                    setLogged(true);\r\n                    setUser(isLoggedIn.id);\r\n                } else {\r\n                    setLogged(false);\r\n                }\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        })();\r\n    }, [user]);\r\n\r\n    return (\r\n        <>\r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar className={classes.toolbar}>\r\n                    <Link\r\n                        component={RouterLink}\r\n                        to=\"/\"\r\n                        className={classes.logo}\r\n                        color=\"inherit\"\r\n                        style={{ textDecoration: 'none' }}\r\n                    >\r\n                        <h2>ChatApp</h2>\r\n                    </Link>\r\n                    <div className={classes.itemPack}>\r\n                        {logged ? (\r\n                            <div>\r\n                                <Button\r\n                                    color=\"inherit\"\r\n                                    component={RouterLink}\r\n                                    to=\"/logout\"\r\n                                >\r\n                                    Logout\r\n                                </Button>\r\n                            </div>\r\n                        ) : (\r\n                            <Button\r\n                                color=\"inherit\"\r\n                                startIcon={<ExitToAppIcon />}\r\n                                component={RouterLink}\r\n                                to=\"/login\"\r\n                            >\r\n                                Login\r\n                            </Button>\r\n                        )}\r\n\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Nav;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\ninterface propType {\n    children: any\n}\n\ntype userContextState = {\n    websocket: any;\n    setWebsocket: (socket: WebSocket) => void;\n};\n\nconst contextDefaultValues: userContextState = {\n    websocket: undefined,\n    setWebsocket: () => { }\n};\n\nconst WebsocketContext = React.createContext<userContextState>(contextDefaultValues)\n\nconst WebsocketProvider = ({ children }: propType) => {\n    const [websocket, setWebsocket] = useState<WebSocket>();\n    return (\n        <WebsocketContext.Provider value={{ websocket, setWebsocket }}>\n            {children}\n        </WebsocketContext.Provider>\n    );\n};\n\nWebsocketProvider.propTypes = {\n    children: PropTypes.node,\n};\n\nexport { WebsocketContext, WebsocketProvider };","import { Grid, ListItem, ListItemText, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useContext } from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { MediaContext } from '../contexts/mediaContext';\nimport moment from 'moment';\n\ninterface usernamesArray {\n    user_id: number,\n    username: string,\n}\n\ninterface messagesArray {\n    id: number,\n    user_id: number,\n    contents: string,\n    timestamp: Date,\n}\n\ninterface propType {\n    message_id: number,\n    user_id: number,\n    contents: string,\n    timestamp: Date,\n    setMessageId: Function,\n    usernames: usernamesArray[],\n    index: number,\n    messageArray: messagesArray[],\n}\n\nconst useStyles = makeStyles((theme) => ({\n    message: {\n        backgroundColor: 'lightGrey',\n        marginBottom: 0,\n        borderRadius: '1rem',\n        padding: '0.5rem',\n        maxWidth: '60%',\n        [theme.breakpoints.down(1000)]: {\n            maxWidth: '75%',\n        },\n        [theme.breakpoints.down(1000)]: {\n            maxWidth: '85%',\n        },\n    },\n    ownMessage: {\n        backgroundColor: '#5F4B8BFF',\n        color: 'white',\n        marginBottom: 0,\n        borderRadius: '1rem',\n        padding: '0.5rem',\n        maxWidth: '60%',\n        [theme.breakpoints.down(1000)]: {\n            maxWidth: '75%',\n        },\n        [theme.breakpoints.down(600)]: {\n            maxWidth: '85%',\n        },\n    },\n    inline: {\n        display: 'inline',\n    },\n    inlineOwn: {\n        display: 'inline',\n        color: 'white',\n    },\n    timestamp: {\n        fontSize: '0.7rem',\n        marginLeft: '2rem'\n    },\n    dateIndicator: {\n        background: 'rgb(95, 75, 139, .2)',\n        borderRadius: '0.3rem',\n        padding: '0.2rem',\n        marginBottom: '0.5rem',\n        textAlign: 'center',\n    }\n}));\n\nconst Message = ({ message_id, user_id, contents, timestamp, setMessageId, usernames, index, messageArray }: propType) => {\n    const classes = useStyles();\n    const [username, setUsername] = useState('');\n    const [time, setTime] = useState('');\n    const [ownMessage, setOwnMessage] = useState(false);\n    const [showDate, setShowDate] = useState(false);\n    const { user } = useContext(MediaContext);\n    const formattedTimestamp = moment(timestamp).format('DD.MM.YYYY');\n\n    useEffect(() => {\n        try {\n            for (let i = 0; i < usernames.length; i++) {\n                if (usernames[i].user_id === user_id) {\n                    setUsername(usernames[i].username);\n                }\n            }\n\n            if (index !== 0) {\n                const formattedPreviousTimestamp = moment(messageArray[index - 1].timestamp).format('DD.MM.YYYY');\n                if (formattedTimestamp !== formattedPreviousTimestamp) {\n                    setShowDate(true);\n                }\n            } else {\n                setShowDate(true);\n            }\n\n            const d = new Date(timestamp);\n            let hours = d.getHours().toString();\n            let minutes = d.getMinutes().toString();\n            if (d.getHours() < 10) {\n                hours = '0' + hours;\n            }\n            if (d.getMinutes() < 10) {\n                minutes = '0' + minutes;\n            }\n            const formatedTime = hours + '.' + minutes;\n            setTime(formatedTime);\n\n            if (user_id === user) {\n                setOwnMessage(true)\n            } else {\n                setOwnMessage(false);\n            }\n            setMessageId(message_id);\n        } catch (e) {\n            console.log(e.message);\n        }\n    }, [message_id]);\n\n\n    return (\n        <>\n            <ListItem style={{ width: '100%', display: 'flex', flexDirection: 'column' }}>\n                {showDate &&\n                    <Grid container justifyContent=\"center\" >\n                        <Typography className={classes.dateIndicator} component=\"h6\" variant=\"body1\">{formattedTimestamp}</Typography>\n                    </Grid>\n                }\n                {ownMessage ? (\n                    <Grid container justify=\"flex-end\" >\n                        <Grid item className={classes.ownMessage}>\n                            <ListItemText\n                                primary={\n                                    <>\n                                        <Grid container justify=\"space-between\">\n                                            <Typography\n                                                component=\"h2\"\n                                            >\n                                                {username}\n                                            </Typography>\n                                            <Typography\n                                                component=\"span\"\n                                                variant=\"subtitle1\"\n                                                className={classes.timestamp}\n                                            >\n                                                {time}\n                                            </Typography>\n                                        </Grid>\n                                    </>\n                                }\n                                secondary={\n                                    <>\n                                        <Typography\n                                            component=\"span\"\n                                            variant=\"body2\"\n                                            className={classes.inlineOwn}\n                                        >\n                                            {contents}\n                                        </Typography>\n                                    </>\n                                }\n                            />\n                        </Grid>\n                    </Grid>\n                ) : (\n                    <Grid container justify=\"flex-start\" >\n                        <Grid item className={classes.message}>\n                            <ListItemText\n                                primary={\n                                    <>\n                                        <Grid container justify=\"space-between\">\n                                            <Typography\n                                                component=\"h2\"\n                                            >\n                                                {username}\n                                            </Typography>\n                                            <Typography\n                                                component=\"span\"\n                                                variant=\"subtitle1\"\n                                                className={classes.timestamp}\n                                            >\n                                                {time}\n                                            </Typography>\n                                        </Grid>\n                                    </>\n                                }\n                                secondary={\n                                    <>\n                                        <Typography\n                                            component=\"span\"\n                                            variant=\"body2\"\n                                            className={classes.inline}\n                                            color=\"textPrimary\"\n                                        >\n                                            {contents}\n                                        </Typography>\n                                    </>\n                                }\n                            />\n                        </Grid>\n                    </Grid>\n                )\n                }\n\n            </ListItem >\n        </>\n    )\n}\n\nexport default Message;","import { useState, useEffect } from 'react';\n\nconst getWindowDimensions = () => {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height,\n    };\n};\n\nexport default function useWindowDimensions() {\n    const [windowDimensions, setWindowDimensions] = useState(\n        getWindowDimensions()\n    );\n\n    useEffect(() => {\n        function handleResize() {\n            setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return windowDimensions;\n}","import { Button, Grid, List, TextField } from '@material-ui/core';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { FormEvent, useContext, useEffect, useState } from 'react';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { MediaContext } from '../contexts/mediaContext';\r\nimport { useChats, useUsers } from '../hooks/apiHooks';\r\nimport Message from '../components/message';\r\nimport useWindowDimensions from '../hooks/windowDimensionsHook';\r\nimport { useRef } from 'react';\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    textField: {\r\n        width: '70%',\r\n        backgroundColor: 'white',\r\n        borderRadius: '0.5rem',\r\n        [theme.breakpoints.down(600)]: {\r\n            marginTop: '0.27rem'\r\n        },\r\n    },\r\n    sendButton: {\r\n        marginTop: '0.25rem',\r\n        padding: '12px 0 12px 12px',\r\n        [theme.breakpoints.down(600)]: {\r\n            marginTop: 0\r\n        },\r\n    },\r\n    thread: {\r\n        padding: '0 6rem',\r\n        backgroundColor: '#E69A8DFF',\r\n        height: '90%',\r\n        overflowX: 'hidden',\r\n        overflowY: 'auto',\r\n        [theme.breakpoints.down(1000)]: {\r\n            padding: '0 1rem',\r\n        },\r\n    },\r\n    arrowBack: {\r\n        position: 'absolute',\r\n        top: '58px',\r\n        left: 0,\r\n        zIndex: 10,\r\n        padding: 0,\r\n    }\r\n}));\r\n\r\ninterface messagesArray {\r\n    id: number,\r\n    user_id: number,\r\n    contents: string,\r\n    timestamp: Date,\r\n}\r\n\r\ninterface propType {\r\n    messages: messagesArray[],\r\n    id: number,\r\n    websocket: WebSocket | undefined,\r\n    messageAmount: number,\r\n    setMessageAmount: Function,\r\n    setThreadOpen: Function,\r\n    setThreadId: Function,\r\n}\r\n\r\ninterface usernamesArray {\r\n    user_id: number,\r\n    username: string,\r\n}\r\n\r\n\r\nconst Thread = ({ messages, id, websocket, messageAmount, setMessageAmount, setThreadOpen, setThreadId }: propType) => {\r\n    const classes = useStyles();\r\n    const [message, setMessage] = useState('');\r\n    const [messageId, setMessageId] = useState(0);\r\n    const [showButton, setShowButton] = useState(false);\r\n    const [usernames, setUsernames] = useState<usernamesArray[]>([])\r\n    const [moreMessages, setMoreMessages] = useState<messagesArray[]>([])\r\n    const [loadMore, setLoadMore] = useState(false);\r\n    const [messageScroll, setMessageScroll] = useState(false);\r\n    const [currentThread, setCurrentThread] = useState(0);\r\n    const { user } = useContext(MediaContext);\r\n    const { postMessage, getUserIds, getAllMessages } = useChats();\r\n    const { getUsernameById } = useUsers();\r\n    const { height } = useWindowDimensions();\r\n    const [heightCorrected, setHeightCorrected] = useState(height - 64);\r\n    const messagesEndRef = useRef<null | HTMLDivElement>(null)\r\n    const messagesEndRef2 = useRef<null | HTMLDivElement>(null)\r\n\r\n    const isMobile = useMediaQuery({\r\n        query: '(max-width: 600px)'\r\n    });\r\n\r\n    useEffect(() => {\r\n        try {\r\n            if (isMobile) {\r\n                setHeightCorrected(height - 56);\r\n            } else {\r\n                setHeightCorrected(height - 64);\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message);\r\n        }\r\n    }, [isMobile]);\r\n\r\n    const scrollToBottom = (number: number) => {\r\n        if (number === 1) {\r\n            messagesEndRef.current?.scrollIntoView()\r\n        } else {\r\n            messagesEndRef2.current?.scrollIntoView()\r\n            setMessageScroll(true);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                if (loadMore && !messageScroll) {\r\n                    scrollToBottom(2);\r\n                } else {\r\n                    scrollToBottom(1);\r\n                }\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        })();\r\n    }, [messageId]);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                if (currentThread !== id) {\r\n                    setLoadMore(false);\r\n                    setMessageScroll(false);\r\n                    setMessageAmount(50);\r\n                }\r\n                setCurrentThread(id);\r\n                console.log('messageUpdate')\r\n                if (messages.length >= 50 && !loadMore) {\r\n                    setShowButton(true);\r\n                } else {\r\n                    setShowButton(false);\r\n                }\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        })();\r\n    }, [messages]);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                setUsernames([]);\r\n                console.log('USERNAMELIST')\r\n                const userIds = await getUserIds(id);\r\n                let usernameArray: Array<usernamesArray> = [];\r\n                for (let i = 0; i < userIds.length; i++) {\r\n                    const user = await getUsernameById(userIds[i].user_id);\r\n                    const userObject = {\r\n                        user_id: userIds[i].user_id,\r\n                        username: user.username\r\n                    }\r\n                    usernameArray.push(userObject);\r\n                }\r\n                setUsernames(usernameArray)\r\n\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        })();\r\n    }, [id]);\r\n\r\n    const handleSubmit = async (event: FormEvent) => {\r\n        event.preventDefault();\r\n        try {\r\n            if (message !== '') {\r\n                const tzoffset = (new Date()).getTimezoneOffset() * 60000;\r\n                const localISOTime = (new Date(Date.now() - tzoffset)).toISOString().slice(0, -1);\r\n                console.log('TIMEST: ', localISOTime)\r\n                const messageObject = JSON.stringify({\r\n                    contents: message,\r\n                    timestamp: localISOTime,\r\n                    user_id: user,\r\n                    thread_id: id,\r\n\r\n                });\r\n                const success = await postMessage(messageObject)\r\n                console.log('SUCCESS: ', success)\r\n                const webSocketUpdate = {\r\n                    type: 'message',\r\n                    contents: message,\r\n                    timestamp: localISOTime,\r\n                    user_id: user,\r\n                    thread_id: id\r\n                }\r\n                if (websocket !== undefined) {\r\n                    websocket.send(JSON.stringify(webSocketUpdate));\r\n                }\r\n                setMessage('');\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message);\r\n        }\r\n    };\r\n\r\n    const loadAllMessages = async () => {\r\n        try {\r\n            let amount;\r\n            if (currentThread !== id) {\r\n                setMessageAmount(50);\r\n                amount = 50;\r\n            } else {\r\n                amount = messageAmount;\r\n            }\r\n            const allMessages = await getAllMessages(id);\r\n            console.log('MESSAGE AMOUNT', messageAmount, allMessages);\r\n            allMessages.splice(allMessages.length - amount, amount);\r\n            setMoreMessages(allMessages);\r\n            setLoadMore(true);\r\n            setShowButton(false);\r\n        } catch (e) {\r\n            console.log(e.message);\r\n        }\r\n    };\r\n\r\n    const closeThread = () => {\r\n        try {\r\n            setThreadOpen(false);\r\n            setThreadId(0);\r\n        } catch (e) {\r\n            console.log(e.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isMobile &&\r\n                <Button className={classes.arrowBack} onClick={closeThread}>\r\n                    <ArrowBackIcon /> Back\r\n                </Button>\r\n            }\r\n            <Grid container justify=\"center\" direction=\"column\" style={{ height: heightCorrected }}>\r\n                <Grid item justify=\"center\" className={classes.thread}>\r\n                    {loadMore &&\r\n                        <List>\r\n                            {moreMessages.map((item, index) => (\r\n                                <Message\r\n                                    message_id={item.id}\r\n                                    user_id={item.user_id}\r\n                                    contents={item.contents}\r\n                                    timestamp={item.timestamp}\r\n                                    setMessageId={setMessageId}\r\n                                    usernames={usernames}\r\n                                    index={index}\r\n                                    messageArray={moreMessages}\r\n                                />\r\n                            ))}{' '}\r\n                            <div ref={messagesEndRef2} />\r\n                        </List>\r\n                    }\r\n                    {showButton &&\r\n                        <Button onClick={loadAllMessages}>Load all messages</Button>\r\n                    }\r\n                    {usernames.length > 0 &&\r\n                        <List>\r\n                            {messages.map((item, index) => (\r\n                                <Message\r\n                                    message_id={item.id}\r\n                                    user_id={item.user_id}\r\n                                    contents={item.contents}\r\n                                    timestamp={item.timestamp}\r\n                                    setMessageId={setMessageId}\r\n                                    usernames={usernames}\r\n                                    index={index}\r\n                                    messageArray={messages}\r\n                                />\r\n                            ))}{' '}\r\n                            <div ref={messagesEndRef} />\r\n                        </List>\r\n                    }\r\n                </Grid>\r\n                <Grid item container justify=\"center\" direction=\"column\" style={{ height: '10%', backgroundColor: 'lightgray' }}>\r\n                    <Grid item>\r\n                        <form\r\n                            onSubmit={handleSubmit}\r\n                        >\r\n                            {isMobile ? (\r\n                                <TextField\r\n                                    value={message}\r\n                                    variant=\"outlined\"\r\n                                    label=\"Say something!\"\r\n                                    onInput={(event) => setMessage((event.target as HTMLInputElement).value)}\r\n                                    className={classes.textField}\r\n                                    size=\"small\"\r\n                                />\r\n                            ) : (\r\n                                <TextField\r\n                                    value={message}\r\n                                    variant=\"outlined\"\r\n                                    label=\"Say something!\"\r\n                                    onInput={(event) => setMessage((event.target as HTMLInputElement).value)}\r\n                                    className={classes.textField}\r\n                                />\r\n                            )}\r\n                            <IconButton\r\n                                type=\"submit\"\r\n                                color=\"default\"\r\n                                className={classes.sendButton}\r\n                            >\r\n                                <SendIcon style={{ fill: '#5F4B8BFF' }} />\r\n                            </IconButton>\r\n\r\n                        </form>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Thread;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { Button, Grid, ListItem, ListItemText, makeStyles, Typography } from \"@material-ui/core\";\r\nimport { useContext, useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { WebsocketContext } from \"../contexts/websocketContext\";\r\nimport { useChats, useUsers } from '../hooks/apiHooks';\r\nimport moment from 'moment';\r\n\r\ninterface propType {\r\n    id: number,\r\n    setThreadOpen: Function,\r\n    setThreadId: Function,\r\n    threadOpen: Boolean,\r\n    threadId: number,\r\n    updateThreadButtonInfos: number,\r\n}\r\n\r\ninterface lastMessageObject {\r\n    username: string,\r\n    contents: string,\r\n    timestamp: any,\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    text: {\r\n        color: 'white',\r\n        width: '100%',\r\n        padding: '1rem',\r\n    },\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    lastMessage: {\r\n        display: 'block',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n        fontSize: '0.7rem'\r\n    },\r\n    timestamp: {\r\n        fontSize: '0.5rem',\r\n        marginLeft: '2rem'\r\n    },\r\n    button: {\r\n        width: '100%',\r\n        maxWidth: '30vw',\r\n        padding: '0 0.7rem',\r\n        borderBottom: '1px solid #5F4B8BFF',\r\n        cursor: 'pointer',\r\n        '&:hover': {\r\n            background: \"#f0f0f0\",\r\n        },\r\n        [theme.breakpoints.down(600)]: {\r\n            maxWidth: 'none',\r\n            width: '100vw',\r\n        },\r\n    }\r\n}));\r\n\r\nconst ThreadButton = ({ id, setThreadOpen, setThreadId, threadOpen, threadId, updateThreadButtonInfos }: propType) => {\r\n    const { getThreadName, getLastMessage } = useChats();\r\n    const { getUsernameById } = useUsers();\r\n    const [name, setName] = useState('');\r\n    const [lastMessage, setLastMessage] = useState<lastMessageObject>({\r\n        username: '',\r\n        contents: '',\r\n        timestamp: ''\r\n    });\r\n    const { websocket } = useContext(WebsocketContext);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const threadName = await getThreadName(id)\r\n                setName(threadName)\r\n                const lastMessageData = await getLastMessage(id)\r\n                if (lastMessageData.length !== 0) {\r\n                    const username = await getUsernameById(lastMessageData[0].user_id);\r\n                    const now = moment().startOf('day')\r\n                    const formatedDate = moment(lastMessageData[0].timestamp).startOf('day');\r\n                    const difference = now.diff(formatedDate, 'days');\r\n                    let formatedTime;\r\n                    if (difference === 0) {\r\n                        const d = new Date(lastMessageData[0].timestamp);\r\n                        let hours = d.getHours().toString();\r\n                        let minutes = d.getMinutes().toString();\r\n                        if (d.getHours() < 10) {\r\n                            hours = '0' + hours;\r\n                        }\r\n                        if (d.getMinutes() < 10) {\r\n                            minutes = '0' + minutes;\r\n                        }\r\n                        formatedTime = hours + '.' + minutes;\r\n                    } else if (difference === 1) {\r\n                        formatedTime = 'Yesterday';\r\n                    } else {\r\n                        formatedTime = moment(lastMessageData[0].timestamp).format('DD.MM.YYYY');\r\n                    }\r\n\r\n                    const lastMessageObject = {\r\n                        username: username.username + ':',\r\n                        contents: lastMessageData[0].contents,\r\n                        timestamp: formatedTime,\r\n                    }\r\n                    setLastMessage(lastMessageObject);\r\n                } else {\r\n                    const noLastMessageObject = {\r\n                        username: 'No messages yet.',\r\n                        contents: '',\r\n                        timestamp: '',\r\n                    }\r\n                    setLastMessage(noLastMessageObject);\r\n                }\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        })();\r\n    }, [id, updateThreadButtonInfos]);\r\n\r\n    const openThread = () => {\r\n        try {\r\n            if (!threadOpen) {\r\n                setThreadOpen(true)\r\n                setThreadId(id)\r\n            } else {\r\n                if (threadId === id) {\r\n                    setThreadOpen(false)\r\n                    setThreadId(0)\r\n                } else {\r\n                    setThreadId(id)\r\n                }\r\n                if (websocket !== undefined) {\r\n                    websocket.close();\r\n                }\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ListItem onClick={openThread} className={classes.button} >\r\n                <ListItemText\r\n                    primary={\r\n                        <>\r\n                            <Grid container justify=\"space-between\">\r\n                                <Typography\r\n                                    component=\"h1\"\r\n                                >\r\n                                    {name}\r\n                                </Typography>\r\n                                <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"subtitle1\"\r\n                                    className={classes.timestamp}\r\n                                >\r\n                                    {lastMessage.timestamp}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </>\r\n                    }\r\n                    secondary={\r\n                        <>\r\n                            <Typography\r\n                                component=\"span\"\r\n                                variant=\"body2\"\r\n                                className={classes.lastMessage}\r\n                            >\r\n                                {lastMessage.username} {lastMessage.contents}\r\n                            </Typography>\r\n                        </>\r\n                    }\r\n                />\r\n            </ListItem>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ThreadButton","import { useState } from 'react';\r\n\r\nconst useForm = (callback: CallableFunction, initState: any) => {\r\n    const [inputs, setInputs] = useState(initState);\r\n\r\n    const handleSubmit = (event: any) => {\r\n        if (event) {\r\n            event.preventDefault();\r\n        }\r\n        callback();\r\n    };\r\n\r\n    const handleInputChange = (event: any) => {\r\n        event.persist();\r\n        setInputs((inputs: String) => ({\r\n            ...inputs,\r\n            [event.target.name]: event.target.value,\r\n        }));\r\n    };\r\n\r\n    const handleFileChange = (event: any) => {\r\n        event.persist();\r\n        setInputs((inputs: String) => ({\r\n            ...inputs,\r\n            [event.target.name]: event.target.files[0],\r\n        }));\r\n    };\r\n\r\n    return { inputs, handleSubmit, handleInputChange, handleFileChange, setInputs };\r\n};\r\n\r\nexport default useForm;\r\n","import { Button, FormControl, Grid, InputLabel, makeStyles, MenuItem, Select, Typography } from \"@material-ui/core\"\nimport { useState } from \"react\";\nimport { useContext, useEffect } from \"react\";\nimport { TextValidator, ValidatorForm } from \"react-material-ui-form-validator\"\nimport { MediaContext } from \"../contexts/mediaContext\";\nimport { useUsers, useChats } from \"../hooks/apiHooks\";\nimport useForm from \"../hooks/formHooks\";\n\ninterface propTypes {\n    websocket: WebSocket,\n    setModalOpen: Function,\n    setThreadOpen: Function,\n    setThreadId: Function,\n}\n\ninterface usersArrayType {\n    id: number,\n    username: string,\n}\n\nconst useStyles = makeStyles((theme) => ({\n    select: {\n        minWidth: '5rem',\n    },\n    formControl: {\n        marginTop: '0.5rem',\n    },\n    header: {\n        textAlign: 'center',\n        [theme.breakpoints.down(600)]: {\n            fontSize: '1.3rem',\n        },\n    },\n    createButton: {\n        backgroundColor: '#5F4B8BFF',\n        marginTop: '2rem',\n        marginBottom: '0.5rem',\n        '&:hover': {\n            backgroundColor: '#7159a6',\n        },\n    }\n}));\n\nconst ThreadForm = ({ websocket, setModalOpen, setThreadOpen, setThreadId }: propTypes) => {\n    const classes = useStyles();\n    const { user } = useContext(MediaContext);\n    const { createNewChatThread } = useChats();\n    const { getUsers } = useUsers();\n    const [usersArray, setUsersArray] = useState<usersArrayType[]>([]);\n    const [newThreadId, setNewThreadId] = useState(0);\n\n    const validators = {\n        threadName: ['required', 'minStringLength: 3', 'maxStringLength: 25'],\n    };\n\n    const errorMessages = {\n        threadName: [\n            'Required field',\n            'Minimum of 3 characters',\n            'Too many characters!',\n        ]\n    };\n\n    const createNewThread = async () => {\n        try {\n            if (inputs.user2 !== '') {\n                const chatThreadObject = JSON.stringify({\n                    name: inputs.threadName,\n                    user_id: user,\n                    user2_id: inputs.user2\n\n                });\n                const success = await createNewChatThread(chatThreadObject);\n                console.log('SUCCESS: ', success.success)\n                setNewThreadId(success.id);\n            } else {\n                alert('Choose a user with whom you want to chat!');\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n    }\n\n    const { inputs, handleInputChange, handleSubmit } = useForm(createNewThread, {\n        threadName: '',\n        user2: '',\n    });\n\n    useEffect(() => {\n        try {\n            if (newThreadId !== 0) {\n                console.log('NEWTHREADID', newThreadId);\n                const webSocketUpdate = {\n                    type: 'newThread',\n                    user_id: user,\n                    user2_id: inputs.user2,\n                    thread_id: newThreadId,\n                }\n                if (websocket !== undefined) {\n                    websocket.send(JSON.stringify(webSocketUpdate));\n                    setThreadOpen(true);\n                    setThreadId(newThreadId);\n                    setModalOpen(false);\n                }\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n    }, [newThreadId]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const users = await getUsers();\n                let arrayForUsers = [];\n                for (let i = 0; i < users.length; i++) {\n                    if (users[i].id !== user) {\n                        arrayForUsers.push(users[i]);\n                    }\n                }\n                setUsersArray(arrayForUsers);\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, []);\n\n    return (\n        <>\n            <Grid container justifyContent=\"center\" direction=\"column\">\n                <Typography variant=\"h4\" className={classes.header}>Create a new chat thread</Typography>\n                <ValidatorForm onSubmit={handleSubmit}>\n                    <Grid container item justifyContent=\"center\">\n                        <TextValidator\n                            type=\"text\"\n                            name=\"threadName\"\n                            label=\"Thread name\"\n                            onChange={handleInputChange}\n                            value={inputs.threadName}\n                            validators={validators.threadName}\n                            errorMessages={errorMessages.threadName}\n                        />\n                    </Grid>\n                    <Grid container item justifyContent=\"center\">\n                        <FormControl className={classes.formControl}>\n                            <InputLabel>User</InputLabel>\n                            <Select\n                                name=\"user2\"\n                                value={inputs.user2}\n                                label=\"User\"\n                                onChange={handleInputChange}\n                                autoWidth\n                                className={classes.select}\n                            >\n                                {usersArray.map((item) => (\n                                    <MenuItem value={item.id}>{item.username}</MenuItem>\n                                ))}{' '}\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                    <Grid container item justifyContent=\"center\">\n                        <Button\n                            className={classes.createButton}\n                            color=\"primary\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                        >\n                            Create\n                        </Button>\n                    </Grid>\n                </ValidatorForm>\n            </Grid>\n        </>\n    )\n}\n\nexport default ThreadForm;","import Box from \"@mui/material/Box\";\nimport MuiModal from \"@mui/material/Modal\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CloseIcon from '@mui/icons-material/Close';\nimport ThreadForm from \"./threadForm\";\n\nconst useStyles = makeStyles((theme) => ({\n    box: {\n        [theme.breakpoints.down(600)]: {\n            maxWidth: \"none!important\",\n            maxHeight: '95vh!important',\n            width: '75vw!important',\n        },\n    },\n    closeButton: {\n        position: 'absolute',\n        top: 1,\n        right: 1,\n        fontSize: '1.1rem!important',\n        cursor: 'pointer'\n    }\n}));\n\ninterface propTypes {\n    modalOpen: boolean,\n    setModalOpen: Function,\n    websocket: WebSocket,\n    setThreadOpen: Function,\n    setThreadId: Function,\n}\n\nconst Modal = ({ modalOpen, setModalOpen, websocket, setThreadOpen, setThreadId }: propTypes) => {\n    const classes = useStyles();\n\n    const handleClose = () => {\n        setModalOpen(false);\n    };\n\n    return (\n        <MuiModal\n            open={modalOpen}\n            onClose={handleClose}\n            aria-labelledby=\"modal-modal-title\"\n            aria-describedby=\"modal-modal-description\"\n        >\n            <Box\n                sx={{\n                    position: \"absolute\",\n                    top: \"50%\",\n                    left: \"50%\",\n                    transform: \"translate(-50%, -50%)\",\n                    maxWidth: \"40vw\",\n                    bgcolor: \"background.paper\",\n                    border: \"2px solid #000\",\n                    boxShadow: 24,\n                    p: 4,\n                }}\n                className={classes.box}\n            >\n                <CloseIcon className={classes.closeButton} onClick={handleClose} />\n                <ThreadForm websocket={websocket} setModalOpen={setModalOpen} setThreadOpen={setThreadOpen} setThreadId={setThreadId} />\n            </Box>\n        </MuiModal>\n    );\n}\n\nexport default Modal;","/* eslint-disable react-hooks/exhaustive-deps */\nimport { Button, Grid, List, Typography } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport Thread from '../components/thread';\nimport ThreadButton from '../components/threadButton';\nimport Modal from '../components/modal';\nimport { MediaContext } from '../contexts/mediaContext';\nimport { WebsocketContext } from '../contexts/websocketContext';\nimport { useUsers, useChats } from '../hooks/apiHooks';\nimport useWindowDimensions from '../hooks/windowDimensionsHook';\nimport { useMediaQuery } from 'react-responsive';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from '@mui/material';\n\nconst useStyles = makeStyles((theme) => ({\n    newThreadButton: {\n        backgroundColor: '#5F4B8BFF',\n        marginTop: '1rem',\n        '&:hover': {\n            backgroundColor: '#7159a6',\n        },\n        [theme.breakpoints.down(1000)]: {\n            fontSize: '0.8rem',\n            padding: '6px 10px'\n        },\n        [theme.breakpoints.down(800)]: {\n            fontSize: '0.7rem',\n            padding: '6px 6px'\n        },\n        [theme.breakpoints.down(600)]: {\n            fontSize: '0.875rem',\n            padding: '6px 16px'\n        },\n    },\n    desktopContainer: {\n        [theme.breakpoints.up(1280)]: {\n            width: '70vw',\n        },\n    },\n    mobileWelcomeCard: {\n        maxWidth: '15rem',\n        margin: 'auto',\n        marginTop: '1rem'\n    },\n    mobileSubtitle: {\n        fontSize: '0.9rem'\n    }\n}));\n\ninterface propType {\n    history: {\n        push: Function,\n    }\n}\n\ninterface threadsArray {\n    thread_id: number\n}\n\ninterface sortedThreadsArray {\n    id: number,\n    timestamp: string,\n}\n\ninterface messagesArray {\n    id: number,\n    user_id: number,\n    contents: string,\n    timestamp: Date,\n}\n\nconst Home = ({ history }: propType) => {\n    const classes = useStyles();\n    const { user, setUser } = useContext(MediaContext);\n    const [username, setusername] = useState('');\n    const { websocket, setWebsocket } = useContext(WebsocketContext);\n    const { getIsLoggedIn, getUsernameById } = useUsers();\n    const { getThreadIds, getMessages } = useChats();\n    const { height } = useWindowDimensions();\n    const [heightCorrected, setHeightCorrected] = useState(height - 64);\n    const [threads, setThreads] = useState<threadsArray[]>([]);\n    const [sortedThreads, setSortedThreads] = useState<sortedThreadsArray[]>([]);\n    const [threadOpen, setThreadOpen] = useState(false)\n    const [threadId, setThreadId] = useState(0)\n    const [messages, setMessages] = useState<messagesArray[]>([]);\n    const [updateState, setUpdateState] = useState(Date.now());\n    const [updateThreadButtons, setUpdateThreadButtons] = useState(Date.now());\n    const [updateThreadButtonInfos, setUpdateThreadButtonInfos] = useState(Date.now());\n    const [messageAmount, setMessageAmount] = useState(50);\n    const [modalOpen, setModalOpen] = useState(false);\n    const [wsMessage, setWsMessage] = useState({\n        type: '',\n        contents: '',\n        timestamp: new Date(),\n        user_id: 0,\n        thread_id: 0\n    });\n\n    const isMobile = useMediaQuery({\n        query: '(max-width: 600px)'\n    });\n\n    const isDesktop = useMediaQuery({\n        query: '(min-width: 1280px)'\n    });\n\n    useEffect(() => {\n        try {\n            if (isMobile) {\n                setHeightCorrected(height - 56);\n            } else {\n                setHeightCorrected(height - 64);\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n    }, [isMobile]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                console.log('USER: ', user)\n                const isLoggedIn = await getIsLoggedIn();\n                if (!isLoggedIn.success) {\n                    history.push('/login');\n                }\n                setUser(isLoggedIn.id)\n                const name = await getUsernameById(isLoggedIn.id);\n                setusername(name.username);\n                console.log('Logged user: ', user, isLoggedIn.id);\n                if (user !== 0) {\n                    const chatThreads = await getThreadIds(isLoggedIn.id)\n                    if (chatThreads.length > 0) {\n                        setThreads(chatThreads);\n                    } else {\n                        setThreads([{ thread_id: 0 }]);\n                    }\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [user, updateThreadButtons]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                if (threads.length > 0) {\n                    if (threads[0].thread_id !== 0) {\n                        let idArray = [];\n                        for (let i = 0; i < threads.length; i++) {\n                            const threadMessages = await getMessages(threads[i].thread_id);\n                            const threadIdObject = {\n                                id: threads[i].thread_id,\n                                timestamp: threadMessages.length > 0 ? threadMessages[0].timestamp : '1999-02-06T05:47:00',\n                            };\n                            idArray.push(threadIdObject);\n                        }\n                        idArray.sort((a, b) => (a.timestamp < b.timestamp) ? 1 : ((b.timestamp < a.timestamp) ? -1 : 0));\n                        console.log('IDARRAY', idArray);\n                        setSortedThreads(idArray);\n                    }\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [threads, updateThreadButtonInfos]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                if (threadId !== 0) {\n                    const threadMessages = await getMessages(threadId);\n                    const reversedArray = threadMessages.reverse();\n                    setMessages(reversedArray);\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [threadId, updateState]);\n\n    useEffect(() => {\n        try {\n            if (wsMessage.type !== '' && wsMessage.thread_id === threadId) {\n                const newMessageObject = {\n                    id: Date.now(),\n                    user_id: wsMessage.user_id,\n                    contents: wsMessage.contents,\n                    timestamp: wsMessage.timestamp,\n                }\n                setMessages(messages => [...messages, newMessageObject]);\n                setMessageAmount(messageAmount + 1);\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n    }, [wsMessage]);\n\n    useEffect(() => {\n        try {\n            if (threads.length !== 0) {\n                if (websocket === undefined || websocket.readyState === 2 || websocket.readyState === 3) {\n                    console.log('READYSTATE ', websocket?.readyState)\n                    const socket = new WebSocket('ws://localhost:3001');\n\n                    socket.addEventListener('open', function (event) {\n                        try {\n                            console.log('Server is opened.');\n                            const client = {\n                                type: 'client',\n                                user_id: user,\n                                threads: threads,\n                            }\n                            socket.send(JSON.stringify(client));\n                        } catch (e) {\n                            console.log(e.message);\n                        }\n                    });\n\n                    socket.addEventListener('message', function (event) {\n                        try {\n                            if (event.data !== 'ping') {\n                                console.log('Message from server ', JSON.parse(event.data).thread_id);\n                                const message = JSON.parse(event.data);\n                                if (message.type === 'message') {\n                                    setWsMessage(message);\n                                    setUpdateThreadButtonInfos(Date.now());\n                                } else if (message.type === 'newThread') {\n                                    setUpdateThreadButtons(Date.now());\n                                }\n                            } else {\n                                setTimeout(() => socket.send('pong'), 1000);\n                            }\n                        } catch (e) {\n                            console.log(e.message);\n                        }\n                    });\n\n                    socket.addEventListener('close', function (event) {\n                        try {\n                            console.log('Websocket connection closed.');\n                            setUpdateState(Date.now());\n                        } catch (e) {\n                            console.log(e.message);\n                        }\n                    });\n\n                    setWebsocket(socket);\n                    console.log('NEW SOCKET');\n                }\n            }\n        } catch (e) {\n            console.log(e.message);\n        };\n    }, [updateState, threads]);\n\n    const setCreateNewChatThreadOpen = () => {\n        setModalOpen(true);\n    }\n\n\n    return (\n        <>\n            {isMobile ? (\n                <Grid container direction=\"column\" style={{ height: heightCorrected, }} >\n                    {threadOpen ? (\n                        <Grid item >\n                            <Thread\n                                messages={messages}\n                                id={threadId}\n                                websocket={websocket}\n                                messageAmount={messageAmount}\n                                setMessageAmount={setMessageAmount}\n                                setThreadOpen={setThreadOpen}\n                                setThreadId={setThreadId}\n                            />\n                        </Grid>\n                    ) : (\n                        <Grid item>\n                            <Card className={classes.mobileWelcomeCard}>\n                                <Grid container alignItems=\"center\" justify=\"center\" direction=\"column\" >\n                                    <Typography component=\"h6\" variant=\"h6\">Welcome {username}!</Typography>\n                                    <Typography className={classes.mobileSubtitle} component=\"div\" variant=\"body1\">This is Chat App made by Tommi.</Typography>\n                                </Grid>\n                            </Card>\n                            <Button\n                                onClick={setCreateNewChatThreadOpen}\n                                color=\"primary\"\n                                variant=\"contained\"\n                                className={classes.newThreadButton}\n                            >\n                                Create a new chat thread\n                            </Button>\n                            <Grid container style={{ borderTop: '1px solid #5F4B8BFF', marginTop: '1rem' }} >\n                                <List style={{ padding: 0, width: '100vw' }}>\n                                    {sortedThreads.map((item) => (\n                                        <ThreadButton\n                                            id={item.id}\n                                            setThreadOpen={setThreadOpen}\n                                            setThreadId={setThreadId}\n                                            threadOpen={threadOpen}\n                                            threadId={threadId}\n                                            updateThreadButtonInfos={updateThreadButtonInfos}\n                                        />\n                                    ))}{' '}\n                                </List>\n                            </Grid>\n                        </Grid>\n                    )}\n                </Grid>\n            ) : (\n                <>\n                    {isDesktop ? (\n                        <Card style={{ width: '70vw', margin: 'auto' }}>\n                            <Grid container direction=\"row\" style={{ height: heightCorrected, }} className={classes.desktopContainer} >\n                                <Grid item style={{ width: '30%', borderRight: '1px solid #5F4B8BFF', maxHeight: heightCorrected, overflowY: 'auto' }}>\n                                    <Button\n                                        onClick={setCreateNewChatThreadOpen}\n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        className={classes.newThreadButton}\n                                    >\n                                        Create a new chat thread\n                                    </Button>\n                                    <Grid container style={{ borderTop: '1px solid #5F4B8BFF', marginTop: '1rem' }} >\n                                        <List style={{ padding: 0, width: '100%' }}>\n                                            {sortedThreads.map((item) => (\n                                                <ThreadButton\n                                                    id={item.id}\n                                                    setThreadOpen={setThreadOpen}\n                                                    setThreadId={setThreadId}\n                                                    threadOpen={threadOpen}\n                                                    threadId={threadId}\n                                                    updateThreadButtonInfos={updateThreadButtonInfos}\n                                                />\n                                            ))}{' '}\n                                        </List>\n                                    </Grid>\n                                </Grid>\n                                <Grid item style={{ width: '70%' }}>\n                                    {threadOpen ? (\n                                        <Thread\n                                            messages={messages}\n                                            id={threadId}\n                                            websocket={websocket}\n                                            messageAmount={messageAmount}\n                                            setMessageAmount={setMessageAmount}\n                                            setThreadOpen={setThreadOpen}\n                                            setThreadId={setThreadId}\n                                        />\n                                    ) : (\n                                        <Grid container alignItems=\"center\" justify=\"center\" direction=\"column\" >\n                                            <Typography component=\"h1\" variant=\"h2\">Welcome {username}!</Typography>\n                                            <Typography component=\"div\" variant=\"body1\">This is Chat App made by Tommi.</Typography>\n                                        </Grid>\n                                    )}\n                                </Grid>\n                            </Grid>\n                        </Card>\n                    ) : (\n                        <Grid container direction=\"row\" style={{ height: heightCorrected, }} className={classes.desktopContainer} >\n                            <Grid item style={{ width: '30%', borderRight: '1px solid #5F4B8BFF', maxHeight: heightCorrected, overflowY: 'auto' }}>\n                                <Button\n                                    onClick={setCreateNewChatThreadOpen}\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                    className={classes.newThreadButton}\n                                >\n                                    Create a new chat thread\n                                </Button>\n                                <Grid container style={{ borderTop: '1px solid #5F4B8BFF', marginTop: '1rem' }} >\n                                    <List style={{ padding: 0, width: '100%' }}>\n                                        {sortedThreads.map((item) => (\n                                            <ThreadButton\n                                                id={item.id}\n                                                setThreadOpen={setThreadOpen}\n                                                setThreadId={setThreadId}\n                                                threadOpen={threadOpen}\n                                                threadId={threadId}\n                                                updateThreadButtonInfos={updateThreadButtonInfos}\n                                            />\n                                        ))}{' '}\n                                    </List>\n                                </Grid>\n                            </Grid>\n                            <Grid item style={{ width: '70%' }}>\n                                {threadOpen ? (\n                                    <Thread\n                                        messages={messages}\n                                        id={threadId}\n                                        websocket={websocket}\n                                        messageAmount={messageAmount}\n                                        setMessageAmount={setMessageAmount}\n                                        setThreadOpen={setThreadOpen}\n                                        setThreadId={setThreadId}\n                                    />\n                                ) : (\n                                    <Grid container alignItems=\"center\" justify=\"center\" direction=\"column\" >\n                                        <Typography component=\"h1\" variant=\"h2\">Welcome {username}!</Typography>\n                                        <Typography component=\"div\" variant=\"body1\">This is Chat App made by Tommi.</Typography>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </Grid>\n                    )}\n                </>\n            )\n            }\n            <Modal\n                modalOpen={modalOpen}\n                setModalOpen={setModalOpen}\n                websocket={websocket}\n                setThreadOpen={setThreadOpen}\n                setThreadId={setThreadId}\n            />\n        </>\n    );\n\n}\n\nexport default Home","import { withRouter } from 'react-router-dom';\r\nimport { Button, Grid, TextField, Typography } from '@material-ui/core';\r\nimport useForm from '../hooks/formHooks';\r\nimport { useUsers } from '../hooks/apiHooks';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    loginHeader: {\r\n        [theme.breakpoints.down(600)]: {\r\n            fontSize: '2rem'\r\n        },\r\n    },\r\n    loginButton: {\r\n        backgroundColor: '#5F4B8BFF',\r\n        marginTop: '2rem',\r\n        marginBottom: '0.5rem',\r\n        '&:hover': {\r\n            backgroundColor: '#7159a6',\r\n        },\r\n    }\r\n}));\r\n\r\ninterface propType {\r\n    history: {\r\n        push: Function,\r\n    }\r\n}\r\n\r\nconst LoginForm = ({ history }: propType) => {\r\n    const classes = useStyles();\r\n    const { postLogin } = useUsers();\r\n    const doLogin = async () => {\r\n        try {\r\n            const userdata = await postLogin(inputs);\r\n            localStorage.setItem('id', userdata.id);\r\n            history.push('/');\r\n        } catch (e) {\r\n            console.log('doLogin', e.message);\r\n        }\r\n    };\r\n\r\n    const { inputs, handleInputChange, handleSubmit } = useForm(doLogin, {\r\n        username: '',\r\n        password: '',\r\n    });\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid\r\n                container\r\n                spacing={0}\r\n                direction=\"column\"\r\n                alignItems=\"center\"\r\n                justify=\"center\"\r\n            >\r\n                <Typography className={classes.loginHeader} component=\"h3\" variant=\"h3\" gutterBottom>\r\n                    Login\r\n                </Typography>\r\n            </Grid>\r\n            <Grid\r\n                container\r\n                spacing={0}\r\n                direction=\"column\"\r\n                alignItems=\"center\"\r\n                justify=\"center\"\r\n            >\r\n                <form onSubmit={handleSubmit}>\r\n                    <Grid container direction=\"column\">\r\n                        <Grid container item>\r\n                            <TextField\r\n                                type=\"text\"\r\n                                name=\"username\"\r\n                                label=\"Username\"\r\n                                onChange={handleInputChange}\r\n                                value={inputs.username}\r\n                            />\r\n                        </Grid>\r\n                        <Grid container item>\r\n                            <TextField\r\n                                type=\"password\"\r\n                                name=\"password\"\r\n                                label=\"Password\"\r\n                                onChange={handleInputChange}\r\n                                value={inputs.password}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid container item>\r\n                            <Button\r\n                                fullWidth\r\n                                className={classes.loginButton}\r\n                                color=\"primary\"\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                            >\r\n                                Login\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\n\r\nexport default withRouter(LoginForm);","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport useForm from '../hooks/formHooks';\r\nimport { useUsers } from '../hooks/apiHooks';\r\nimport { Grid, Typography, Button } from '@material-ui/core';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\nimport { useEffect } from 'react';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    registerHeader: {\r\n        [theme.breakpoints.down(600)]: {\r\n            fontSize: '2rem'\r\n        },\r\n    },\r\n    registerButton: {\r\n        backgroundColor: '#5F4B8BFF',\r\n        marginTop: '2rem',\r\n        marginBottom: '0.5rem',\r\n        '&:hover': {\r\n            backgroundColor: '#7159a6',\r\n        },\r\n    }\r\n}));\r\n\r\ninterface propType {\r\n    setToggle: Function\r\n}\r\n\r\nconst RegisterForm = ({ setToggle }: propType) => {\r\n    const classes = useStyles();\r\n    const { register, getUserAvailable } = useUsers();\r\n    const validators = {\r\n        username: ['required', 'minStringLength: 3', 'maxStringLength: 15', 'isAvailable'],\r\n        password: ['required', 'minStringLength: 5'],\r\n        confirm: ['required', 'isPasswordMatch'],\r\n    };\r\n\r\n    const errorMessages = {\r\n        username: [\r\n            'Required field',\r\n            'Minimum of 3 characters',\r\n            'Too many characters!',\r\n            'Username is not available',\r\n        ],\r\n        password: ['Required field', 'Minimum of 5 characters'],\r\n        confirm: ['Required field', 'Passwords do not match'],\r\n    };\r\n\r\n    const doRegister = async () => {\r\n        try {\r\n            const available = await getUserAvailable(inputs.username);\r\n            if (available) {\r\n                delete inputs.confirm;\r\n                const result = await register(inputs);\r\n                if (result.length > 0) {\r\n                    alert(result);\r\n                    setToggle(true);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message);\r\n        }\r\n    };\r\n\r\n    const { inputs, handleInputChange, handleSubmit } = useForm(doRegister, {\r\n        username: '',\r\n        password: '',\r\n        confirm: '',\r\n    });\r\n\r\n    useEffect(() => {\r\n        ValidatorForm.addValidationRule('isAvailable', async (value) => {\r\n            if (value.length > 2) {\r\n                try {\r\n                    const available = await getUserAvailable(value);\r\n                    return available;\r\n                } catch (e) {\r\n                    console.log(e.message);\r\n                    return true;\r\n                }\r\n            }\r\n        });\r\n\r\n        ValidatorForm.addValidationRule(\r\n            'isPasswordMatch',\r\n            (value) => value === inputs.password\r\n        );\r\n    }, [inputs]);\r\n\r\n    return (\r\n        <Grid container alignItems=\"center\">\r\n            <Grid\r\n                container\r\n                spacing={0}\r\n                direction=\"column\"\r\n                alignItems=\"center\"\r\n                justify=\"center\"\r\n            >\r\n                <Typography className={classes.registerHeader} component=\"h3\" variant=\"h3\" gutterBottom>\r\n                    Register\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item xs={12} container direction=\"column\" alignItems=\"center\">\r\n                <ValidatorForm onSubmit={handleSubmit}>\r\n                    <Grid container direction=\"column\">\r\n                        <Grid container item>\r\n                            <TextValidator\r\n                                fullWidth\r\n                                type=\"text\"\r\n                                name=\"username\"\r\n                                label=\"Username\"\r\n                                onChange={handleInputChange}\r\n                                value={inputs.username}\r\n                                validators={validators.username}\r\n                                errorMessages={errorMessages.username}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid container item>\r\n                            <TextValidator\r\n                                fullWidth\r\n                                type=\"password\"\r\n                                name=\"password\"\r\n                                label=\"Password\"\r\n                                onChange={handleInputChange}\r\n                                value={inputs.password}\r\n                                validators={validators.password}\r\n                                errorMessages={errorMessages.password}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid container item>\r\n                            <TextValidator\r\n                                fullWidth\r\n                                type=\"password\"\r\n                                name=\"confirm\"\r\n                                label=\"Confirm password\"\r\n                                onChange={handleInputChange}\r\n                                value={inputs.confirm}\r\n                                validators={validators.confirm}\r\n                                errorMessages={errorMessages.confirm}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid container item>\r\n                            <Button\r\n                                fullWidth\r\n                                className={classes.registerButton}\r\n                                color=\"primary\"\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                            >\r\n                                Register\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </ValidatorForm>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default RegisterForm;","import LoginForm from '../components/loginForm';\r\nimport RegisterForm from '../components/registerForm';\r\nimport { Button, Grid } from '@material-ui/core';\r\nimport { useState } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nconst Login = () => {\r\n    const [toggle, setToggle] = useState(true);\r\n\r\n    const showHide = () => {\r\n        setToggle(!toggle);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify=\"center\">\r\n                <Card\r\n                    style={{\r\n                        margin: '5rem 2rem 3rem 2rem',\r\n                        padding: '3rem',\r\n                        maxWidth: '18rem',\r\n                    }}\r\n                >\r\n                    {toggle ? <LoginForm /> : <RegisterForm setToggle={setToggle} />}\r\n                    <Grid container justify=\"center\">\r\n                        <Button onClick={showHide}>\r\n                            {toggle ? 'or register' : 'or login'}\r\n                        </Button>\r\n                    </Grid>\r\n                </Card>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Login;","import PropTypes from 'prop-types';\r\nimport { useContext, useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { MediaContext } from '../contexts/mediaContext';\r\nimport { WebsocketContext } from '../contexts/websocketContext';\r\nimport { useUsers } from '../hooks/apiHooks';\r\n\r\ninterface propType {\r\n    history: {\r\n        push: Function,\r\n    }\r\n}\r\n\r\nconst Logout = ({ history }: propType) => {\r\n    const { logout } = useUsers();\r\n    const { user, setUser } = useContext(MediaContext);\r\n    const { websocket } = useContext(WebsocketContext);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                console.log('USER:', user)\r\n                const isLoggedIn = await logout();\r\n                setUser(0);\r\n                if (websocket !== undefined) {\r\n                    websocket.close();\r\n                }\r\n                console.log('Logout success: ', isLoggedIn.success, user)\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        })();\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Redirect to={'/login'} />\r\n        </>\r\n    );\r\n};\r\n\r\nLogout.propTypes = {\r\n    history: PropTypes.object,\r\n};\r\n\r\nexport default Logout;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useContext } from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport { WebsocketContext } from '../contexts/websocketContext';\r\nimport { useUsers } from '../hooks/apiHooks';\r\n\r\nconst Profile = () => {\r\n    const [user, setUser] = useState({ id: '', username: '' })\r\n    const { websocket } = useContext(WebsocketContext);\r\n    const { getProfile } = useUsers();\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                if (websocket !== undefined) {\r\n                    websocket.close();\r\n                }\r\n                const result = await getProfile();\r\n                console.log('Profile: ', result);\r\n                setUser(result);\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <div style={{ whiteSpace: 'pre-line' }}>\r\n            <h1>{!user ? \"Loading...\" : user.username + '\\n' + user.id}</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile","import { Container } from '@material-ui/core';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Nav from './components/nav';\nimport { MediaProvider } from './contexts/mediaContext';\nimport { WebsocketProvider } from './contexts/websocketContext';\nimport Home from './views/home';\nimport Login from './views/login';\nimport Logout from './views/logout';\nimport Profile from './views/profile';\nimport { useMediaQuery } from 'react-responsive';\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    paddingTop: 64,\n    textAlign: 'center',\n    width: '100vw',\n    [theme.breakpoints.down(600)]: {\n      paddingTop: 56,\n    },\n  },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n\n  return (\n    <Router>\n      <MediaProvider>\n        <WebsocketProvider>\n          <Container\n            maxWidth=\"xl\"\n            style={{\n              margin: 0,\n              padding: 0,\n            }}\n          >\n            <Nav />\n            <main className={classes.content}>\n              <Switch>\n                <Route path=\"/\" exact component={Home} />\n                <Route path=\"/login\" component={Login} />\n                <Route path=\"/logout\" component={Logout} />\n                <Route path=\"/profile\" component={Profile} />\n              </Switch>\n            </main>\n\n          </Container>\n        </WebsocketProvider>\n      </MediaProvider>\n    </Router >\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}