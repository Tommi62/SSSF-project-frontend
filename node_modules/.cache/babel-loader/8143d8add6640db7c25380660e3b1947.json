{"ast":null,"code":"var _jsxFileName = \"/Users/tommivainio/Desktop/chatApp/my-app/src/views/home.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Grid, List, Typography } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport Thread from '../components/thread';\nimport ThreadButton from '../components/threadButton';\nimport { MediaContext } from '../contexts/mediaContext';\nimport { useUsers, useChats } from '../hooks/apiHooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = ({\n  history\n}) => {\n  _s();\n\n  const {\n    user,\n    setUser\n  } = useContext(MediaContext);\n  const {\n    getIsLoggedIn\n  } = useUsers();\n  const {\n    getThreadIds,\n    getMessages\n  } = useChats();\n  const [threads, setThreads] = useState([]);\n  const [threadOpen, setThreadOpen] = useState(false);\n  const [threadId, setThreadId] = useState(0);\n  const [messages, setMessages] = useState([]);\n  const [webSocketUpdate, setWebSocketUpdate] = useState('');\n  const [socketConnected, setSocketConnected] = useState(false);\n  useEffect(() => {\n    (async () => {\n      try {\n        console.log('USER: ', user);\n        const isLoggedIn = await getIsLoggedIn();\n\n        if (!isLoggedIn.success) {\n          history.push('/login');\n        }\n\n        setUser(isLoggedIn.id);\n        console.log('Logged user: ', user, isLoggedIn.id);\n\n        if (user !== 0) {\n          const chatThreads = await getThreadIds(isLoggedIn.id);\n          setThreads(chatThreads);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [user]);\n  useEffect(() => {\n    (async () => {\n      try {\n        if (threadId !== 0) {\n          const threadMessages = await getMessages(threadId);\n          setMessages(threadMessages);\n          console.log('USEEFFECT');\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [threadId, webSocketUpdate]);\n  useEffect(() => {\n    try {\n      if (!socketConnected && threadOpen) {\n        const socket = new WebSocket('ws://localhost:3001');\n        socket.addEventListener('open', function (event) {\n          console.log('Server is opened.');\n          const client = {\n            type: 'client',\n            thread_id: threadId,\n            user_id: user\n          };\n          socket.send(JSON.stringify(client));\n        });\n        socket.addEventListener('message', function (event) {\n          console.log('Message from server ', JSON.parse(event.data).thread_id);\n          const message = JSON.parse(event.data);\n\n          if (message.thread_id === threadId) {\n            setWebSocketUpdate(message.timestamp);\n          }\n        });\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n\n    ;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: threadOpen ? /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        style: {\n          width: '30%'\n        },\n        children: /*#__PURE__*/_jsxDEV(List, {\n          children: [threads.map(item => /*#__PURE__*/_jsxDEV(ThreadButton, {\n            id: item.thread_id,\n            setThreadOpen: setThreadOpen,\n            setThreadId: setThreadId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 33\n          }, this)), ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        style: {\n          width: '70%'\n        },\n        children: /*#__PURE__*/_jsxDEV(Thread, {\n          messages: messages,\n          id: threadId,\n          setWebSocketUpdate: setWebSocketUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justify: \"center\",\n      direction: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        component: \"h1\",\n        variant: \"h2\",\n        children: \"Welcome\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        children: [threads.map(item => /*#__PURE__*/_jsxDEV(ThreadButton, {\n          id: item.thread_id,\n          setThreadOpen: setThreadOpen,\n          setThreadId: setThreadId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 29\n        }, this)), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Home, \"NRe5yZwCb2vy1i/viT/bTvx1mYA=\", false, function () {\n  return [useUsers, useChats];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/tommivainio/Desktop/chatApp/my-app/src/views/home.tsx"],"names":["Grid","List","Typography","useContext","useEffect","useState","Thread","ThreadButton","MediaContext","useUsers","useChats","Home","history","user","setUser","getIsLoggedIn","getThreadIds","getMessages","threads","setThreads","threadOpen","setThreadOpen","threadId","setThreadId","messages","setMessages","webSocketUpdate","setWebSocketUpdate","socketConnected","setSocketConnected","console","log","isLoggedIn","success","push","id","chatThreads","e","message","threadMessages","socket","WebSocket","addEventListener","event","client","type","thread_id","user_id","send","JSON","stringify","parse","data","timestamp","width","map","item"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { Grid, List, Typography } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport Thread from '../components/thread';\nimport ThreadButton from '../components/threadButton';\nimport { MediaContext } from '../contexts/mediaContext';\nimport { useUsers, useChats } from '../hooks/apiHooks';\n\ninterface propType {\n    history: {\n        push: Function,\n    }\n}\n\ninterface threadsArray {\n    thread_id: number\n}\n\ninterface messagesArray {\n    id: number,\n    user_id: number,\n    contents: string,\n    timestamp: Date,\n}\n\nconst Home = ({ history }: propType) => {\n    const { user, setUser } = useContext(MediaContext);\n    const { getIsLoggedIn } = useUsers();\n    const { getThreadIds, getMessages } = useChats();\n    const [threads, setThreads] = useState<threadsArray[]>([]);\n    const [threadOpen, setThreadOpen] = useState(false)\n    const [threadId, setThreadId] = useState(0)\n    const [messages, setMessages] = useState<messagesArray[]>([]);\n    const [webSocketUpdate, setWebSocketUpdate] = useState('');\n    const [socketConnected, setSocketConnected] = useState(false);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                console.log('USER: ', user)\n                const isLoggedIn = await getIsLoggedIn();\n                if (!isLoggedIn.success) {\n                    history.push('/login');\n                }\n                setUser(isLoggedIn.id)\n                console.log('Logged user: ', user, isLoggedIn.id);\n                if (user !== 0) {\n                    const chatThreads = await getThreadIds(isLoggedIn.id)\n                    setThreads(chatThreads)\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [user]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                if (threadId !== 0) {\n                    const threadMessages = await getMessages(threadId);\n                    setMessages(threadMessages);\n                    console.log('USEEFFECT');\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [threadId, webSocketUpdate]);\n\n    useEffect(() => {\n        try {\n\n            if (!socketConnected && threadOpen) {\n                const socket = new WebSocket('ws://localhost:3001');\n\n                socket.addEventListener('open', function (event) {\n                    console.log('Server is opened.');\n                    const client = {\n                        type: 'client',\n                        thread_id: threadId,\n                        user_id: user,\n                    }\n                    socket.send(JSON.stringify(client));\n                });\n\n                socket.addEventListener('message', function (event) {\n                    console.log('Message from server ', JSON.parse(event.data).thread_id);\n                    const message = JSON.parse(event.data);\n                    if (message.thread_id === threadId) {\n                        setWebSocketUpdate(message.timestamp);\n                    }\n                });\n            }\n        } catch (e) {\n            console.log(e.message);\n        };\n    }, []);\n\n\n    return (\n        <>\n            {threadOpen ? (\n                <Grid container direction=\"row\">\n                    <Grid item style={{ width: '30%' }}>\n                        <List>\n                            {threads.map((item) => (\n                                <ThreadButton id={item.thread_id} setThreadOpen={setThreadOpen} setThreadId={setThreadId} />\n                            ))}{' '}\n                        </List>\n                    </Grid>\n                    <Grid item style={{ width: '70%' }}>\n                        <Thread messages={messages} id={threadId} setWebSocketUpdate={setWebSocketUpdate} />\n                    </Grid>\n                </Grid>\n            ) : (\n                <Grid container justify=\"center\" direction=\"column\">\n                    <Typography component=\"h1\" variant=\"h2\">Welcome</Typography>\n                    <List>\n                        {threads.map((item) => (\n                            <ThreadButton id={item.thread_id} setThreadOpen={setThreadOpen} setThreadId={setThreadId} />\n                        ))}{' '}\n                    </List>\n                </Grid>\n            )}\n        </>\n    );\n\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}