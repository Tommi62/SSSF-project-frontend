{"ast":null,"code":"var _jsxFileName = \"/Users/tommivainio/Projektit/chatApp/my-app/src/views/home.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Button, Grid, List, Typography } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport Thread from '../components/thread';\nimport ThreadButton from '../components/threadButton';\nimport Modal from '../components/modal';\nimport { MediaContext } from '../contexts/mediaContext';\nimport { WebsocketContext } from '../contexts/websocketContext';\nimport { useUsers, useChats } from '../hooks/apiHooks';\nimport useWindowDimensions from '../hooks/windowDimensionsHook';\nimport { useMediaQuery } from 'react-responsive';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = ({\n  history\n}) => {\n  _s();\n\n  const {\n    user,\n    setUser\n  } = useContext(MediaContext);\n  const {\n    websocket,\n    setWebsocket\n  } = useContext(WebsocketContext);\n  const {\n    getIsLoggedIn\n  } = useUsers();\n  const {\n    getThreadIds,\n    getMessages\n  } = useChats();\n  const {\n    height\n  } = useWindowDimensions();\n  const heightCorrected = height - 64;\n  const [threads, setThreads] = useState([]);\n  const [sortedThreads, setSortedThreads] = useState([]);\n  const [threadOpen, setThreadOpen] = useState(false);\n  const [threadId, setThreadId] = useState(0);\n  const [messages, setMessages] = useState([]);\n  const [updateState, setUpdateState] = useState(Date.now());\n  const [updateThreadButtons, setUpdateThreadButtons] = useState(Date.now());\n  const [updateThreadButtonInfos, setUpdateThreadButtonInfos] = useState(Date.now());\n  const [messageAmount, setMessageAmount] = useState(50);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [wsMessage, setWsMessage] = useState({\n    type: '',\n    contents: '',\n    timestamp: new Date(),\n    user_id: 0,\n    thread_id: 0\n  });\n  const isMobile = useMediaQuery({\n    query: '(max-width: 1000px)'\n  });\n  useEffect(() => {\n    (async () => {\n      try {\n        console.log('USER: ', user);\n        const isLoggedIn = await getIsLoggedIn();\n\n        if (!isLoggedIn.success) {\n          history.push('/login');\n        }\n\n        setUser(isLoggedIn.id);\n        console.log('Logged user: ', user, isLoggedIn.id);\n\n        if (user !== 0) {\n          const chatThreads = await getThreadIds(isLoggedIn.id);\n          setThreads(chatThreads);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [user, updateThreadButtons]);\n  useEffect(() => {\n    (async () => {\n      try {\n        if (threads.length > 0) {\n          let idArray = [];\n\n          for (let i = 0; i < threads.length; i++) {\n            const threadMessages = await getMessages(threads[i].thread_id);\n            const threadIdObject = {\n              id: threads[i].thread_id,\n              timestamp: threadMessages.length > 0 ? threadMessages[0].timestamp : '1999-02-06T05:47:00'\n            };\n            idArray.push(threadIdObject);\n          }\n\n          idArray.sort((a, b) => a.timestamp < b.timestamp ? 1 : b.timestamp < a.timestamp ? -1 : 0);\n          console.log('IDARRAY', idArray);\n          setSortedThreads(idArray);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [threads, updateThreadButtonInfos]);\n  useEffect(() => {\n    (async () => {\n      try {\n        if (threadId !== 0) {\n          const threadMessages = await getMessages(threadId);\n          const reversedArray = threadMessages.reverse();\n          setMessages(reversedArray);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [threadId, updateState]);\n  useEffect(() => {\n    try {\n      if (wsMessage.type !== '' && wsMessage.thread_id === threadId) {\n        const newMessageObject = {\n          id: Date.now(),\n          user_id: wsMessage.user_id,\n          contents: wsMessage.contents,\n          timestamp: wsMessage.timestamp\n        };\n        setMessages(messages => [...messages, newMessageObject]);\n        setMessageAmount(messageAmount + 1);\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n  }, [wsMessage]);\n  useEffect(() => {\n    try {\n      if (threads.length !== 0) {\n        if (websocket === undefined || websocket.readyState === 2 || websocket.readyState === 3) {\n          console.log('READYSTATE ', websocket === null || websocket === void 0 ? void 0 : websocket.readyState);\n          const socket = new WebSocket('ws://localhost:3001');\n          socket.addEventListener('open', function (event) {\n            console.log('Server is opened.');\n            const client = {\n              type: 'client',\n              user_id: user,\n              threads: threads\n            };\n            socket.send(JSON.stringify(client));\n          });\n          socket.addEventListener('message', function (event) {\n            if (event.data !== 'ping') {\n              console.log('Message from server ', JSON.parse(event.data).thread_id);\n              const message = JSON.parse(event.data);\n\n              if (message.type === 'message') {\n                setWsMessage(message);\n                setUpdateThreadButtonInfos(Date.now());\n              } else if (message.type === 'newThread') {\n                setUpdateThreadButtons(Date.now());\n              }\n            } else {\n              setTimeout(() => socket.send('pong'), 1000);\n            }\n          });\n          socket.addEventListener('close', function (event) {\n            console.log('Websocket connection closed.');\n            setUpdateState(Date.now());\n          });\n          setWebsocket(socket);\n          console.log('NEW SOCKET');\n        }\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n\n    ;\n  }, [updateState, threads]);\n\n  const setCreateNewChatThreadOpen = () => {\n    setModalOpen(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isMobile ? /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"column\",\n      style: {\n        height: heightCorrected\n      },\n      children: threadOpen ? /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Thread, {\n          messages: messages,\n          id: threadId,\n          websocket: websocket,\n          messageAmount: messageAmount,\n          setMessageAmount: setMessageAmount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        style: {\n          borderRight: '1px solid #5F4B8BFF'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: setCreateNewChatThreadOpen,\n          color: \"primary\",\n          variant: \"contained\",\n          style: {\n            marginTop: '1rem',\n            marginBottom: '1rem'\n          },\n          children: \"Create a new chat thread\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          style: {\n            borderTop: '1px solid #5F4B8BFF',\n            marginTop: '1rem'\n          },\n          children: /*#__PURE__*/_jsxDEV(List, {\n            style: {\n              padding: 0\n            },\n            children: [sortedThreads.map(item => /*#__PURE__*/_jsxDEV(ThreadButton, {\n              id: item.id,\n              setThreadOpen: setThreadOpen,\n              setThreadId: setThreadId,\n              threadOpen: threadOpen,\n              threadId: threadId,\n              updateThreadButtonInfos: updateThreadButtonInfos\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 41\n            }, this)), ' ']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\",\n      style: {\n        height: heightCorrected\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        style: {\n          width: '30%',\n          borderRight: '1px solid #5F4B8BFF'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: setCreateNewChatThreadOpen,\n          color: \"primary\",\n          variant: \"contained\",\n          style: {\n            marginTop: '1rem',\n            marginBottom: '1rem'\n          },\n          children: \"Create a new chat thread\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          style: {\n            borderTop: '1px solid #5F4B8BFF',\n            marginTop: '1rem'\n          },\n          children: /*#__PURE__*/_jsxDEV(List, {\n            style: {\n              padding: 0,\n              width: '100%'\n            },\n            children: [sortedThreads.map(item => /*#__PURE__*/_jsxDEV(ThreadButton, {\n              id: item.id,\n              setThreadOpen: setThreadOpen,\n              setThreadId: setThreadId,\n              threadOpen: threadOpen,\n              threadId: threadId,\n              updateThreadButtonInfos: updateThreadButtonInfos\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 37\n            }, this)), ' ']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        style: {\n          width: '70%'\n        },\n        children: threadOpen ? /*#__PURE__*/_jsxDEV(Thread, {\n          messages: messages,\n          id: threadId,\n          websocket: websocket,\n          messageAmount: messageAmount,\n          setMessageAmount: setMessageAmount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          alignItems: \"center\",\n          justify: \"center\",\n          direction: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            component: \"h1\",\n            variant: \"h2\",\n            children: \"Welcome\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            component: \"div\",\n            variant: \"body1\",\n            children: \"This is Chat App made by Tommi.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      modalOpen: modalOpen,\n      setModalOpen: setModalOpen,\n      websocket: websocket,\n      setThreadOpen: setThreadOpen,\n      setThreadId: setThreadId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Home, \"8/3+MUnG65kUQZQUKPNHeRpWMdc=\", false, function () {\n  return [useUsers, useChats, useWindowDimensions, useMediaQuery];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/tommivainio/Projektit/chatApp/my-app/src/views/home.tsx"],"names":["Button","Grid","List","Typography","useContext","useEffect","useState","Thread","ThreadButton","Modal","MediaContext","WebsocketContext","useUsers","useChats","useWindowDimensions","useMediaQuery","Home","history","user","setUser","websocket","setWebsocket","getIsLoggedIn","getThreadIds","getMessages","height","heightCorrected","threads","setThreads","sortedThreads","setSortedThreads","threadOpen","setThreadOpen","threadId","setThreadId","messages","setMessages","updateState","setUpdateState","Date","now","updateThreadButtons","setUpdateThreadButtons","updateThreadButtonInfos","setUpdateThreadButtonInfos","messageAmount","setMessageAmount","modalOpen","setModalOpen","wsMessage","setWsMessage","type","contents","timestamp","user_id","thread_id","isMobile","query","console","log","isLoggedIn","success","push","id","chatThreads","e","message","length","idArray","i","threadMessages","threadIdObject","sort","a","b","reversedArray","reverse","newMessageObject","undefined","readyState","socket","WebSocket","addEventListener","event","client","send","JSON","stringify","data","parse","setTimeout","setCreateNewChatThreadOpen","borderRight","marginTop","marginBottom","borderTop","padding","map","item","width"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { Button, Grid, List, Typography } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport Thread from '../components/thread';\nimport ThreadButton from '../components/threadButton';\nimport Modal from '../components/modal';\nimport { MediaContext } from '../contexts/mediaContext';\nimport { WebsocketContext } from '../contexts/websocketContext';\nimport { useUsers, useChats } from '../hooks/apiHooks';\nimport useWindowDimensions from '../hooks/windowDimensionsHook';\nimport { useMediaQuery } from 'react-responsive';\n\ninterface propType {\n    history: {\n        push: Function,\n    }\n}\n\ninterface threadsArray {\n    thread_id: number\n}\n\ninterface sortedThreadsArray {\n    id: number,\n    timestamp: string,\n}\n\ninterface messagesArray {\n    id: number,\n    user_id: number,\n    contents: string,\n    timestamp: Date,\n}\n\nconst Home = ({ history }: propType) => {\n    const { user, setUser } = useContext(MediaContext);\n    const { websocket, setWebsocket } = useContext(WebsocketContext);\n    const { getIsLoggedIn } = useUsers();\n    const { getThreadIds, getMessages } = useChats();\n    const { height } = useWindowDimensions();\n    const heightCorrected = height - 64;\n    const [threads, setThreads] = useState<threadsArray[]>([]);\n    const [sortedThreads, setSortedThreads] = useState<sortedThreadsArray[]>([]);\n    const [threadOpen, setThreadOpen] = useState(false)\n    const [threadId, setThreadId] = useState(0)\n    const [messages, setMessages] = useState<messagesArray[]>([]);\n    const [updateState, setUpdateState] = useState(Date.now());\n    const [updateThreadButtons, setUpdateThreadButtons] = useState(Date.now());\n    const [updateThreadButtonInfos, setUpdateThreadButtonInfos] = useState(Date.now());\n    const [messageAmount, setMessageAmount] = useState(50);\n    const [modalOpen, setModalOpen] = useState(false);\n    const [wsMessage, setWsMessage] = useState({\n        type: '',\n        contents: '',\n        timestamp: new Date(),\n        user_id: 0,\n        thread_id: 0\n    });\n\n    const isMobile = useMediaQuery({\n        query: '(max-width: 1000px)'\n    })\n\n    useEffect(() => {\n        (async () => {\n            try {\n                console.log('USER: ', user)\n                const isLoggedIn = await getIsLoggedIn();\n                if (!isLoggedIn.success) {\n                    history.push('/login');\n                }\n                setUser(isLoggedIn.id)\n                console.log('Logged user: ', user, isLoggedIn.id);\n                if (user !== 0) {\n                    const chatThreads = await getThreadIds(isLoggedIn.id)\n                    setThreads(chatThreads)\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [user, updateThreadButtons]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                if (threads.length > 0) {\n                    let idArray = [];\n                    for (let i = 0; i < threads.length; i++) {\n                        const threadMessages = await getMessages(threads[i].thread_id);\n                        const threadIdObject = {\n                            id: threads[i].thread_id,\n                            timestamp: threadMessages.length > 0 ? threadMessages[0].timestamp : '1999-02-06T05:47:00',\n                        };\n                        idArray.push(threadIdObject);\n                    }\n                    idArray.sort((a, b) => (a.timestamp < b.timestamp) ? 1 : ((b.timestamp < a.timestamp) ? -1 : 0));\n                    console.log('IDARRAY', idArray);\n                    setSortedThreads(idArray);\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [threads, updateThreadButtonInfos]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                if (threadId !== 0) {\n                    const threadMessages = await getMessages(threadId);\n                    const reversedArray = threadMessages.reverse();\n                    setMessages(reversedArray);\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [threadId, updateState]);\n\n    useEffect(() => {\n        try {\n            if (wsMessage.type !== '' && wsMessage.thread_id === threadId) {\n                const newMessageObject = {\n                    id: Date.now(),\n                    user_id: wsMessage.user_id,\n                    contents: wsMessage.contents,\n                    timestamp: wsMessage.timestamp,\n                }\n                setMessages(messages => [...messages, newMessageObject]);\n                setMessageAmount(messageAmount + 1);\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n    }, [wsMessage]);\n\n    useEffect(() => {\n        try {\n            if (threads.length !== 0) {\n                if (websocket === undefined || websocket.readyState === 2 || websocket.readyState === 3) {\n                    console.log('READYSTATE ', websocket?.readyState)\n                    const socket = new WebSocket('ws://localhost:3001');\n\n                    socket.addEventListener('open', function (event) {\n                        console.log('Server is opened.');\n                        const client = {\n                            type: 'client',\n                            user_id: user,\n                            threads: threads,\n                        }\n                        socket.send(JSON.stringify(client));\n                    });\n\n                    socket.addEventListener('message', function (event) {\n                        if (event.data !== 'ping') {\n                            console.log('Message from server ', JSON.parse(event.data).thread_id);\n                            const message = JSON.parse(event.data);\n                            if (message.type === 'message') {\n                                setWsMessage(message);\n                                setUpdateThreadButtonInfos(Date.now());\n                            } else if (message.type === 'newThread') {\n                                setUpdateThreadButtons(Date.now());\n                            }\n                        } else {\n                            setTimeout(() => socket.send('pong'), 1000);\n                        }\n                    });\n\n                    socket.addEventListener('close', function (event) {\n                        console.log('Websocket connection closed.');\n                        setUpdateState(Date.now());\n                    });\n\n                    setWebsocket(socket);\n                    console.log('NEW SOCKET');\n                }\n            }\n        } catch (e) {\n            console.log(e.message);\n        };\n    }, [updateState, threads]);\n\n    const setCreateNewChatThreadOpen = () => {\n        setModalOpen(true);\n    }\n\n\n    return (\n        <>\n            {isMobile ? (\n                <Grid container direction=\"column\" style={{ height: heightCorrected, }} >\n                    {threadOpen ? (\n                        <Grid item >\n                            <Thread messages={messages} id={threadId} websocket={websocket} messageAmount={messageAmount} setMessageAmount={setMessageAmount} />\n                        </Grid>\n                    ) : (\n                        <Grid item style={{ borderRight: '1px solid #5F4B8BFF' }}>\n                            <Button\n                                onClick={setCreateNewChatThreadOpen}\n                                color=\"primary\"\n                                variant=\"contained\"\n                                style={{ marginTop: '1rem', marginBottom: '1rem' }}\n                            >\n                                Create a new chat thread\n                            </Button>\n                            <Grid container style={{ borderTop: '1px solid #5F4B8BFF', marginTop: '1rem' }} >\n                                <List style={{ padding: 0 }}>\n                                    {sortedThreads.map((item) => (\n                                        <ThreadButton\n                                            id={item.id}\n                                            setThreadOpen={setThreadOpen}\n                                            setThreadId={setThreadId}\n                                            threadOpen={threadOpen}\n                                            threadId={threadId}\n                                            updateThreadButtonInfos={updateThreadButtonInfos}\n                                        />\n                                    ))}{' '}\n                                </List>\n                            </Grid>\n                        </Grid>\n                    )}\n                </Grid>\n            ) : (\n                <Grid container direction=\"row\" style={{ height: heightCorrected, }} >\n                    <Grid item style={{ width: '30%', borderRight: '1px solid #5F4B8BFF' }}>\n                        <Button\n                            onClick={setCreateNewChatThreadOpen}\n                            color=\"primary\"\n                            variant=\"contained\"\n                            style={{ marginTop: '1rem', marginBottom: '1rem' }}\n                        >\n                            Create a new chat thread\n                        </Button>\n                        <Grid container style={{ borderTop: '1px solid #5F4B8BFF', marginTop: '1rem' }} >\n                            <List style={{ padding: 0, width: '100%' }}>\n                                {sortedThreads.map((item) => (\n                                    <ThreadButton\n                                        id={item.id}\n                                        setThreadOpen={setThreadOpen}\n                                        setThreadId={setThreadId}\n                                        threadOpen={threadOpen}\n                                        threadId={threadId}\n                                        updateThreadButtonInfos={updateThreadButtonInfos}\n                                    />\n                                ))}{' '}\n                            </List>\n                        </Grid>\n                    </Grid>\n                    <Grid item style={{ width: '70%' }}>\n                        {threadOpen ? (\n                            <Thread messages={messages} id={threadId} websocket={websocket} messageAmount={messageAmount} setMessageAmount={setMessageAmount} />\n                        ) : (\n                            <Grid container alignItems=\"center\" justify=\"center\" direction=\"column\" >\n                                <Typography component=\"h1\" variant=\"h2\">Welcome</Typography>\n                                <Typography component=\"div\" variant=\"body1\">This is Chat App made by Tommi.</Typography>\n                            </Grid>\n                        )}\n                    </Grid>\n                </Grid>\n            )\n            }\n            <Modal modalOpen={modalOpen} setModalOpen={setModalOpen} websocket={websocket} setThreadOpen={setThreadOpen} setThreadId={setThreadId} />\n        </>\n    );\n\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}