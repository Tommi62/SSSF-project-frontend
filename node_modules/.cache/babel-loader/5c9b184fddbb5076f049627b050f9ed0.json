{"ast":null,"code":"var _jsxFileName = \"/Users/tommivainio/SSSF/SSSF-project-frontend/src/components/threadButton.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Grid, ListItem, ListItemText, makeStyles, Typography } from \"@material-ui/core\";\nimport { useContext, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { WebsocketContext } from \"../contexts/websocketContext\";\nimport { useChats } from '../hooks/apiHooks';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  text: {\n    color: 'white',\n    width: '100%',\n    padding: '1rem'\n  },\n  inline: {\n    display: 'inline'\n  },\n  lastMessage: {\n    display: 'block',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    fontSize: '0.7rem'\n  },\n  timestamp: {\n    fontSize: '0.5rem',\n    marginLeft: '2rem'\n  },\n  button: {\n    width: '100%',\n    maxWidth: '30vw',\n    padding: '0 0.7rem',\n    borderBottom: '1px solid #5F4B8BFF',\n    cursor: 'pointer',\n    '&:hover': {\n      background: \"#f0f0f0\"\n    },\n    [theme.breakpoints.down(600)]: {\n      maxWidth: 'none',\n      width: '100vw'\n    }\n  }\n}));\n\nconst ThreadButton = ({\n  id,\n  threadName,\n  setThreadOpen,\n  setThreadId,\n  threadOpen,\n  threadId,\n  updateThreadButtonInfos\n}) => {\n  _s();\n\n  const {\n    getLastMessage\n  } = useChats();\n  const [lastMessage, setLastMessage] = useState({\n    username: '',\n    contents: '',\n    timestamp: ''\n  });\n  const {\n    websocket\n  } = useContext(WebsocketContext);\n  const classes = useStyles();\n  useEffect(() => {\n    (async () => {\n      try {\n        const token = localStorage.getItem('token');\n\n        if (token !== null) {\n          const lastMessageData = await getLastMessage(id, token);\n\n          if (lastMessageData.data.length !== 0) {\n            const now = moment().startOf('day');\n            const formatedDate = moment(lastMessageData.data[0].timestamp).startOf('day');\n            const difference = now.diff(formatedDate, 'days');\n            let formatedTime;\n\n            if (difference === 0) {\n              const d = new Date(lastMessageData.data[0].timestamp);\n              let hours = d.getHours().toString();\n              let minutes = d.getMinutes().toString();\n\n              if (d.getHours() < 10) {\n                hours = '0' + hours;\n              }\n\n              if (d.getMinutes() < 10) {\n                minutes = '0' + minutes;\n              }\n\n              formatedTime = hours + '.' + minutes;\n            } else if (difference === 1) {\n              formatedTime = 'Yesterday';\n            } else {\n              formatedTime = moment(lastMessageData.data[0].timestamp).format('DD.MM.YYYY');\n            }\n\n            const lastMessageObject = {\n              username: lastMessageData.data[0].user.username + ':',\n              contents: lastMessageData.data[0].contents,\n              timestamp: formatedTime\n            };\n            setLastMessage(lastMessageObject);\n          } else {\n            const noLastMessageObject = {\n              username: 'No messages yet.',\n              contents: '',\n              timestamp: ''\n            };\n            setLastMessage(noLastMessageObject);\n          }\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [id, updateThreadButtonInfos]);\n\n  const openThread = () => {\n    try {\n      if (!threadOpen) {\n        setThreadOpen(true);\n        setThreadId(id);\n      } else {\n        if (threadId === id) {\n          setThreadOpen(false);\n          setThreadId(0);\n        } else {\n          setThreadId(id);\n        }\n\n        if (websocket !== undefined) {\n          websocket.close();\n        }\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ListItem, {\n      onClick: openThread,\n      className: classes.button,\n      children: /*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            justify: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              component: \"h1\",\n              children: threadName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"span\",\n              variant: \"subtitle1\",\n              className: classes.timestamp,\n              children: lastMessage.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 29\n          }, this)\n        }, void 0, false),\n        secondary: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            component: \"span\",\n            variant: \"body2\",\n            className: classes.lastMessage,\n            children: [lastMessage.username, \" \", lastMessage.contents]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 29\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(ThreadButton, \"xoJAnQyr1kyFA0vH9RlS5XZmjSo=\", false, function () {\n  return [useChats, useStyles];\n});\n\n_c = ThreadButton;\nexport default ThreadButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreadButton\");","map":{"version":3,"sources":["/Users/tommivainio/SSSF/SSSF-project-frontend/src/components/threadButton.tsx"],"names":["Grid","ListItem","ListItemText","makeStyles","Typography","useContext","useState","useEffect","WebsocketContext","useChats","moment","useStyles","theme","text","color","width","padding","inline","display","lastMessage","overflow","textOverflow","whiteSpace","fontSize","timestamp","marginLeft","button","maxWidth","borderBottom","cursor","background","breakpoints","down","ThreadButton","id","threadName","setThreadOpen","setThreadId","threadOpen","threadId","updateThreadButtonInfos","getLastMessage","setLastMessage","username","contents","websocket","classes","token","localStorage","getItem","lastMessageData","data","length","now","startOf","formatedDate","difference","diff","formatedTime","d","Date","hours","getHours","toString","minutes","getMinutes","format","lastMessageObject","user","noLastMessageObject","e","console","log","message","openThread","undefined","close"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { Button, Grid, ListItem, ListItemText, makeStyles, Typography } from \"@material-ui/core\";\r\nimport { useContext, useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { WebsocketContext } from \"../contexts/websocketContext\";\r\nimport { useChats, useUsers } from '../hooks/apiHooks';\r\nimport moment from 'moment';\r\n\r\ninterface propType {\r\n    id: string,\r\n    threadName: string,\r\n    setThreadOpen: Function,\r\n    setThreadId: Function,\r\n    threadOpen: Boolean,\r\n    threadId: string,\r\n    updateThreadButtonInfos: number,\r\n}\r\n\r\ninterface lastMessageObject {\r\n    username: string,\r\n    contents: string,\r\n    timestamp: any,\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    text: {\r\n        color: 'white',\r\n        width: '100%',\r\n        padding: '1rem',\r\n    },\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    lastMessage: {\r\n        display: 'block',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n        fontSize: '0.7rem'\r\n    },\r\n    timestamp: {\r\n        fontSize: '0.5rem',\r\n        marginLeft: '2rem'\r\n    },\r\n    button: {\r\n        width: '100%',\r\n        maxWidth: '30vw',\r\n        padding: '0 0.7rem',\r\n        borderBottom: '1px solid #5F4B8BFF',\r\n        cursor: 'pointer',\r\n        '&:hover': {\r\n            background: \"#f0f0f0\",\r\n        },\r\n        [theme.breakpoints.down(600)]: {\r\n            maxWidth: 'none',\r\n            width: '100vw',\r\n        },\r\n    }\r\n}));\r\n\r\nconst ThreadButton = ({ id, threadName, setThreadOpen, setThreadId, threadOpen, threadId, updateThreadButtonInfos }: propType) => {\r\n    const { getLastMessage } = useChats();\r\n    const [lastMessage, setLastMessage] = useState<lastMessageObject>({\r\n        username: '',\r\n        contents: '',\r\n        timestamp: ''\r\n    });\r\n    const { websocket } = useContext(WebsocketContext);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const token = localStorage.getItem('token');\r\n                if (token !== null) {\r\n                    const lastMessageData = await getLastMessage(id, token!)\r\n                    if (lastMessageData.data.length !== 0) {\r\n                        const now = moment().startOf('day')\r\n                        const formatedDate = moment(lastMessageData.data[0].timestamp).startOf('day');\r\n                        const difference = now.diff(formatedDate, 'days');\r\n                        let formatedTime;\r\n                        if (difference === 0) {\r\n                            const d = new Date(lastMessageData.data[0].timestamp);\r\n                            let hours = d.getHours().toString();\r\n                            let minutes = d.getMinutes().toString();\r\n                            if (d.getHours() < 10) {\r\n                                hours = '0' + hours;\r\n                            }\r\n                            if (d.getMinutes() < 10) {\r\n                                minutes = '0' + minutes;\r\n                            }\r\n                            formatedTime = hours + '.' + minutes;\r\n                        } else if (difference === 1) {\r\n                            formatedTime = 'Yesterday';\r\n                        } else {\r\n                            formatedTime = moment(lastMessageData.data[0].timestamp).format('DD.MM.YYYY');\r\n                        }\r\n\r\n                        const lastMessageObject = {\r\n                            username: lastMessageData.data[0].user.username + ':',\r\n                            contents: lastMessageData.data[0].contents,\r\n                            timestamp: formatedTime,\r\n                        }\r\n                        setLastMessage(lastMessageObject);\r\n                    } else {\r\n                        const noLastMessageObject = {\r\n                            username: 'No messages yet.',\r\n                            contents: '',\r\n                            timestamp: '',\r\n                        }\r\n                        setLastMessage(noLastMessageObject);\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        })();\r\n    }, [id, updateThreadButtonInfos]);\r\n\r\n    const openThread = () => {\r\n        try {\r\n            if (!threadOpen) {\r\n                setThreadOpen(true)\r\n                setThreadId(id)\r\n            } else {\r\n                if (threadId === id) {\r\n                    setThreadOpen(false)\r\n                    setThreadId(0)\r\n                } else {\r\n                    setThreadId(id)\r\n                }\r\n                if (websocket !== undefined) {\r\n                    websocket.close();\r\n                }\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ListItem onClick={openThread} className={classes.button} >\r\n                <ListItemText\r\n                    primary={\r\n                        <>\r\n                            <Grid container justify=\"space-between\">\r\n                                <Typography\r\n                                    component=\"h1\"\r\n                                >\r\n                                    {threadName}\r\n                                </Typography>\r\n                                <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"subtitle1\"\r\n                                    className={classes.timestamp}\r\n                                >\r\n                                    {lastMessage.timestamp}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </>\r\n                    }\r\n                    secondary={\r\n                        <>\r\n                            <Typography\r\n                                component=\"span\"\r\n                                variant=\"body2\"\r\n                                className={classes.lastMessage}\r\n                            >\r\n                                {lastMessage.username} {lastMessage.contents}\r\n                            </Typography>\r\n                        </>\r\n                    }\r\n                />\r\n            </ListItem>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ThreadButton"]},"metadata":{},"sourceType":"module"}