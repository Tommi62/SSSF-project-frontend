{"ast":null,"code":"import _regeneratorRuntime from\"/Users/tommivainio/Projektit/chatApp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/tommivainio/Projektit/chatApp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/* eslint-disable react-hooks/exhaustive-deps */import useForm from'../hooks/formHooks';import{useUsers}from'../hooks/apiHooks';import{Grid,Typography,Button}from'@material-ui/core';import{ValidatorForm,TextValidator}from'react-material-ui-form-validator';import{useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var RegisterForm=function RegisterForm(_ref){var setToggle=_ref.setToggle;var _useUsers=useUsers(),register=_useUsers.register,getUserAvailable=_useUsers.getUserAvailable;var validators={username:['required','minStringLength: 3','isAvailable'],password:['required','minStringLength:5'],confirm:['required','isPasswordMatch']};var errorMessages={username:['Required field','Minimum of 3 characters','Username is not available'],password:['Required field','Minimum of 5 characters'],confirm:['Required field','Passwords do not match']};var doRegister=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var available,result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return getUserAvailable(inputs.username);case 3:available=_context.sent;if(!available){_context.next=10;break;}delete inputs.confirm;_context.next=8;return register(inputs);case 8:result=_context.sent;if(result.length>0){alert(result);setToggle(true);}case 10:_context.next=15;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);console.log(_context.t0.message);case 15:case\"end\":return _context.stop();}}},_callee,null,[[0,12]]);}));return function doRegister(){return _ref2.apply(this,arguments);};}();var _useForm=useForm(doRegister,{username:'',password:'',confirm:''}),inputs=_useForm.inputs,handleInputChange=_useForm.handleInputChange,handleSubmit=_useForm.handleSubmit;useEffect(function(){ValidatorForm.addValidationRule('isAvailable',/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value){var available;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(value.length>2)){_context2.next=12;break;}_context2.prev=1;_context2.next=4;return getUserAvailable(value);case 4:available=_context2.sent;return _context2.abrupt(\"return\",available);case 8:_context2.prev=8;_context2.t0=_context2[\"catch\"](1);console.log(_context2.t0.message);return _context2.abrupt(\"return\",true);case 12:case\"end\":return _context2.stop();}}},_callee2,null,[[1,8]]);}));return function(_x){return _ref3.apply(this,arguments);};}());ValidatorForm.addValidationRule('isPasswordMatch',function(value){return value===inputs.password;});},[inputs]);return/*#__PURE__*/_jsxs(Grid,{container:true,alignItems:\"center\",children:[/*#__PURE__*/_jsx(Grid,{container:true,spacing:0,direction:\"column\",alignItems:\"center\",justify:\"center\",children:/*#__PURE__*/_jsx(Typography,{component:\"h1\",variant:\"h2\",gutterBottom:true,children:\"Register\"})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,container:true,direction:\"column\",alignItems:\"center\",children:/*#__PURE__*/_jsx(ValidatorForm,{onSubmit:handleSubmit,children:/*#__PURE__*/_jsxs(Grid,{container:true,direction:\"column\",children:[/*#__PURE__*/_jsx(Grid,{container:true,item:true,children:/*#__PURE__*/_jsx(TextValidator,{fullWidth:true,type:\"text\",name:\"username\",label:\"Username\",onChange:handleInputChange,value:inputs.username,validators:validators.username,errorMessages:errorMessages.username})}),/*#__PURE__*/_jsx(Grid,{container:true,item:true,children:/*#__PURE__*/_jsx(TextValidator,{fullWidth:true,type:\"password\",name:\"password\",label:\"Password\",onChange:handleInputChange,value:inputs.password,validators:validators.password,errorMessages:errorMessages.password})}),/*#__PURE__*/_jsx(Grid,{container:true,item:true,children:/*#__PURE__*/_jsx(TextValidator,{fullWidth:true,type:\"password\",name:\"confirm\",label:\"Confirm password\",onChange:handleInputChange,value:inputs.confirm,validators:validators.confirm,errorMessages:errorMessages.confirm})}),/*#__PURE__*/_jsx(Grid,{container:true,item:true,children:/*#__PURE__*/_jsx(Button,{style:{marginTop:'2rem',marginBottom:'0.5rem'},fullWidth:true,color:\"primary\",type:\"submit\",variant:\"contained\",children:\"Register\"})})]})})})]});};export default RegisterForm;","map":{"version":3,"sources":["/Users/tommivainio/Projektit/chatApp/my-app/src/components/registerForm.tsx"],"names":["useForm","useUsers","Grid","Typography","Button","ValidatorForm","TextValidator","useEffect","RegisterForm","setToggle","register","getUserAvailable","validators","username","password","confirm","errorMessages","doRegister","inputs","available","result","length","alert","console","log","message","handleInputChange","handleSubmit","addValidationRule","value","marginTop","marginBottom"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport useForm from '../hooks/formHooks';\r\nimport { useUsers } from '../hooks/apiHooks';\r\nimport { Grid, Typography, Button } from '@material-ui/core';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\nimport { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface propType {\r\n    setToggle: Function\r\n}\r\n\r\nconst RegisterForm = ({ setToggle }: propType) => {\r\n    const { register, getUserAvailable } = useUsers();\r\n    const validators = {\r\n        username: ['required', 'minStringLength: 3', 'isAvailable'],\r\n        password: ['required', 'minStringLength:5'],\r\n        confirm: ['required', 'isPasswordMatch'],\r\n    };\r\n\r\n    const errorMessages = {\r\n        username: [\r\n            'Required field',\r\n            'Minimum of 3 characters',\r\n            'Username is not available',\r\n        ],\r\n        password: ['Required field', 'Minimum of 5 characters'],\r\n        confirm: ['Required field', 'Passwords do not match'],\r\n    };\r\n\r\n    const doRegister = async () => {\r\n        try {\r\n            const available = await getUserAvailable(inputs.username);\r\n            if (available) {\r\n                delete inputs.confirm;\r\n                const result = await register(inputs);\r\n                if (result.length > 0) {\r\n                    alert(result);\r\n                    setToggle(true);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message);\r\n        }\r\n    };\r\n\r\n    const { inputs, handleInputChange, handleSubmit } = useForm(doRegister, {\r\n        username: '',\r\n        password: '',\r\n        confirm: '',\r\n    });\r\n\r\n    useEffect(() => {\r\n        ValidatorForm.addValidationRule('isAvailable', async (value) => {\r\n            if (value.length > 2) {\r\n                try {\r\n                    const available = await getUserAvailable(value);\r\n                    return available;\r\n                } catch (e) {\r\n                    console.log(e.message);\r\n                    return true;\r\n                }\r\n            }\r\n        });\r\n\r\n        ValidatorForm.addValidationRule(\r\n            'isPasswordMatch',\r\n            (value) => value === inputs.password\r\n        );\r\n    }, [inputs]);\r\n\r\n    return (\r\n        <Grid container alignItems=\"center\">\r\n            <Grid\r\n                container\r\n                spacing={0}\r\n                direction=\"column\"\r\n                alignItems=\"center\"\r\n                justify=\"center\"\r\n            >\r\n                <Typography component=\"h1\" variant=\"h2\" gutterBottom>\r\n                    Register\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item xs={12} container direction=\"column\" alignItems=\"center\">\r\n                <ValidatorForm onSubmit={handleSubmit}>\r\n                    <Grid container direction=\"column\">\r\n                        <Grid container item>\r\n                            <TextValidator\r\n                                fullWidth\r\n                                type=\"text\"\r\n                                name=\"username\"\r\n                                label=\"Username\"\r\n                                onChange={handleInputChange}\r\n                                value={inputs.username}\r\n                                validators={validators.username}\r\n                                errorMessages={errorMessages.username}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid container item>\r\n                            <TextValidator\r\n                                fullWidth\r\n                                type=\"password\"\r\n                                name=\"password\"\r\n                                label=\"Password\"\r\n                                onChange={handleInputChange}\r\n                                value={inputs.password}\r\n                                validators={validators.password}\r\n                                errorMessages={errorMessages.password}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid container item>\r\n                            <TextValidator\r\n                                fullWidth\r\n                                type=\"password\"\r\n                                name=\"confirm\"\r\n                                label=\"Confirm password\"\r\n                                onChange={handleInputChange}\r\n                                value={inputs.confirm}\r\n                                validators={validators.confirm}\r\n                                errorMessages={errorMessages.confirm}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid container item>\r\n                            <Button\r\n                                style={{ marginTop: '2rem', marginBottom: '0.5rem' }}\r\n                                fullWidth\r\n                                color=\"primary\"\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                            >\r\n                                Register\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </ValidatorForm>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nRegisterForm.propTypes = {\r\n    setToggle: PropTypes.func,\r\n};\r\n\r\nexport default RegisterForm;"]},"metadata":{},"sourceType":"module"}