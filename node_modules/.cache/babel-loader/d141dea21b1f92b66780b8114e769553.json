{"ast":null,"code":"var _jsxFileName = \"/Users/tommivainio/Desktop/chatApp/my-app/src/views/home.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Grid, List, Typography } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport Thread from '../components/thread';\nimport ThreadButton from '../components/threadButton';\nimport { MediaContext } from '../contexts/mediaContext';\nimport { useUsers, useChats } from '../hooks/apiHooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = ({\n  history\n}) => {\n  _s();\n\n  const {\n    user,\n    setUser\n  } = useContext(MediaContext);\n  const {\n    getIsLoggedIn\n  } = useUsers();\n  const {\n    getThreadIds,\n    getMessages\n  } = useChats();\n  const [threads, setThreads] = useState([]);\n  const [threadOpen, setThreadOpen] = useState(false);\n  const [threadId, setThreadId] = useState(0);\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    (async () => {\n      try {\n        console.log('USER: ', user);\n        const isLoggedIn = await getIsLoggedIn();\n\n        if (!isLoggedIn.success) {\n          history.push('/login');\n        }\n\n        setUser(isLoggedIn.id);\n        console.log('Logged user: ', user, isLoggedIn.id);\n\n        if (user !== 0) {\n          const chatThreads = await getThreadIds(isLoggedIn.id);\n          setThreads(chatThreads);\n          const threadMessages = await getMessages(id);\n          setMessages(threadMessages);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: threadOpen ? /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        style: {\n          width: '30%'\n        },\n        children: /*#__PURE__*/_jsxDEV(List, {\n          children: [threads.map(item => /*#__PURE__*/_jsxDEV(ThreadButton, {\n            id: item.thread_id,\n            setThreadOpen: setThreadOpen,\n            setThreadId: setThreadId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 33\n          }, this)), ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        style: {\n          width: '70%'\n        },\n        children: /*#__PURE__*/_jsxDEV(Thread, {\n          id: threadId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justify: \"center\",\n      direction: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        component: \"h1\",\n        variant: \"h2\",\n        children: \"Welcome\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        children: [threads.map(item => /*#__PURE__*/_jsxDEV(ThreadButton, {\n          id: item.thread_id,\n          setThreadOpen: setThreadOpen,\n          setThreadId: setThreadId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 29\n        }, this)), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Home, \"MFkKhl7eVwvJJ5zKgPImzprCOlc=\", false, function () {\n  return [useUsers, useChats];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/tommivainio/Desktop/chatApp/my-app/src/views/home.tsx"],"names":["Grid","List","Typography","useContext","useEffect","useState","Thread","ThreadButton","MediaContext","useUsers","useChats","Home","history","user","setUser","getIsLoggedIn","getThreadIds","getMessages","threads","setThreads","threadOpen","setThreadOpen","threadId","setThreadId","messages","setMessages","console","log","isLoggedIn","success","push","id","chatThreads","threadMessages","e","message","width","map","item","thread_id"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { Grid, List, Typography } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport Thread from '../components/thread';\nimport ThreadButton from '../components/threadButton';\nimport { MediaContext } from '../contexts/mediaContext';\nimport { useUsers, useChats } from '../hooks/apiHooks';\n\ninterface propType {\n    history: {\n        push: Function,\n    }\n}\n\ninterface threadsArray {\n    thread_id: number\n}\n\ninterface messagesArray {\n    contents: string,\n    timestamp: Date,\n    user_id: number,\n    id: number,\n}\n\nconst Home = ({ history }: propType) => {\n    const { user, setUser } = useContext(MediaContext);\n    const { getIsLoggedIn } = useUsers();\n    const { getThreadIds, getMessages } = useChats();\n    const [threads, setThreads] = useState<threadsArray[]>([]);\n    const [threadOpen, setThreadOpen] = useState(false)\n    const [threadId, setThreadId] = useState(0)\n    const [messages, setMessages] = useState<messagesArray[]>([]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                console.log('USER: ', user)\n                const isLoggedIn = await getIsLoggedIn();\n                if (!isLoggedIn.success) {\n                    history.push('/login');\n                }\n                setUser(isLoggedIn.id)\n                console.log('Logged user: ', user, isLoggedIn.id);\n                if (user !== 0) {\n                    const chatThreads = await getThreadIds(isLoggedIn.id)\n                    setThreads(chatThreads)\n                    const threadMessages = await getMessages(id);\n                    setMessages(threadMessages);\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [user]);\n\n    return (\n        <>\n            {threadOpen ? (\n                <Grid container direction=\"row\">\n                    <Grid item style={{ width: '30%' }}>\n                        <List>\n                            {threads.map((item) => (\n                                <ThreadButton id={item.thread_id} setThreadOpen={setThreadOpen} setThreadId={setThreadId} />\n                            ))}{' '}\n                        </List>\n                    </Grid>\n                    <Grid item style={{ width: '70%' }}>\n                        <Thread id={threadId} />\n                    </Grid>\n                </Grid>\n            ) : (\n                <Grid container justify=\"center\" direction=\"column\">\n                    <Typography component=\"h1\" variant=\"h2\">Welcome</Typography>\n                    <List>\n                        {threads.map((item) => (\n                            <ThreadButton id={item.thread_id} setThreadOpen={setThreadOpen} setThreadId={setThreadId} />\n                        ))}{' '}\n                    </List>\n                </Grid>\n            )}\n        </>\n    );\n\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}