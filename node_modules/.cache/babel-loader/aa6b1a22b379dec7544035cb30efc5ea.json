{"ast":null,"code":"import _regeneratorRuntime from\"/Users/tommivainio/Projektit/chatApp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/tommivainio/Projektit/chatApp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/tommivainio/Projektit/chatApp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Button,Grid,MenuItem,Select,Typography}from\"@material-ui/core\";import{useState}from\"react\";import{useContext,useEffect}from\"react\";import{TextValidator,ValidatorForm}from\"react-material-ui-form-validator\";import{MediaContext}from\"../contexts/mediaContext\";import{useUsers,useChats}from\"../hooks/apiHooks\";import useForm from\"../hooks/formHooks\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var ThreadForm=function ThreadForm(_ref){var setCreateNewChatThread=_ref.setCreateNewChatThread,setUpdateThreadButtons=_ref.setUpdateThreadButtons;var _useContext=useContext(MediaContext),user=_useContext.user;var _useChats=useChats(),createNewChatThread=_useChats.createNewChatThread;var _useUsers=useUsers(),getUsers=_useUsers.getUsers;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),usersArray=_useState2[0],setUsersArray=_useState2[1];var validators={threadName:['required','minStringLength: 3']};var errorMessages={threadName:['Required field','Minimum of 3 characters']};var createNewThread=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var chatThreadObject,success;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;if(!(inputs.user2!=='')){_context.next=11;break;}chatThreadObject=JSON.stringify({name:inputs.threadName,user_id:user,user2_id:inputs.user2});_context.next=5;return createNewChatThread(chatThreadObject);case 5:success=_context.sent;console.log('SUCCESS: ',success);setCreateNewChatThread(false);setUpdateThreadButtons(Date.now());_context.next=12;break;case 11:alert('Choose a user with whom you want to chat!');case 12:_context.next=17;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](0);console.log(_context.t0.message);case 17:case\"end\":return _context.stop();}}},_callee,null,[[0,14]]);}));return function createNewThread(){return _ref2.apply(this,arguments);};}();var _useForm=useForm(createNewThread,{threadName:'',user2:''}),inputs=_useForm.inputs,handleInputChange=_useForm.handleInputChange,handleSubmit=_useForm.handleSubmit;useEffect(function(){_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var users,arrayForUsers,i;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return getUsers();case 3:users=_context2.sent;arrayForUsers=[];for(i=0;i<users.length;i++){if(users[i].id!==user){arrayForUsers.push(users[i]);}}setUsersArray(arrayForUsers);_context2.next=12;break;case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0.message);case 12:case\"end\":return _context2.stop();}}},_callee2,null,[[0,9]]);}))();},[]);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(Grid,{container:true,justifyContent:\"center\",direction:\"column\",children:[/*#__PURE__*/_jsx(Typography,{variant:\"h3\",children:\"Create a new chat thread\"}),/*#__PURE__*/_jsxs(ValidatorForm,{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(Grid,{container:true,item:true,justifyContent:\"center\",children:/*#__PURE__*/_jsx(TextValidator,{type:\"text\",name:\"threadName\",label:\"Thread name\",onChange:handleInputChange,value:inputs.threadName,validators:validators.threadName,errorMessages:errorMessages.threadName})}),/*#__PURE__*/_jsx(Grid,{container:true,item:true,justifyContent:\"center\",children:/*#__PURE__*/_jsxs(Select,{name:\"user2\",value:inputs.user2,label:\"User\",onChange:handleInputChange,children:[usersArray.map(function(item){return/*#__PURE__*/_jsx(MenuItem,{value:item.id,children:item.username});}),' ']})}),/*#__PURE__*/_jsx(Grid,{container:true,item:true,justifyContent:\"center\",children:/*#__PURE__*/_jsx(Button,{style:{marginTop:'2rem',marginBottom:'0.5rem'},color:\"primary\",type:\"submit\",variant:\"contained\",children:\"Create\"})})]})]})});};export default ThreadForm;","map":{"version":3,"sources":["/Users/tommivainio/Projektit/chatApp/my-app/src/components/threadForm.tsx"],"names":["Button","Grid","MenuItem","Select","Typography","useState","useContext","useEffect","TextValidator","ValidatorForm","MediaContext","useUsers","useChats","useForm","ThreadForm","setCreateNewChatThread","setUpdateThreadButtons","user","createNewChatThread","getUsers","usersArray","setUsersArray","validators","threadName","errorMessages","createNewThread","inputs","user2","chatThreadObject","JSON","stringify","name","user_id","user2_id","success","console","log","Date","now","alert","message","handleInputChange","handleSubmit","users","arrayForUsers","i","length","id","push","map","item","username","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import { Button, Grid, MenuItem, Select, Typography } from \"@material-ui/core\"\nimport { useState } from \"react\";\nimport { useContext, useEffect } from \"react\";\nimport { TextValidator, ValidatorForm } from \"react-material-ui-form-validator\"\nimport { MediaContext } from \"../contexts/mediaContext\";\nimport { useUsers, useChats } from \"../hooks/apiHooks\";\nimport useForm from \"../hooks/formHooks\";\n\ninterface propTypes {\n    setCreateNewChatThread: Function,\n    setUpdateThreadButtons: Function\n}\n\ninterface usersArrayType {\n    id: number,\n    username: string,\n}\n\nconst ThreadForm = ({ setCreateNewChatThread, setUpdateThreadButtons }: propTypes) => {\n    const { user } = useContext(MediaContext);\n    const { createNewChatThread } = useChats();\n    const { getUsers } = useUsers();\n    const [usersArray, setUsersArray] = useState<usersArrayType[]>([]);\n\n    const validators = {\n        threadName: ['required', 'minStringLength: 3'],\n    };\n\n    const errorMessages = {\n        threadName: [\n            'Required field',\n            'Minimum of 3 characters'\n        ]\n    };\n\n    const createNewThread = async () => {\n        try {\n            if (inputs.user2 !== '') {\n                const chatThreadObject = JSON.stringify({\n                    name: inputs.threadName,\n                    user_id: user,\n                    user2_id: inputs.user2\n\n                });\n                const success = await createNewChatThread(chatThreadObject);\n                console.log('SUCCESS: ', success)\n                setCreateNewChatThread(false);\n                setUpdateThreadButtons(Date.now());\n            } else {\n                alert('Choose a user with whom you want to chat!');\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n    }\n\n    const { inputs, handleInputChange, handleSubmit } = useForm(createNewThread, {\n        threadName: '',\n        user2: '',\n    });\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const users = await getUsers();\n                let arrayForUsers = [];\n                for (let i = 0; i < users.length; i++) {\n                    if (users[i].id !== user) {\n                        arrayForUsers.push(users[i]);\n                    }\n                }\n                setUsersArray(arrayForUsers);\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, []);\n\n    return (\n        <>\n            <Grid container justifyContent=\"center\" direction=\"column\">\n                <Typography variant=\"h3\">Create a new chat thread</Typography>\n                <ValidatorForm onSubmit={handleSubmit}>\n                    <Grid container item justifyContent=\"center\">\n                        <TextValidator\n                            type=\"text\"\n                            name=\"threadName\"\n                            label=\"Thread name\"\n                            onChange={handleInputChange}\n                            value={inputs.threadName}\n                            validators={validators.threadName}\n                            errorMessages={errorMessages.threadName}\n                        />\n                    </Grid>\n                    <Grid container item justifyContent=\"center\">\n                        <Select\n                            name=\"user2\"\n                            value={inputs.user2}\n                            label=\"User\"\n                            onChange={handleInputChange}\n                        >\n                            {usersArray.map((item) => (\n                                <MenuItem value={item.id}>{item.username}</MenuItem>\n                            ))}{' '}\n                        </Select>\n                    </Grid>\n                    <Grid container item justifyContent=\"center\">\n                        <Button\n                            style={{ marginTop: '2rem', marginBottom: '0.5rem' }}\n                            color=\"primary\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                        >\n                            Create\n                        </Button>\n                    </Grid>\n                </ValidatorForm>\n            </Grid>\n        </>\n    )\n}\n\nexport default ThreadForm;"]},"metadata":{},"sourceType":"module"}