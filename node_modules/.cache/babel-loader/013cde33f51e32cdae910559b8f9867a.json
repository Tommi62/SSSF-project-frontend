{"ast":null,"code":"var _jsxFileName = \"/Users/tommivainio/Projektit/chatApp/my-app/src/views/home.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Button, Grid, List, Typography } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport Thread from '../components/thread';\nimport ThreadButton from '../components/threadButton';\nimport ThreadForm from '../components/threadForm';\nimport { MediaContext } from '../contexts/mediaContext';\nimport { WebsocketContext } from '../contexts/websocketContext';\nimport { useUsers, useChats } from '../hooks/apiHooks';\nimport useWindowDimensions from '../hooks/windowDimensionsHook';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = ({\n  history\n}) => {\n  _s();\n\n  const {\n    user,\n    setUser\n  } = useContext(MediaContext);\n  const {\n    websocket,\n    setWebsocket\n  } = useContext(WebsocketContext);\n  const {\n    getIsLoggedIn\n  } = useUsers();\n  const {\n    getThreadIds,\n    getMessages\n  } = useChats();\n  const {\n    height\n  } = useWindowDimensions();\n  const heightCorrected = height - 64;\n  const [threads, setThreads] = useState([]);\n  const [threadOpen, setThreadOpen] = useState(false);\n  const [threadId, setThreadId] = useState(0);\n  const [messages, setMessages] = useState([]);\n  const [updateState, setUpdateState] = useState(Date.now());\n  const [updateThreadButtons, setUpdateThreadButtons] = useState(Date.now());\n  const [updateThreadButtonInfos, setUpdateThreadButtonInfos] = useState(Date.now());\n  const [createNewChatThread, setCreateNewChatThread] = useState(false);\n  const [messageAmount, setMessageAmount] = useState(50);\n  const [wsMessage, setWsMessage] = useState({\n    type: '',\n    contents: '',\n    timestamp: new Date(),\n    user_id: 0,\n    thread_id: 0\n  });\n  useEffect(() => {\n    (async () => {\n      try {\n        console.log('USER: ', user);\n        const isLoggedIn = await getIsLoggedIn();\n\n        if (!isLoggedIn.success) {\n          history.push('/login');\n        }\n\n        setUser(isLoggedIn.id);\n        console.log('Logged user: ', user, isLoggedIn.id);\n\n        if (user !== 0) {\n          const chatThreads = await getThreadIds(isLoggedIn.id);\n          let idArray = [];\n\n          for (let i = 0; i < chatThreads.length; i++) {\n            console.log('CHATTHREADSS', chatThreads);\n            const threadMessages = await getMessages(chatThreads[i]);\n            console.log('THREADMSGS', threadMessages, chatThreads[i]);\n          }\n\n          setThreads(chatThreads);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [user, updateThreadButtons]);\n  useEffect(() => {\n    (async () => {\n      try {\n        if (threadId !== 0) {\n          const threadMessages = await getMessages(threadId);\n          const reversedArray = threadMessages.reverse();\n          setMessages(reversedArray);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [threadId, updateState]);\n  useEffect(() => {\n    try {\n      if (wsMessage.type !== '' && wsMessage.thread_id === threadId) {\n        const newMessageObject = {\n          id: Date.now(),\n          user_id: wsMessage.user_id,\n          contents: wsMessage.contents,\n          timestamp: wsMessage.timestamp\n        };\n        setMessages(messages => [...messages, newMessageObject]);\n        setMessageAmount(messageAmount + 1);\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n  }, [wsMessage]);\n  useEffect(() => {\n    try {\n      if (threads.length !== 0) {\n        if (websocket === undefined || websocket.readyState === 2 || websocket.readyState === 3) {\n          console.log('READYSTATE ', websocket === null || websocket === void 0 ? void 0 : websocket.readyState);\n          const socket = new WebSocket('ws://localhost:3001');\n          socket.addEventListener('open', function (event) {\n            console.log('Server is opened.');\n            const client = {\n              type: 'client',\n              user_id: user,\n              threads: threads\n            };\n            socket.send(JSON.stringify(client));\n          });\n          socket.addEventListener('message', function (event) {\n            if (event.data !== 'ping') {\n              console.log('Message from server ', JSON.parse(event.data).thread_id);\n              const message = JSON.parse(event.data);\n\n              if (message.type === 'message') {\n                setWsMessage(message);\n                setUpdateThreadButtonInfos(Date.now());\n              } else {\n                setTimeout(() => socket.send('pong'), 1000);\n              }\n            }\n          });\n          socket.addEventListener('close', function (event) {\n            console.log('Websocket connection closed.');\n            setUpdateState(Date.now());\n          });\n          setWebsocket(socket);\n          console.log('NEW SOCKET');\n        }\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n\n    ;\n  }, [updateState, threads]);\n\n  const setCreateNewChatThreadOpen = () => {\n    setCreateNewChatThread(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: createNewChatThread ? /*#__PURE__*/_jsxDEV(ThreadForm, {\n      setCreateNewChatThread: setCreateNewChatThread,\n      setUpdateThreadButtons: setUpdateThreadButtons\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"row\",\n        style: {\n          height: heightCorrected\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          style: {\n            width: '30%',\n            borderRight: '1px solid #5F4B8BFF'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: setCreateNewChatThreadOpen,\n            color: \"primary\",\n            variant: \"contained\",\n            style: {\n              marginTop: '1rem',\n              marginBottom: '1rem'\n            },\n            children: \"Create a new chat thread\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            style: {\n              borderTop: '1px solid #5F4B8BFF',\n              marginTop: '1rem'\n            },\n            children: /*#__PURE__*/_jsxDEV(List, {\n              style: {\n                padding: 0,\n                width: '100%'\n              },\n              children: [threads.map(item => /*#__PURE__*/_jsxDEV(ThreadButton, {\n                id: item.thread_id,\n                setThreadOpen: setThreadOpen,\n                setThreadId: setThreadId,\n                threadOpen: threadOpen,\n                threadId: threadId,\n                updateThreadButtonInfos: updateThreadButtonInfos\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 41\n              }, this)), ' ']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          style: {\n            width: '70%'\n          },\n          children: threadOpen ? /*#__PURE__*/_jsxDEV(Thread, {\n            messages: messages,\n            id: threadId,\n            websocket: websocket,\n            messageAmount: messageAmount,\n            setMessageAmount: setMessageAmount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            alignItems: \"center\",\n            justify: \"center\",\n            direction: \"column\",\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              component: \"h1\",\n              variant: \"h2\",\n              children: \"Welcome\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"div\",\n              variant: \"body1\",\n              children: \"This is Chat App made by Tommi.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }, this)\n    }, void 0, false)\n  }, void 0, false);\n};\n\n_s(Home, \"8G5cRex/F9vo+q+0G4kjKNgBTJw=\", false, function () {\n  return [useUsers, useChats, useWindowDimensions];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/tommivainio/Projektit/chatApp/my-app/src/views/home.tsx"],"names":["Button","Grid","List","Typography","useContext","useEffect","useState","Thread","ThreadButton","ThreadForm","MediaContext","WebsocketContext","useUsers","useChats","useWindowDimensions","Home","history","user","setUser","websocket","setWebsocket","getIsLoggedIn","getThreadIds","getMessages","height","heightCorrected","threads","setThreads","threadOpen","setThreadOpen","threadId","setThreadId","messages","setMessages","updateState","setUpdateState","Date","now","updateThreadButtons","setUpdateThreadButtons","updateThreadButtonInfos","setUpdateThreadButtonInfos","createNewChatThread","setCreateNewChatThread","messageAmount","setMessageAmount","wsMessage","setWsMessage","type","contents","timestamp","user_id","thread_id","console","log","isLoggedIn","success","push","id","chatThreads","idArray","i","length","threadMessages","e","message","reversedArray","reverse","newMessageObject","undefined","readyState","socket","WebSocket","addEventListener","event","client","send","JSON","stringify","data","parse","setTimeout","setCreateNewChatThreadOpen","width","borderRight","marginTop","marginBottom","borderTop","padding","map","item"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { Button, Grid, List, Typography } from '@material-ui/core';\nimport { BorderRight } from '@material-ui/icons';\nimport { useContext, useEffect, useState } from 'react';\nimport Thread from '../components/thread';\nimport ThreadButton from '../components/threadButton';\nimport ThreadForm from '../components/threadForm';\nimport { MediaContext } from '../contexts/mediaContext';\nimport { WebsocketContext } from '../contexts/websocketContext';\nimport { useUsers, useChats } from '../hooks/apiHooks';\nimport useWindowDimensions from '../hooks/windowDimensionsHook';\n\ninterface propType {\n    history: {\n        push: Function,\n    }\n}\n\ninterface threadsArray {\n    thread_id: number\n}\n\ninterface messagesArray {\n    id: number,\n    user_id: number,\n    contents: string,\n    timestamp: Date,\n}\n\nconst Home = ({ history }: propType) => {\n    const { user, setUser } = useContext(MediaContext);\n    const { websocket, setWebsocket } = useContext(WebsocketContext);\n    const { getIsLoggedIn } = useUsers();\n    const { getThreadIds, getMessages } = useChats();\n    const { height } = useWindowDimensions();\n    const heightCorrected = height - 64;\n    const [threads, setThreads] = useState<threadsArray[]>([]);\n    const [threadOpen, setThreadOpen] = useState(false)\n    const [threadId, setThreadId] = useState(0)\n    const [messages, setMessages] = useState<messagesArray[]>([]);\n    const [updateState, setUpdateState] = useState(Date.now());\n    const [updateThreadButtons, setUpdateThreadButtons] = useState(Date.now());\n    const [updateThreadButtonInfos, setUpdateThreadButtonInfos] = useState(Date.now());\n    const [createNewChatThread, setCreateNewChatThread] = useState(false);\n    const [messageAmount, setMessageAmount] = useState(50);\n    const [wsMessage, setWsMessage] = useState({\n        type: '',\n        contents: '',\n        timestamp: new Date(),\n        user_id: 0,\n        thread_id: 0\n    });\n\n    useEffect(() => {\n        (async () => {\n            try {\n                console.log('USER: ', user)\n                const isLoggedIn = await getIsLoggedIn();\n                if (!isLoggedIn.success) {\n                    history.push('/login');\n                }\n                setUser(isLoggedIn.id)\n                console.log('Logged user: ', user, isLoggedIn.id);\n                if (user !== 0) {\n                    const chatThreads = await getThreadIds(isLoggedIn.id)\n                    let idArray = [];\n                    for (let i = 0; i < chatThreads.length; i++) {\n                        console.log('CHATTHREADSS', chatThreads);\n                        const threadMessages = await getMessages(chatThreads[i]);\n                        console.log('THREADMSGS', threadMessages, chatThreads[i]);\n                    }\n                    setThreads(chatThreads)\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [user, updateThreadButtons]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                if (threadId !== 0) {\n                    const threadMessages = await getMessages(threadId);\n                    const reversedArray = threadMessages.reverse();\n                    setMessages(reversedArray);\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [threadId, updateState]);\n\n    useEffect(() => {\n        try {\n            if (wsMessage.type !== '' && wsMessage.thread_id === threadId) {\n                const newMessageObject = {\n                    id: Date.now(),\n                    user_id: wsMessage.user_id,\n                    contents: wsMessage.contents,\n                    timestamp: wsMessage.timestamp,\n                }\n                setMessages(messages => [...messages, newMessageObject]);\n                setMessageAmount(messageAmount + 1);\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n    }, [wsMessage]);\n\n    useEffect(() => {\n        try {\n            if (threads.length !== 0) {\n                if (websocket === undefined || websocket.readyState === 2 || websocket.readyState === 3) {\n                    console.log('READYSTATE ', websocket?.readyState)\n                    const socket = new WebSocket('ws://localhost:3001');\n\n                    socket.addEventListener('open', function (event) {\n                        console.log('Server is opened.');\n                        const client = {\n                            type: 'client',\n                            user_id: user,\n                            threads: threads,\n                        }\n                        socket.send(JSON.stringify(client));\n                    });\n\n                    socket.addEventListener('message', function (event) {\n                        if (event.data !== 'ping') {\n                            console.log('Message from server ', JSON.parse(event.data).thread_id);\n                            const message = JSON.parse(event.data);\n                            if (message.type === 'message') {\n                                setWsMessage(message);\n                                setUpdateThreadButtonInfos(Date.now());\n                            } else {\n                                setTimeout(() => socket.send('pong'), 1000);\n                            }\n                        }\n                    });\n\n                    socket.addEventListener('close', function (event) {\n                        console.log('Websocket connection closed.');\n                        setUpdateState(Date.now());\n                    });\n\n                    setWebsocket(socket);\n                    console.log('NEW SOCKET');\n                }\n            }\n        } catch (e) {\n            console.log(e.message);\n        };\n    }, [updateState, threads]);\n\n    const setCreateNewChatThreadOpen = () => {\n        setCreateNewChatThread(true);\n    }\n\n\n    return (\n        <>\n            {createNewChatThread ? (\n                <ThreadForm setCreateNewChatThread={setCreateNewChatThread} setUpdateThreadButtons={setUpdateThreadButtons} />\n            ) : (\n                <>\n                    <Grid container direction=\"row\" style={{ height: heightCorrected, }} >\n                        <Grid item style={{ width: '30%', borderRight: '1px solid #5F4B8BFF' }}>\n                            <Button\n                                onClick={setCreateNewChatThreadOpen}\n                                color=\"primary\"\n                                variant=\"contained\"\n                                style={{ marginTop: '1rem', marginBottom: '1rem' }}\n                            >\n                                Create a new chat thread\n                            </Button>\n                            <Grid container style={{ borderTop: '1px solid #5F4B8BFF', marginTop: '1rem' }} >\n                                <List style={{ padding: 0, width: '100%' }}>\n                                    {threads.map((item) => (\n                                        <ThreadButton\n                                            id={item.thread_id}\n                                            setThreadOpen={setThreadOpen}\n                                            setThreadId={setThreadId}\n                                            threadOpen={threadOpen}\n                                            threadId={threadId}\n                                            updateThreadButtonInfos={updateThreadButtonInfos}\n                                        />\n                                    ))}{' '}\n                                </List>\n                            </Grid>\n                        </Grid>\n                        <Grid item style={{ width: '70%' }}>\n                            {threadOpen ? (\n                                <Thread messages={messages} id={threadId} websocket={websocket} messageAmount={messageAmount} setMessageAmount={setMessageAmount} />\n                            ) : (\n                                <Grid container alignItems=\"center\" justify=\"center\" direction=\"column\" >\n                                    <Typography component=\"h1\" variant=\"h2\">Welcome</Typography>\n                                    <Typography component=\"div\" variant=\"body1\">This is Chat App made by Tommi.</Typography>\n                                </Grid>\n                            )}\n                        </Grid>\n                    </Grid>\n                </>\n            )}\n        </>\n    );\n\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}