{"ast":null,"code":"var _jsxFileName = \"/Users/tommivainio/Desktop/chatApp/my-app/src/views/home.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Button, Grid, List, Typography } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport Thread from '../components/thread';\nimport ThreadButton from '../components/threadButton';\nimport ThreadForm from '../components/threadForm';\nimport { MediaContext } from '../contexts/mediaContext';\nimport { WebsocketContext } from '../contexts/websocketContext';\nimport { useUsers, useChats } from '../hooks/apiHooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = ({\n  history\n}) => {\n  _s();\n\n  const {\n    user,\n    setUser\n  } = useContext(MediaContext);\n  const {\n    websocket,\n    setWebsocket\n  } = useContext(WebsocketContext);\n  const {\n    getIsLoggedIn\n  } = useUsers();\n  const {\n    getThreadIds,\n    getMessages\n  } = useChats();\n  const [threads, setThreads] = useState([]);\n  const [threadOpen, setThreadOpen] = useState(false);\n  const [threadId, setThreadId] = useState(0);\n  const [messages, setMessages] = useState([]);\n  const [socketThreadId, setSocketThreadId] = useState(0);\n  const [updateState, setUpdateState] = useState(Date.now());\n  const [updateThreadButtons, setUpdateThreadButtons] = useState(Date.now());\n  const [createNewChatThread, setCreateNewChatThread] = useState(false);\n  let newMessagesArray = [];\n  useEffect(() => {\n    (async () => {\n      try {\n        console.log('USER: ', user);\n        const isLoggedIn = await getIsLoggedIn();\n\n        if (!isLoggedIn.success) {\n          history.push('/login');\n        }\n\n        setUser(isLoggedIn.id);\n        console.log('Logged user: ', user, isLoggedIn.id);\n\n        if (user !== 0) {\n          const chatThreads = await getThreadIds(isLoggedIn.id);\n          setThreads(chatThreads);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [user, updateThreadButtons]);\n  useEffect(() => {\n    (async () => {\n      try {\n        if (threadId !== 0) {\n          const threadMessages = await getMessages(threadId);\n          const reversedArray = threadMessages.reverse();\n          newMessagesArray = reversedArray;\n          setMessages(newMessagesArray);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [threadId, updateState]);\n  useEffect(() => {\n    try {\n      if (threadOpen) {\n        if (websocket === undefined || websocket.readyState === 2 || websocket.readyState === 3 || threadId !== socketThreadId) {\n          console.log('READYSTATE ', websocket === null || websocket === void 0 ? void 0 : websocket.readyState);\n          const socket = new WebSocket('ws://localhost:3001');\n          socket.addEventListener('open', function (event) {\n            console.log('Server is opened.');\n            const client = {\n              type: 'client',\n              thread_id: threadId,\n              user_id: user\n            };\n            socket.send(JSON.stringify(client));\n          });\n          socket.addEventListener('message', function (event) {\n            if (event.data !== 'ping') {\n              console.log('Message from server ', JSON.parse(event.data).thread_id);\n              const message = JSON.parse(event.data);\n\n              if (message.thread_id === threadId) {\n                const newMessageObject = {\n                  id: Date.now(),\n                  user_id: message.user_id,\n                  contents: message.contents,\n                  timestamp: message.timestamp\n                };\n                newMessagesArray.push(newMessageObject);\n                const arrayCopy = [...newMessagesArray];\n                setMessages(arrayCopy);\n              }\n            } else {\n              setTimeout(() => socket.send('pong'), 1000);\n            }\n          });\n          socket.addEventListener('close', function (event) {\n            console.log('Websocket connection closed.');\n            setUpdateState(Date.now());\n          });\n          setWebsocket(socket);\n          setSocketThreadId(threadId);\n          console.log('NEW SOCKET');\n        }\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n\n    ;\n  }, [threadOpen, threadId, updateState]);\n\n  const setCreateNewChatThreadOpen = () => {\n    setCreateNewChatThread(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: createNewChatThread ? /*#__PURE__*/_jsxDEV(ThreadForm, {\n      setCreateNewChatThread: setCreateNewChatThread,\n      setUpdateThreadButtons: setUpdateThreadButtons\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: threadOpen ? /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          style: {\n            width: '30%'\n          },\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            style: {\n              borderTop: '1px solid #5F4B8BFF',\n              marginTop: '1rem'\n            },\n            children: /*#__PURE__*/_jsxDEV(List, {\n              style: {\n                padding: 0,\n                width: '100%'\n              },\n              children: [threads.map(item => /*#__PURE__*/_jsxDEV(ThreadButton, {\n                id: item.thread_id,\n                setThreadOpen: setThreadOpen,\n                setThreadId: setThreadId,\n                threadOpen: threadOpen\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 45\n              }, this)), ' ']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          style: {\n            width: '70%'\n          },\n          children: /*#__PURE__*/_jsxDEV(Thread, {\n            messages: messages,\n            id: threadId,\n            websocket: websocket\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        justify: \"center\",\n        direction: \"column\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"h1\",\n          variant: \"h2\",\n          children: \"Welcome\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          justifyContent: \"center\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: setCreateNewChatThreadOpen,\n            color: \"primary\",\n            variant: \"contained\",\n            style: {\n              marginTop: '1rem',\n              marginBottom: '1rem'\n            },\n            children: \"Create a new chat thread\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          style: {\n            width: '20vw',\n            padding: 0,\n            margin: 'auto',\n            borderStyle: 'solid',\n            borderWidth: '1px 1px 0 1px',\n            borderColor: '#5F4B8BFF'\n          },\n          children: [threads.map(item => /*#__PURE__*/_jsxDEV(ThreadButton, {\n            id: item.thread_id,\n            setThreadOpen: setThreadOpen,\n            setThreadId: setThreadId,\n            threadOpen: threadOpen\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 37\n          }, this)), ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 25\n      }, this)\n    }, void 0, false)\n  }, void 0, false);\n};\n\n_s(Home, \"flXlrpk3mi095y/J4XhsvDIQDCs=\", false, function () {\n  return [useUsers, useChats];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/tommivainio/Desktop/chatApp/my-app/src/views/home.tsx"],"names":["Button","Grid","List","Typography","useContext","useEffect","useState","Thread","ThreadButton","ThreadForm","MediaContext","WebsocketContext","useUsers","useChats","Home","history","user","setUser","websocket","setWebsocket","getIsLoggedIn","getThreadIds","getMessages","threads","setThreads","threadOpen","setThreadOpen","threadId","setThreadId","messages","setMessages","socketThreadId","setSocketThreadId","updateState","setUpdateState","Date","now","updateThreadButtons","setUpdateThreadButtons","createNewChatThread","setCreateNewChatThread","newMessagesArray","console","log","isLoggedIn","success","push","id","chatThreads","e","message","threadMessages","reversedArray","reverse","undefined","readyState","socket","WebSocket","addEventListener","event","client","type","thread_id","user_id","send","JSON","stringify","data","parse","newMessageObject","contents","timestamp","arrayCopy","setTimeout","setCreateNewChatThreadOpen","width","borderTop","marginTop","padding","map","item","marginBottom","margin","borderStyle","borderWidth","borderColor"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { Button, Grid, List, Typography } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport Thread from '../components/thread';\nimport ThreadButton from '../components/threadButton';\nimport ThreadForm from '../components/threadForm';\nimport { MediaContext } from '../contexts/mediaContext';\nimport { WebsocketContext } from '../contexts/websocketContext';\nimport { useUsers, useChats } from '../hooks/apiHooks';\n\ninterface propType {\n    history: {\n        push: Function,\n    }\n}\n\ninterface threadsArray {\n    thread_id: number\n}\n\ninterface messagesArray {\n    id: number,\n    user_id: number,\n    contents: string,\n    timestamp: Date,\n}\n\nconst Home = ({ history }: propType) => {\n    const { user, setUser } = useContext(MediaContext);\n    const { websocket, setWebsocket } = useContext(WebsocketContext);\n    const { getIsLoggedIn } = useUsers();\n    const { getThreadIds, getMessages } = useChats();\n    const [threads, setThreads] = useState<threadsArray[]>([]);\n    const [threadOpen, setThreadOpen] = useState(false)\n    const [threadId, setThreadId] = useState(0)\n    const [messages, setMessages] = useState<messagesArray[]>([]);\n    const [socketThreadId, setSocketThreadId] = useState(0);\n    const [updateState, setUpdateState] = useState(Date.now());\n    const [updateThreadButtons, setUpdateThreadButtons] = useState(Date.now());\n    const [createNewChatThread, setCreateNewChatThread] = useState(false);\n    let newMessagesArray: messagesArray[] = [];\n\n    useEffect(() => {\n        (async () => {\n            try {\n                console.log('USER: ', user)\n                const isLoggedIn = await getIsLoggedIn();\n                if (!isLoggedIn.success) {\n                    history.push('/login');\n                }\n                setUser(isLoggedIn.id)\n                console.log('Logged user: ', user, isLoggedIn.id);\n                if (user !== 0) {\n                    const chatThreads = await getThreadIds(isLoggedIn.id)\n                    setThreads(chatThreads)\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [user, updateThreadButtons]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                if (threadId !== 0) {\n                    const threadMessages = await getMessages(threadId);\n                    const reversedArray = threadMessages.reverse();\n                    newMessagesArray = reversedArray;\n                    setMessages(newMessagesArray);\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [threadId, updateState]);\n\n    useEffect(() => {\n        try {\n            if (threadOpen) {\n                if (websocket === undefined || websocket.readyState === 2 || websocket.readyState === 3 || threadId !== socketThreadId) {\n                    console.log('READYSTATE ', websocket?.readyState)\n                    const socket = new WebSocket('ws://localhost:3001');\n\n                    socket.addEventListener('open', function (event) {\n                        console.log('Server is opened.');\n                        const client = {\n                            type: 'client',\n                            thread_id: threadId,\n                            user_id: user,\n                        }\n                        socket.send(JSON.stringify(client));\n                    });\n\n                    socket.addEventListener('message', function (event) {\n                        if (event.data !== 'ping') {\n                            console.log('Message from server ', JSON.parse(event.data).thread_id);\n                            const message = JSON.parse(event.data);\n                            if (message.thread_id === threadId) {\n                                const newMessageObject = {\n                                    id: Date.now(),\n                                    user_id: message.user_id,\n                                    contents: message.contents,\n                                    timestamp: message.timestamp,\n                                }\n                                newMessagesArray.push(newMessageObject);\n                                const arrayCopy = [...newMessagesArray];\n                                setMessages(arrayCopy);\n                            }\n                        } else {\n                            setTimeout(() => socket.send('pong'), 1000);\n                        }\n                    });\n\n                    socket.addEventListener('close', function (event) {\n                        console.log('Websocket connection closed.');\n                        setUpdateState(Date.now());\n                    });\n\n                    setWebsocket(socket);\n                    setSocketThreadId(threadId);\n                    console.log('NEW SOCKET');\n                }\n            }\n        } catch (e) {\n            console.log(e.message);\n        };\n    }, [threadOpen, threadId, updateState]);\n\n    const setCreateNewChatThreadOpen = () => {\n        setCreateNewChatThread(true);\n    }\n\n\n    return (\n        <>\n            {createNewChatThread ? (\n                <ThreadForm setCreateNewChatThread={setCreateNewChatThread} setUpdateThreadButtons={setUpdateThreadButtons} />\n            ) : (\n                <>\n                    {threadOpen ? (\n                        <Grid container direction=\"row\">\n                            <Grid item style={{ width: '30%' }}>\n                                <Grid container style={{ borderTop: '1px solid #5F4B8BFF', marginTop: '1rem' }} >\n                                    <List style={{ padding: 0, width: '100%' }}>\n                                        {threads.map((item) => (\n                                            <ThreadButton id={item.thread_id} setThreadOpen={setThreadOpen} setThreadId={setThreadId} threadOpen={threadOpen} />\n                                        ))}{' '}\n                                    </List>\n                                </Grid>\n                            </Grid>\n                            <Grid item style={{ width: '70%' }}>\n                                <Thread messages={messages} id={threadId} websocket={websocket} />\n                            </Grid>\n                        </Grid>\n                    ) : (\n                        <Grid container justify=\"center\" direction=\"column\">\n                            <Typography component=\"h1\" variant=\"h2\">Welcome</Typography>\n                            <Grid container item justifyContent=\"center\">\n                                <Button\n                                    onClick={setCreateNewChatThreadOpen}\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                    style={{ marginTop: '1rem', marginBottom: '1rem' }}\n                                >\n                                    Create a new chat thread\n                                </Button>\n                            </Grid>\n                            <List style={{\n                                width: '20vw',\n                                padding: 0,\n                                margin: 'auto',\n                                borderStyle: 'solid',\n                                borderWidth: '1px 1px 0 1px',\n                                borderColor: '#5F4B8BFF'\n                            }}>\n                                {threads.map((item) => (\n                                    <ThreadButton id={item.thread_id} setThreadOpen={setThreadOpen} setThreadId={setThreadId} threadOpen={threadOpen} />\n                                ))}{' '}\n                            </List>\n                        </Grid>\n                    )}\n                </>\n            )}\n        </>\n    );\n\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}