{"ast":null,"code":"var _jsxFileName = \"/Users/tommivainio/Projektit/chatApp/my-app/src/components/threadForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, FormControl, Grid, InputLabel, makeStyles, MenuItem, Select, Typography } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport { useContext, useEffect } from \"react\";\nimport { TextValidator, ValidatorForm } from \"react-material-ui-form-validator\";\nimport { MediaContext } from \"../contexts/mediaContext\";\nimport { useUsers, useChats } from \"../hooks/apiHooks\";\nimport useForm from \"../hooks/formHooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => ({\n  select: {\n    minWidth: '5rem'\n  },\n  formControl: {\n    marginTop: '0.5rem'\n  }\n}));\n\nconst ThreadForm = ({\n  setCreateNewChatThread,\n  setUpdateThreadButtons\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    user\n  } = useContext(MediaContext);\n  const {\n    createNewChatThread\n  } = useChats();\n  const {\n    getUsers\n  } = useUsers();\n  const [usersArray, setUsersArray] = useState([]);\n  const validators = {\n    threadName: ['required', 'minStringLength: 3']\n  };\n  const errorMessages = {\n    threadName: ['Required field', 'Minimum of 3 characters']\n  };\n\n  const createNewThread = async () => {\n    try {\n      if (inputs.user2 !== '') {\n        const chatThreadObject = JSON.stringify({\n          name: inputs.threadName,\n          user_id: user,\n          user2_id: inputs.user2\n        });\n        const success = await createNewChatThread(chatThreadObject);\n        console.log('SUCCESS: ', success);\n        setCreateNewChatThread(false);\n        setUpdateThreadButtons(Date.now());\n      } else {\n        alert('Choose a user with whom you want to chat!');\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n\n  const {\n    inputs,\n    handleInputChange,\n    handleSubmit\n  } = useForm(createNewThread, {\n    threadName: '',\n    user2: ''\n  });\n  useEffect(() => {\n    (async () => {\n      try {\n        const users = await getUsers();\n        let arrayForUsers = [];\n\n        for (let i = 0; i < users.length; i++) {\n          if (users[i].id !== user) {\n            arrayForUsers.push(users[i]);\n          }\n        }\n\n        setUsersArray(arrayForUsers);\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"center\",\n      direction: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        children: \"Create a new chat thread\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ValidatorForm, {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          justifyContent: \"center\",\n          children: /*#__PURE__*/_jsxDEV(TextValidator, {\n            type: \"text\",\n            name: \"threadName\",\n            label: \"Thread name\",\n            onChange: handleInputChange,\n            value: inputs.threadName,\n            validators: validators.threadName,\n            errorMessages: errorMessages.threadName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          justifyContent: \"center\",\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            className: classes.formControl,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"User\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              name: \"user2\",\n              value: inputs.user2,\n              label: \"User\",\n              onChange: handleInputChange,\n              autoWidth: true,\n              className: classes.select,\n              children: [usersArray.map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: item.id,\n                children: item.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 37\n              }, this)), ' ']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          justifyContent: \"center\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              marginTop: '2rem',\n              marginBottom: '0.5rem'\n            },\n            color: \"primary\",\n            type: \"submit\",\n            variant: \"contained\",\n            children: \"Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(ThreadForm, \"5o5Kkf82eCmbiPpJqOnqfxuCw4I=\", false, function () {\n  return [useStyles, useChats, useUsers, useForm];\n});\n\n_c = ThreadForm;\nexport default ThreadForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreadForm\");","map":{"version":3,"sources":["/Users/tommivainio/Projektit/chatApp/my-app/src/components/threadForm.tsx"],"names":["Button","FormControl","Grid","InputLabel","makeStyles","MenuItem","Select","Typography","useState","useContext","useEffect","TextValidator","ValidatorForm","MediaContext","useUsers","useChats","useForm","useStyles","select","minWidth","formControl","marginTop","ThreadForm","setCreateNewChatThread","setUpdateThreadButtons","classes","user","createNewChatThread","getUsers","usersArray","setUsersArray","validators","threadName","errorMessages","createNewThread","inputs","user2","chatThreadObject","JSON","stringify","name","user_id","user2_id","success","console","log","Date","now","alert","e","message","handleInputChange","handleSubmit","users","arrayForUsers","i","length","id","push","map","item","username","marginBottom"],"mappings":"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","sourcesContent":["import { Button, FormControl, Grid, InputLabel, makeStyles, MenuItem, Select, Typography } from \"@material-ui/core\"\nimport { useState } from \"react\";\nimport { useContext, useEffect } from \"react\";\nimport { TextValidator, ValidatorForm } from \"react-material-ui-form-validator\"\nimport { MediaContext } from \"../contexts/mediaContext\";\nimport { useUsers, useChats } from \"../hooks/apiHooks\";\nimport useForm from \"../hooks/formHooks\";\n\ninterface propTypes {\n    setCreateNewChatThread: Function,\n    setUpdateThreadButtons: Function\n}\n\ninterface usersArrayType {\n    id: number,\n    username: string,\n}\n\nconst useStyles = makeStyles(() => ({\n    select: {\n        minWidth: '5rem',\n    },\n    formControl: {\n        marginTop: '0.5rem',\n    }\n}));\n\nconst ThreadForm = ({ setCreateNewChatThread, setUpdateThreadButtons }: propTypes) => {\n    const classes = useStyles();\n    const { user } = useContext(MediaContext);\n    const { createNewChatThread } = useChats();\n    const { getUsers } = useUsers();\n    const [usersArray, setUsersArray] = useState<usersArrayType[]>([]);\n\n    const validators = {\n        threadName: ['required', 'minStringLength: 3'],\n    };\n\n    const errorMessages = {\n        threadName: [\n            'Required field',\n            'Minimum of 3 characters'\n        ]\n    };\n\n    const createNewThread = async () => {\n        try {\n            if (inputs.user2 !== '') {\n                const chatThreadObject = JSON.stringify({\n                    name: inputs.threadName,\n                    user_id: user,\n                    user2_id: inputs.user2\n\n                });\n                const success = await createNewChatThread(chatThreadObject);\n                console.log('SUCCESS: ', success)\n                setCreateNewChatThread(false);\n                setUpdateThreadButtons(Date.now());\n            } else {\n                alert('Choose a user with whom you want to chat!');\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n    }\n\n    const { inputs, handleInputChange, handleSubmit } = useForm(createNewThread, {\n        threadName: '',\n        user2: '',\n    });\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const users = await getUsers();\n                let arrayForUsers = [];\n                for (let i = 0; i < users.length; i++) {\n                    if (users[i].id !== user) {\n                        arrayForUsers.push(users[i]);\n                    }\n                }\n                setUsersArray(arrayForUsers);\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, []);\n\n    return (\n        <>\n            <Grid container justifyContent=\"center\" direction=\"column\">\n                <Typography variant=\"h3\">Create a new chat thread</Typography>\n                <ValidatorForm onSubmit={handleSubmit}>\n                    <Grid container item justifyContent=\"center\">\n                        <TextValidator\n                            type=\"text\"\n                            name=\"threadName\"\n                            label=\"Thread name\"\n                            onChange={handleInputChange}\n                            value={inputs.threadName}\n                            validators={validators.threadName}\n                            errorMessages={errorMessages.threadName}\n                        />\n                    </Grid>\n                    <Grid container item justifyContent=\"center\">\n                        <FormControl className={classes.formControl}>\n                            <InputLabel>User</InputLabel>\n                            <Select\n                                name=\"user2\"\n                                value={inputs.user2}\n                                label=\"User\"\n                                onChange={handleInputChange}\n                                autoWidth\n                                className={classes.select}\n                            >\n                                {usersArray.map((item) => (\n                                    <MenuItem value={item.id}>{item.username}</MenuItem>\n                                ))}{' '}\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                    <Grid container item justifyContent=\"center\">\n                        <Button\n                            style={{ marginTop: '2rem', marginBottom: '0.5rem' }}\n                            color=\"primary\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                        >\n                            Create\n                        </Button>\n                    </Grid>\n                </ValidatorForm>\n            </Grid>\n        </>\n    )\n}\n\nexport default ThreadForm;"]},"metadata":{},"sourceType":"module"}