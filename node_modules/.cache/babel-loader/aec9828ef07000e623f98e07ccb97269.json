{"ast":null,"code":"import config from '../config';\n\nconst doFetch = async (url, options = {}) => {\n  console.log('smthng');\n  const response = await fetch(config.backendUrl + url, options);\n  console.log('doFetch: ', response);\n  const json = await response.json();\n  console.log('doFetch2: ', json);\n\n  if (json.error) {\n    // if API response contains error message (use Postman to get further details)\n    throw new Error(json.message + ': ' + json.error);\n  } else if (!response.ok) {\n    // if API response does not contain error message, but there is some other error\n    throw new Error('doFetch failed');\n  } else {\n    // if all goes well\n    return json;\n  }\n};\n\nconst useUsers = () => {\n  const getUsers = async () => {\n    const fetchOptions = {\n      method: 'GET'\n    };\n\n    try {\n      return await doFetch('/users', fetchOptions);\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const getUserAvailable = async username => {\n    try {\n      return await doFetch('/users/username/' + username);\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const register = async inputs => {\n    const fetchOptions = {\n      method: 'POST',\n      body: JSON.stringify(inputs)\n    };\n\n    try {\n      return await doFetch('/user', fetchOptions);\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  return {\n    getUsers,\n    getUserAvailable,\n    register\n  };\n};\n\nexport { useUsers };","map":{"version":3,"sources":["C:/USERS/Tommi Vainio/desktop/chatApp/my-app/src/hooks/apiHooks.tsx"],"names":["config","doFetch","url","options","console","log","response","fetch","backendUrl","json","error","Error","message","ok","useUsers","getUsers","fetchOptions","method","e","getUserAvailable","username","alert","register","inputs","body","JSON","stringify"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB;;AAGA,MAAMC,OAAO,GAAG,OAAOC,GAAP,EAAoBC,OAAO,GAAG,EAA9B,KAAqC;AACjDC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,MAAM,CAACQ,UAAP,GAAoBN,GAArB,EAA0BC,OAA1B,CAA5B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,QAAzB;AACA,QAAMG,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAT,EAAnB;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BI,IAA1B;;AACA,MAAIA,IAAI,CAACC,KAAT,EAAgB;AACZ;AACA,UAAM,IAAIC,KAAJ,CAAUF,IAAI,CAACG,OAAL,GAAe,IAAf,GAAsBH,IAAI,CAACC,KAArC,CAAN;AACH,GAHD,MAGO,IAAI,CAACJ,QAAQ,CAACO,EAAd,EAAkB;AACrB;AACA,UAAM,IAAIF,KAAJ,CAAU,gBAAV,CAAN;AACH,GAHM,MAGA;AACH;AACA,WAAOF,IAAP;AACH;AACJ,CAhBD;;AAkBA,MAAMK,QAAQ,GAAG,MAAM;AAEnB,QAAMC,QAAQ,GAAG,YAAY;AACzB,UAAMC,YAAY,GAAG;AACjBC,MAAAA,MAAM,EAAE;AADS,KAArB;;AAGA,QAAI;AACA,aAAO,MAAMhB,OAAO,CAAC,QAAD,EAAWe,YAAX,CAApB;AACH,KAFD,CAEE,OAAOE,CAAP,EAAU;AACR,YAAM,IAAIP,KAAJ,CAAUO,CAAC,CAACN,OAAZ,CAAN;AACH;AACJ,GATD;;AAWA,QAAMO,gBAAgB,GAAG,MAAOC,QAAP,IAA4B;AACjD,QAAI;AACA,aAAO,MAAMnB,OAAO,CAAC,qBAAqBmB,QAAtB,CAApB;AACH,KAFD,CAEE,OAAOF,CAAP,EAAU;AACRG,MAAAA,KAAK,CAACH,CAAC,CAACN,OAAH,CAAL;AACH;AACJ,GAND;;AAQA,QAAMU,QAAQ,GAAG,MAAOC,MAAP,IAA0B;AACvC,UAAMP,YAAY,GAAG;AACjBC,MAAAA,MAAM,EAAE,MADS;AAEjBO,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,MAAf;AAFW,KAArB;;AAIA,QAAI;AACA,aAAO,MAAMtB,OAAO,CAAC,OAAD,EAAUe,YAAV,CAApB;AACH,KAFD,CAEE,OAAOE,CAAP,EAAU;AACRG,MAAAA,KAAK,CAACH,CAAC,CAACN,OAAH,CAAL;AACH;AACJ,GAVD;;AAYA,SAAO;AAAEG,IAAAA,QAAF;AAAYI,IAAAA,gBAAZ;AAA8BG,IAAAA;AAA9B,GAAP;AACH,CAlCD;;AAoCA,SAASR,QAAT","sourcesContent":["import config from '../config'\r\n\r\n\r\nconst doFetch = async (url: string, options = {}) => {\r\n    console.log('smthng');\r\n    const response = await fetch(config.backendUrl + url, options);\r\n    console.log('doFetch: ', response);\r\n    const json = await response.json();\r\n    console.log('doFetch2: ', json);\r\n    if (json.error) {\r\n        // if API response contains error message (use Postman to get further details)\r\n        throw new Error(json.message + ': ' + json.error);\r\n    } else if (!response.ok) {\r\n        // if API response does not contain error message, but there is some other error\r\n        throw new Error('doFetch failed');\r\n    } else {\r\n        // if all goes well\r\n        return json;\r\n    }\r\n};\r\n\r\nconst useUsers = () => {\r\n\r\n    const getUsers = async () => {\r\n        const fetchOptions = {\r\n            method: 'GET',\r\n        };\r\n        try {\r\n            return await doFetch('/users', fetchOptions);\r\n        } catch (e) {\r\n            throw new Error(e.message);\r\n        }\r\n    };\r\n\r\n    const getUserAvailable = async (username: String) => {\r\n        try {\r\n            return await doFetch('/users/username/' + username);\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const register = async (inputs: Object) => {\r\n        const fetchOptions = {\r\n            method: 'POST',\r\n            body: JSON.stringify(inputs),\r\n        };\r\n        try {\r\n            return await doFetch('/user', fetchOptions);\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    return { getUsers, getUserAvailable, register };\r\n};\r\n\r\nexport { useUsers };"]},"metadata":{},"sourceType":"module"}