{"ast":null,"code":"var _jsxFileName = \"/Users/tommivainio/Projektit/chatApp/my-app/src/components/threadButton.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Grid, ListItem, ListItemText, makeStyles, Typography } from \"@material-ui/core\";\nimport { useContext, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { WebsocketContext } from \"../contexts/websocketContext\";\nimport { useChats, useUsers } from '../hooks/apiHooks';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  text: {\n    color: 'white',\n    width: '100%',\n    padding: '1rem'\n  },\n  inline: {\n    display: 'inline'\n  },\n  lastMessage: {\n    display: 'block',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    fontSize: '0.7rem'\n  },\n  timestamp: {\n    fontSize: '0.5rem',\n    marginLeft: '2rem'\n  },\n  button: {\n    width: '100%',\n    maxWidth: '30vw',\n    padding: '0 0.7rem',\n    borderBottom: '1px solid #5F4B8BFF',\n    cursor: 'pointer',\n    '&:hover': {\n      background: \"#f0f0f0\"\n    },\n    [theme.breakpoints.down(600)]: {\n      maxWidth: 'none',\n      width: '100vw'\n    }\n  }\n}));\n\nconst ThreadButton = ({\n  id,\n  setThreadOpen,\n  setThreadId,\n  threadOpen,\n  threadId,\n  updateThreadButtonInfos\n}) => {\n  _s();\n\n  const {\n    getThreadName,\n    getLastMessage\n  } = useChats();\n  const {\n    getUsernameById\n  } = useUsers();\n  const [name, setName] = useState('');\n  const [lastMessage, setLastMessage] = useState({\n    username: '',\n    contents: '',\n    timestamp: ''\n  });\n  const {\n    websocket\n  } = useContext(WebsocketContext);\n  const classes = useStyles();\n  useEffect(() => {\n    (async () => {\n      try {\n        const threadName = await getThreadName(id);\n        setName(threadName);\n        const lastMessageData = await getLastMessage(id);\n\n        if (lastMessageData.length !== 0) {\n          const username = await getUsernameById(lastMessageData[0].user_id);\n          const now = moment().startOf('day');\n          const formatedDate = moment(lastMessageData[0].timestamp).startOf('day');\n          const difference = now.diff(formatedDate, 'days');\n          let formatedTime;\n\n          if (difference === 0) {\n            const d = new Date(lastMessageData[0].timestamp);\n            let hours = d.getHours().toString();\n            let minutes = d.getMinutes().toString();\n\n            if (d.getHours() < 10) {\n              hours = '0' + hours;\n            }\n\n            if (d.getMinutes() < 10) {\n              minutes = '0' + minutes;\n            }\n\n            formatedTime = hours + '.' + minutes;\n          } else if (difference === 1) {\n            formatedTime = 'Yesterday';\n          } else {\n            formatedTime = moment(lastMessageData[0].timestamp).format('DD.MM.YYYY');\n          }\n\n          const lastMessageObject = {\n            username: username.username + ':',\n            contents: lastMessageData[0].contents,\n            timestamp: formatedTime\n          };\n          setLastMessage(lastMessageObject);\n        } else {\n          const noLastMessageObject = {\n            username: 'No messages yet.',\n            contents: '',\n            timestamp: ''\n          };\n          setLastMessage(noLastMessageObject);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [id, updateThreadButtonInfos]);\n\n  const openThread = () => {\n    try {\n      if (!threadOpen) {\n        setThreadOpen(true);\n        setThreadId(id);\n      } else {\n        if (threadId === id) {\n          setThreadOpen(false);\n          setThreadId(0);\n        } else {\n          setThreadId(id);\n        }\n\n        if (websocket !== undefined) {\n          websocket.close();\n        }\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ListItem, {\n      onClick: openThread,\n      className: classes.button,\n      children: /*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            justify: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              component: \"h1\",\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"span\",\n              variant: \"subtitle1\",\n              className: classes.timestamp,\n              children: lastMessage.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }, this)\n        }, void 0, false),\n        secondary: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            component: \"span\",\n            variant: \"body2\",\n            className: classes.lastMessage,\n            children: [lastMessage.username, \" \", lastMessage.contents]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 29\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(ThreadButton, \"lCM+Bki/vTLUnvTorn/ceH4Utf4=\", false, function () {\n  return [useChats, useUsers, useStyles];\n});\n\n_c = ThreadButton;\nexport default ThreadButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreadButton\");","map":{"version":3,"sources":["/Users/tommivainio/Projektit/chatApp/my-app/src/components/threadButton.tsx"],"names":["Grid","ListItem","ListItemText","makeStyles","Typography","useContext","useState","useEffect","WebsocketContext","useChats","useUsers","moment","useStyles","theme","text","color","width","padding","inline","display","lastMessage","overflow","textOverflow","whiteSpace","fontSize","timestamp","marginLeft","button","maxWidth","borderBottom","cursor","background","breakpoints","down","ThreadButton","id","setThreadOpen","setThreadId","threadOpen","threadId","updateThreadButtonInfos","getThreadName","getLastMessage","getUsernameById","name","setName","setLastMessage","username","contents","websocket","classes","threadName","lastMessageData","length","user_id","now","startOf","formatedDate","difference","diff","formatedTime","d","Date","hours","getHours","toString","minutes","getMinutes","format","lastMessageObject","noLastMessageObject","e","console","log","message","openThread","undefined","close"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { Button, Grid, ListItem, ListItemText, makeStyles, Typography } from \"@material-ui/core\";\r\nimport { useContext, useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { WebsocketContext } from \"../contexts/websocketContext\";\r\nimport { useChats, useUsers } from '../hooks/apiHooks';\r\nimport moment from 'moment';\r\n\r\ninterface propType {\r\n    id: number,\r\n    setThreadOpen: Function,\r\n    setThreadId: Function,\r\n    threadOpen: Boolean,\r\n    threadId: number,\r\n    updateThreadButtonInfos: number,\r\n}\r\n\r\ninterface lastMessageObject {\r\n    username: string,\r\n    contents: string,\r\n    timestamp: any,\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    text: {\r\n        color: 'white',\r\n        width: '100%',\r\n        padding: '1rem',\r\n    },\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    lastMessage: {\r\n        display: 'block',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n        fontSize: '0.7rem'\r\n    },\r\n    timestamp: {\r\n        fontSize: '0.5rem',\r\n        marginLeft: '2rem'\r\n    },\r\n    button: {\r\n        width: '100%',\r\n        maxWidth: '30vw',\r\n        padding: '0 0.7rem',\r\n        borderBottom: '1px solid #5F4B8BFF',\r\n        cursor: 'pointer',\r\n        '&:hover': {\r\n            background: \"#f0f0f0\",\r\n        },\r\n        [theme.breakpoints.down(600)]: {\r\n            maxWidth: 'none',\r\n            width: '100vw',\r\n        },\r\n    }\r\n}));\r\n\r\nconst ThreadButton = ({ id, setThreadOpen, setThreadId, threadOpen, threadId, updateThreadButtonInfos }: propType) => {\r\n    const { getThreadName, getLastMessage } = useChats();\r\n    const { getUsernameById } = useUsers();\r\n    const [name, setName] = useState('');\r\n    const [lastMessage, setLastMessage] = useState<lastMessageObject>({\r\n        username: '',\r\n        contents: '',\r\n        timestamp: ''\r\n    });\r\n    const { websocket } = useContext(WebsocketContext);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const threadName = await getThreadName(id)\r\n                setName(threadName)\r\n                const lastMessageData = await getLastMessage(id)\r\n                if (lastMessageData.length !== 0) {\r\n                    const username = await getUsernameById(lastMessageData[0].user_id);\r\n                    const now = moment().startOf('day')\r\n                    const formatedDate = moment(lastMessageData[0].timestamp).startOf('day');\r\n                    const difference = now.diff(formatedDate, 'days');\r\n                    let formatedTime;\r\n                    if (difference === 0) {\r\n                        const d = new Date(lastMessageData[0].timestamp);\r\n                        let hours = d.getHours().toString();\r\n                        let minutes = d.getMinutes().toString();\r\n                        if (d.getHours() < 10) {\r\n                            hours = '0' + hours;\r\n                        }\r\n                        if (d.getMinutes() < 10) {\r\n                            minutes = '0' + minutes;\r\n                        }\r\n                        formatedTime = hours + '.' + minutes;\r\n                    } else if (difference === 1) {\r\n                        formatedTime = 'Yesterday';\r\n                    } else {\r\n                        formatedTime = moment(lastMessageData[0].timestamp).format('DD.MM.YYYY');\r\n                    }\r\n\r\n                    const lastMessageObject = {\r\n                        username: username.username + ':',\r\n                        contents: lastMessageData[0].contents,\r\n                        timestamp: formatedTime,\r\n                    }\r\n                    setLastMessage(lastMessageObject);\r\n                } else {\r\n                    const noLastMessageObject = {\r\n                        username: 'No messages yet.',\r\n                        contents: '',\r\n                        timestamp: '',\r\n                    }\r\n                    setLastMessage(noLastMessageObject);\r\n                }\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        })();\r\n    }, [id, updateThreadButtonInfos]);\r\n\r\n    const openThread = () => {\r\n        try {\r\n            if (!threadOpen) {\r\n                setThreadOpen(true)\r\n                setThreadId(id)\r\n            } else {\r\n                if (threadId === id) {\r\n                    setThreadOpen(false)\r\n                    setThreadId(0)\r\n                } else {\r\n                    setThreadId(id)\r\n                }\r\n                if (websocket !== undefined) {\r\n                    websocket.close();\r\n                }\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ListItem onClick={openThread} className={classes.button} >\r\n                <ListItemText\r\n                    primary={\r\n                        <>\r\n                            <Grid container justify=\"space-between\">\r\n                                <Typography\r\n                                    component=\"h1\"\r\n                                >\r\n                                    {name}\r\n                                </Typography>\r\n                                <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"subtitle1\"\r\n                                    className={classes.timestamp}\r\n                                >\r\n                                    {lastMessage.timestamp}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </>\r\n                    }\r\n                    secondary={\r\n                        <>\r\n                            <Typography\r\n                                component=\"span\"\r\n                                variant=\"body2\"\r\n                                className={classes.lastMessage}\r\n                            >\r\n                                {lastMessage.username} {lastMessage.contents}\r\n                            </Typography>\r\n                        </>\r\n                    }\r\n                />\r\n            </ListItem>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ThreadButton"]},"metadata":{},"sourceType":"module"}