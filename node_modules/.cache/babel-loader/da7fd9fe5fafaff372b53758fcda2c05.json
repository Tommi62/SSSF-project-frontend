{"ast":null,"code":"var _jsxFileName = \"/Users/tommivainio/Desktop/chatApp/my-app/src/components/threadButton.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Button, Grid, ListItemText, makeStyles, Typography } from \"@material-ui/core\";\nimport { useContext, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { WebsocketContext } from \"../contexts/websocketContext\";\nimport { useChats } from '../hooks/apiHooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => ({\n  message: {\n    backgroundColor: 'lightGrey',\n    marginBottom: '0.5rem',\n    borderRadius: '1rem',\n    padding: '0.5rem'\n  },\n  text: {\n    color: 'white',\n    width: '100%',\n    padding: '1rem'\n  },\n  inline: {\n    display: 'inline'\n  },\n  inlineOwn: {\n    display: 'inline',\n    color: 'white'\n  },\n  timestamp: {\n    fontSize: '0.7rem',\n    marginLeft: '2rem'\n  },\n  button: {\n    width: '100%',\n    display: 'inline-block',\n    padding: '0 2rem',\n    minHeight: 0,\n    minWidth: 0\n  }\n}));\n\nconst ThreadButton = ({\n  id,\n  setThreadOpen,\n  setThreadId,\n  threadOpen\n}) => {\n  _s();\n\n  const {\n    getThreadName\n  } = useChats();\n  const [name, setName] = useState('');\n  const {\n    websocket\n  } = useContext(WebsocketContext);\n  const classes = useStyles();\n  useEffect(() => {\n    (async () => {\n      try {\n        console.log('THREADBUTTON: ', id);\n        const threadName = await getThreadName(id);\n        console.log('THREADNAME: ', threadName);\n        setName(threadName);\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, []);\n\n  const openThread = () => {\n    if (!threadOpen) {\n      setThreadOpen(true);\n      setThreadId(id);\n    } else {\n      setThreadOpen(false);\n\n      if (websocket !== undefined) {\n        websocket.close();\n      }\n\n      setThreadId(0);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      className: classes.button,\n      onClick: openThread,\n      color: \"primary\",\n      variant: \"contained\",\n      children: /*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            justify: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              component: \"h2\",\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"span\",\n              variant: \"subtitle1\",\n              className: classes.timestamp,\n              children: \"hello\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }, this)\n        }, void 0, false),\n        secondary: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            justify: \"flex-start\",\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"span\",\n              variant: \"body2\",\n              className: classes.inlineOwn,\n              children: \"hello2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(ThreadButton, \"EVS0BlsY9sM1qWiMFH3IVjZTSIs=\", false, function () {\n  return [useChats, useStyles];\n});\n\n_c = ThreadButton;\nexport default ThreadButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreadButton\");","map":{"version":3,"sources":["/Users/tommivainio/Desktop/chatApp/my-app/src/components/threadButton.tsx"],"names":["Button","Grid","ListItemText","makeStyles","Typography","useContext","useState","useEffect","WebsocketContext","useChats","useStyles","message","backgroundColor","marginBottom","borderRadius","padding","text","color","width","inline","display","inlineOwn","timestamp","fontSize","marginLeft","button","minHeight","minWidth","ThreadButton","id","setThreadOpen","setThreadId","threadOpen","getThreadName","name","setName","websocket","classes","console","log","threadName","e","openThread","undefined","close"],"mappings":";;;AAAA;AACA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,YAAvB,EAAqCC,UAArC,EAAiDC,UAAjD,QAAmE,mBAAnE;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,QAAT,QAAyB,mBAAzB;;;AASA,MAAMC,SAAS,GAAGP,UAAU,CAAC,OAAO;AAChCQ,EAAAA,OAAO,EAAE;AACLC,IAAAA,eAAe,EAAE,WADZ;AAELC,IAAAA,YAAY,EAAE,QAFT;AAGLC,IAAAA,YAAY,EAAE,MAHT;AAILC,IAAAA,OAAO,EAAE;AAJJ,GADuB;AAOhCC,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAE,OADL;AAEFC,IAAAA,KAAK,EAAE,MAFL;AAGFH,IAAAA,OAAO,EAAE;AAHP,GAP0B;AAYhCI,EAAAA,MAAM,EAAE;AACJC,IAAAA,OAAO,EAAE;AADL,GAZwB;AAehCC,EAAAA,SAAS,EAAE;AACPD,IAAAA,OAAO,EAAE,QADF;AAEPH,IAAAA,KAAK,EAAE;AAFA,GAfqB;AAmBhCK,EAAAA,SAAS,EAAE;AACPC,IAAAA,QAAQ,EAAE,QADH;AAEPC,IAAAA,UAAU,EAAE;AAFL,GAnBqB;AAuBhCC,EAAAA,MAAM,EAAE;AACJP,IAAAA,KAAK,EAAE,MADH;AAEJE,IAAAA,OAAO,EAAE,cAFL;AAGJL,IAAAA,OAAO,EAAE,QAHL;AAIJW,IAAAA,SAAS,EAAE,CAJP;AAKJC,IAAAA,QAAQ,EAAE;AALN;AAvBwB,CAAP,CAAD,CAA5B;;AAgCA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,aAAN;AAAqBC,EAAAA,WAArB;AAAkCC,EAAAA;AAAlC,CAAD,KAA8D;AAAA;;AAC/E,QAAM;AAAEC,IAAAA;AAAF,MAAoBxB,QAAQ,EAAlC;AACA,QAAM,CAACyB,IAAD,EAAOC,OAAP,IAAkB7B,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAE8B,IAAAA;AAAF,MAAgB/B,UAAU,CAACG,gBAAD,CAAhC;AACA,QAAM6B,OAAO,GAAG3B,SAAS,EAAzB;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAY;AACT,UAAI;AACA+B,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BV,EAA9B;AACA,cAAMW,UAAU,GAAG,MAAMP,aAAa,CAACJ,EAAD,CAAtC;AACAS,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BC,UAA5B;AACAL,QAAAA,OAAO,CAACK,UAAD,CAAP;AACH,OALD,CAKE,OAAOC,CAAP,EAAU;AACRH,QAAAA,OAAO,CAACC,GAAR,CAAYE,CAAC,CAAC9B,OAAd;AACH;AACJ,KATD;AAUH,GAXQ,EAWN,EAXM,CAAT;;AAaA,QAAM+B,UAAU,GAAG,MAAM;AACrB,QAAI,CAACV,UAAL,EAAiB;AACbF,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAC,MAAAA,WAAW,CAACF,EAAD,CAAX;AACH,KAHD,MAGO;AACHC,MAAAA,aAAa,CAAC,KAAD,CAAb;;AACA,UAAIM,SAAS,KAAKO,SAAlB,EAA6B;AACzBP,QAAAA,SAAS,CAACQ,KAAV;AACH;;AACDb,MAAAA,WAAW,CAAC,CAAD,CAAX;AACH;AACJ,GAXD;;AAaA,sBACI;AAAA,2BACI,QAAC,MAAD;AAAQ,MAAA,SAAS,EAAEM,OAAO,CAACZ,MAA3B;AAAmC,MAAA,OAAO,EAAEiB,UAA5C;AAAwD,MAAA,KAAK,EAAC,SAA9D;AAAwE,MAAA,OAAO,EAAC,WAAhF;AAAA,6BACI,QAAC,YAAD;AACI,QAAA,OAAO,eACH;AAAA,iCACI,QAAC,IAAD;AAAM,YAAA,SAAS,MAAf;AAAgB,YAAA,OAAO,EAAC,eAAxB;AAAA,oCACI,QAAC,UAAD;AACI,cAAA,SAAS,EAAC,IADd;AAAA,wBAGKR;AAHL;AAAA;AAAA;AAAA;AAAA,oBADJ,eAMI,QAAC,UAAD;AACI,cAAA,SAAS,EAAC,MADd;AAEI,cAAA,OAAO,EAAC,WAFZ;AAGI,cAAA,SAAS,EAAEG,OAAO,CAACf,SAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,yBAFR;AAmBI,QAAA,SAAS,eACL;AAAA,iCACI,QAAC,IAAD;AAAM,YAAA,SAAS,MAAf;AAAgB,YAAA,OAAO,EAAC,YAAxB;AAAA,mCACI,QAAC,UAAD;AACI,cAAA,SAAS,EAAC,MADd;AAEI,cAAA,OAAO,EAAC,OAFZ;AAGI,cAAA,SAAS,EAAEe,OAAO,CAAChB,SAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AApBR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAuCH,CAvED;;GAAMO,Y;UACwBnB,Q,EAGVC,S;;;KAJdkB,Y;AAyEN,eAAeA,YAAf","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { Button, Grid, ListItemText, makeStyles, Typography } from \"@material-ui/core\";\r\nimport { useContext, useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { WebsocketContext } from \"../contexts/websocketContext\";\r\nimport { useChats } from '../hooks/apiHooks';\r\n\r\ninterface propType {\r\n    id: number,\r\n    setThreadOpen: Function,\r\n    setThreadId: Function,\r\n    threadOpen: Boolean,\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    message: {\r\n        backgroundColor: 'lightGrey',\r\n        marginBottom: '0.5rem',\r\n        borderRadius: '1rem',\r\n        padding: '0.5rem',\r\n    },\r\n    text: {\r\n        color: 'white',\r\n        width: '100%',\r\n        padding: '1rem',\r\n    },\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    inlineOwn: {\r\n        display: 'inline',\r\n        color: 'white',\r\n    },\r\n    timestamp: {\r\n        fontSize: '0.7rem',\r\n        marginLeft: '2rem'\r\n    },\r\n    button: {\r\n        width: '100%',\r\n        display: 'inline-block',\r\n        padding: '0 2rem',\r\n        minHeight: 0,\r\n        minWidth: 0,\r\n    }\r\n}));\r\n\r\nconst ThreadButton = ({ id, setThreadOpen, setThreadId, threadOpen }: propType) => {\r\n    const { getThreadName } = useChats();\r\n    const [name, setName] = useState('');\r\n    const { websocket } = useContext(WebsocketContext);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                console.log('THREADBUTTON: ', id)\r\n                const threadName = await getThreadName(id)\r\n                console.log('THREADNAME: ', threadName)\r\n                setName(threadName)\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    const openThread = () => {\r\n        if (!threadOpen) {\r\n            setThreadOpen(true)\r\n            setThreadId(id)\r\n        } else {\r\n            setThreadOpen(false)\r\n            if (websocket !== undefined) {\r\n                websocket.close();\r\n            }\r\n            setThreadId(0)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button className={classes.button} onClick={openThread} color=\"primary\" variant=\"contained\">\r\n                <ListItemText\r\n                    primary={\r\n                        <>\r\n                            <Grid container justify=\"space-between\">\r\n                                <Typography\r\n                                    component=\"h2\"\r\n                                >\r\n                                    {name}\r\n                                </Typography>\r\n                                <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"subtitle1\"\r\n                                    className={classes.timestamp}\r\n                                >\r\n                                    hello\r\n                                </Typography>\r\n                            </Grid>\r\n                        </>\r\n                    }\r\n                    secondary={\r\n                        <>\r\n                            <Grid container justify=\"flex-start\">\r\n                                <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"body2\"\r\n                                    className={classes.inlineOwn}\r\n                                >\r\n                                    hello2\r\n                                </Typography>\r\n                            </Grid>\r\n                        </>\r\n                    }\r\n                />\r\n            </Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ThreadButton"]},"metadata":{},"sourceType":"module"}