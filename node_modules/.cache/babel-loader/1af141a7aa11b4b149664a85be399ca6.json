{"ast":null,"code":"import _regeneratorRuntime from\"/Users/tommivainio/Projektit/chatApp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/tommivainio/Projektit/chatApp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/tommivainio/Projektit/chatApp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"/Users/tommivainio/Projektit/chatApp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import{Button,FormControl,Grid,InputLabel,makeStyles,MenuItem,Select,Typography}from\"@material-ui/core\";import{useState}from\"react\";import{useContext,useEffect}from\"react\";import{TextValidator,ValidatorForm}from\"react-material-ui-form-validator\";import{MediaContext}from\"../contexts/mediaContext\";import{useUsers,useChats}from\"../hooks/apiHooks\";import useForm from\"../hooks/formHooks\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var useStyles=makeStyles(function(theme){return{select:{minWidth:'5rem'},formControl:{marginTop:'0.5rem'},header:_defineProperty({textAlign:'center'},theme.breakpoints.down(600),{fontSize:'1.3rem'}),createButton:{backgroundColor:'#5F4B8BFF',marginTop:'2rem',marginBottom:'0.5rem','&:hover':{backgroundColor:'#7159a6'}}};});var ThreadForm=function ThreadForm(_ref){var websocket=_ref.websocket,setModalOpen=_ref.setModalOpen,setThreadOpen=_ref.setThreadOpen,setThreadId=_ref.setThreadId;var classes=useStyles();var _useContext=useContext(MediaContext),user=_useContext.user;var _useChats=useChats(),createNewChatThread=_useChats.createNewChatThread;var _useUsers=useUsers(),getUsers=_useUsers.getUsers;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),usersArray=_useState2[0],setUsersArray=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),newThreadId=_useState4[0],setNewThreadId=_useState4[1];var validators={threadName:['required','minStringLength: 3','maxStringLength: 25']};var errorMessages={threadName:['Required field','Minimum of 3 characters','Too many characters!']};var createNewThread=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var chatThreadObject,success;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;if(!(inputs.user2!=='')){_context.next=10;break;}chatThreadObject=JSON.stringify({name:inputs.threadName,user_id:user,user2_id:inputs.user2});_context.next=5;return createNewChatThread(chatThreadObject);case 5:success=_context.sent;console.log('SUCCESS: ',success.success);setNewThreadId(success.id);_context.next=11;break;case 10:alert('Choose a user with whom you want to chat!');case 11:_context.next=16;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](0);console.log(_context.t0.message);case 16:case\"end\":return _context.stop();}}},_callee,null,[[0,13]]);}));return function createNewThread(){return _ref2.apply(this,arguments);};}();var _useForm=useForm(createNewThread,{threadName:'',user2:''}),inputs=_useForm.inputs,handleInputChange=_useForm.handleInputChange,handleSubmit=_useForm.handleSubmit;useEffect(function(){try{if(newThreadId!==0){console.log('NEWTHREADID',newThreadId);var webSocketUpdate={type:'newThread',user_id:user,user2_id:inputs.user2,thread_id:newThreadId};if(websocket!==undefined){websocket.send(JSON.stringify(webSocketUpdate));setThreadOpen(true);setThreadId(newThreadId);setModalOpen(false);}}}catch(e){console.log(e.message);}},[newThreadId]);useEffect(function(){_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var users,arrayForUsers,i;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return getUsers();case 3:users=_context2.sent;arrayForUsers=[];for(i=0;i<users.length;i++){if(users[i].id!==user){arrayForUsers.push(users[i]);}}setUsersArray(arrayForUsers);_context2.next=12;break;case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0.message);case 12:case\"end\":return _context2.stop();}}},_callee2,null,[[0,9]]);}))();},[]);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(Grid,{container:true,justifyContent:\"center\",direction:\"column\",children:[/*#__PURE__*/_jsx(Typography,{variant:\"h4\",className:classes.header,children:\"Create a new chat thread\"}),/*#__PURE__*/_jsxs(ValidatorForm,{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(Grid,{container:true,item:true,justifyContent:\"center\",children:/*#__PURE__*/_jsx(TextValidator,{type:\"text\",name:\"threadName\",label:\"Thread name\",onChange:handleInputChange,value:inputs.threadName,validators:validators.threadName,errorMessages:errorMessages.threadName})}),/*#__PURE__*/_jsx(Grid,{container:true,item:true,justifyContent:\"center\",children:/*#__PURE__*/_jsxs(FormControl,{className:classes.formControl,children:[/*#__PURE__*/_jsx(InputLabel,{children:\"User\"}),/*#__PURE__*/_jsxs(Select,{name:\"user2\",value:inputs.user2,label:\"User\",onChange:handleInputChange,autoWidth:true,className:classes.select,children:[usersArray.map(function(item){return/*#__PURE__*/_jsx(MenuItem,{value:item.id,children:item.username});}),' ']})]})}),/*#__PURE__*/_jsx(Grid,{container:true,item:true,justifyContent:\"center\",children:/*#__PURE__*/_jsx(Button,{className:classes.createButton,color:\"primary\",type:\"submit\",variant:\"contained\",children:\"Create\"})})]})]})});};export default ThreadForm;","map":{"version":3,"sources":["/Users/tommivainio/Projektit/chatApp/my-app/src/components/threadForm.tsx"],"names":["Button","FormControl","Grid","InputLabel","makeStyles","MenuItem","Select","Typography","useState","useContext","useEffect","TextValidator","ValidatorForm","MediaContext","useUsers","useChats","useForm","useStyles","theme","select","minWidth","formControl","marginTop","header","textAlign","breakpoints","down","fontSize","createButton","backgroundColor","marginBottom","ThreadForm","websocket","setModalOpen","setThreadOpen","setThreadId","classes","user","createNewChatThread","getUsers","usersArray","setUsersArray","newThreadId","setNewThreadId","validators","threadName","errorMessages","createNewThread","inputs","user2","chatThreadObject","JSON","stringify","name","user_id","user2_id","success","console","log","id","alert","message","handleInputChange","handleSubmit","webSocketUpdate","type","thread_id","undefined","send","e","users","arrayForUsers","i","length","push","map","item","username"],"mappings":"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","sourcesContent":["import { Button, FormControl, Grid, InputLabel, makeStyles, MenuItem, Select, Typography } from \"@material-ui/core\"\nimport { useState } from \"react\";\nimport { useContext, useEffect } from \"react\";\nimport { TextValidator, ValidatorForm } from \"react-material-ui-form-validator\"\nimport { MediaContext } from \"../contexts/mediaContext\";\nimport { useUsers, useChats } from \"../hooks/apiHooks\";\nimport useForm from \"../hooks/formHooks\";\n\ninterface propTypes {\n    websocket: WebSocket,\n    setModalOpen: Function,\n    setThreadOpen: Function,\n    setThreadId: Function,\n}\n\ninterface usersArrayType {\n    id: number,\n    username: string,\n}\n\nconst useStyles = makeStyles((theme) => ({\n    select: {\n        minWidth: '5rem',\n    },\n    formControl: {\n        marginTop: '0.5rem',\n    },\n    header: {\n        textAlign: 'center',\n        [theme.breakpoints.down(600)]: {\n            fontSize: '1.3rem',\n        },\n    },\n    createButton: {\n        backgroundColor: '#5F4B8BFF',\n        marginTop: '2rem',\n        marginBottom: '0.5rem',\n        '&:hover': {\n            backgroundColor: '#7159a6',\n        },\n    }\n}));\n\nconst ThreadForm = ({ websocket, setModalOpen, setThreadOpen, setThreadId }: propTypes) => {\n    const classes = useStyles();\n    const { user } = useContext(MediaContext);\n    const { createNewChatThread } = useChats();\n    const { getUsers } = useUsers();\n    const [usersArray, setUsersArray] = useState<usersArrayType[]>([]);\n    const [newThreadId, setNewThreadId] = useState(0);\n\n    const validators = {\n        threadName: ['required', 'minStringLength: 3', 'maxStringLength: 25'],\n    };\n\n    const errorMessages = {\n        threadName: [\n            'Required field',\n            'Minimum of 3 characters',\n            'Too many characters!',\n        ]\n    };\n\n    const createNewThread = async () => {\n        try {\n            if (inputs.user2 !== '') {\n                const chatThreadObject = JSON.stringify({\n                    name: inputs.threadName,\n                    user_id: user,\n                    user2_id: inputs.user2\n\n                });\n                const success = await createNewChatThread(chatThreadObject);\n                console.log('SUCCESS: ', success.success)\n                setNewThreadId(success.id);\n            } else {\n                alert('Choose a user with whom you want to chat!');\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n    }\n\n    const { inputs, handleInputChange, handleSubmit } = useForm(createNewThread, {\n        threadName: '',\n        user2: '',\n    });\n\n    useEffect(() => {\n        try {\n            if (newThreadId !== 0) {\n                console.log('NEWTHREADID', newThreadId);\n                const webSocketUpdate = {\n                    type: 'newThread',\n                    user_id: user,\n                    user2_id: inputs.user2,\n                    thread_id: newThreadId,\n                }\n                if (websocket !== undefined) {\n                    websocket.send(JSON.stringify(webSocketUpdate));\n                    setThreadOpen(true);\n                    setThreadId(newThreadId);\n                    setModalOpen(false);\n                }\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n    }, [newThreadId]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const users = await getUsers();\n                let arrayForUsers = [];\n                for (let i = 0; i < users.length; i++) {\n                    if (users[i].id !== user) {\n                        arrayForUsers.push(users[i]);\n                    }\n                }\n                setUsersArray(arrayForUsers);\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, []);\n\n    return (\n        <>\n            <Grid container justifyContent=\"center\" direction=\"column\">\n                <Typography variant=\"h4\" className={classes.header}>Create a new chat thread</Typography>\n                <ValidatorForm onSubmit={handleSubmit}>\n                    <Grid container item justifyContent=\"center\">\n                        <TextValidator\n                            type=\"text\"\n                            name=\"threadName\"\n                            label=\"Thread name\"\n                            onChange={handleInputChange}\n                            value={inputs.threadName}\n                            validators={validators.threadName}\n                            errorMessages={errorMessages.threadName}\n                        />\n                    </Grid>\n                    <Grid container item justifyContent=\"center\">\n                        <FormControl className={classes.formControl}>\n                            <InputLabel>User</InputLabel>\n                            <Select\n                                name=\"user2\"\n                                value={inputs.user2}\n                                label=\"User\"\n                                onChange={handleInputChange}\n                                autoWidth\n                                className={classes.select}\n                            >\n                                {usersArray.map((item) => (\n                                    <MenuItem value={item.id}>{item.username}</MenuItem>\n                                ))}{' '}\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                    <Grid container item justifyContent=\"center\">\n                        <Button\n                            className={classes.createButton}\n                            color=\"primary\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                        >\n                            Create\n                        </Button>\n                    </Grid>\n                </ValidatorForm>\n            </Grid>\n        </>\n    )\n}\n\nexport default ThreadForm;"]},"metadata":{},"sourceType":"module"}