{"ast":null,"code":"var _jsxFileName = \"/Users/tommivainio/Projektit/chatApp/my-app/src/components/threadButton.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Grid, ListItem, ListItemText, makeStyles, Typography } from \"@material-ui/core\";\nimport { useContext, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { WebsocketContext } from \"../contexts/websocketContext\";\nimport { useChats, useUsers } from '../hooks/apiHooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => ({\n  text: {\n    color: 'white',\n    width: '100%',\n    padding: '1rem'\n  },\n  inline: {\n    display: 'inline'\n  },\n  lastMessage: {\n    display: 'block',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    fontSize: '0.7rem'\n  },\n  timestamp: {\n    fontSize: '0.5rem',\n    marginLeft: '2rem'\n  },\n  button: {\n    width: '100%',\n    maxWidth: '30vw',\n    padding: '0 0.7rem',\n    borderBottom: '1px solid #5F4B8BFF',\n    cursor: 'pointer',\n    '&:hover': {\n      background: \"#f0f0f0\"\n    }\n  }\n}));\n\nconst ThreadButton = ({\n  id,\n  setThreadOpen,\n  setThreadId,\n  threadOpen,\n  threadId,\n  updateThreadButtonInfos\n}) => {\n  _s();\n\n  const {\n    getThreadName,\n    getLastMessage\n  } = useChats();\n  const {\n    getUsernameById\n  } = useUsers();\n  const [name, setName] = useState('');\n  const [lastMessage, setLastMessage] = useState({\n    username: '',\n    contents: '',\n    timestamp: ''\n  });\n  const {\n    websocket\n  } = useContext(WebsocketContext);\n  const classes = useStyles();\n  useEffect(() => {\n    (async () => {\n      try {\n        const threadName = await getThreadName(id);\n        setName(threadName);\n        const lastMessageData = await getLastMessage(id);\n\n        if (lastMessageData.length !== 0) {\n          const username = await getUsernameById(lastMessageData[0].user_id);\n          const d = new Date(lastMessageData[0].timestamp);\n          let hours = d.getHours().toString();\n          let minutes = d.getMinutes().toString();\n\n          if (d.getHours() < 10) {\n            hours = '0' + hours;\n          }\n\n          if (d.getMinutes() < 10) {\n            minutes = '0' + minutes;\n          }\n\n          const formatedTime = hours + '.' + minutes;\n          const lastMessageObject = {\n            username: username.username + ':',\n            contents: lastMessageData[0].contents,\n            timestamp: formatedTime\n          };\n          setLastMessage(lastMessageObject);\n        } else {\n          const noLastMessageObject = {\n            username: 'No messages yet.',\n            contents: '',\n            timestamp: ''\n          };\n          setLastMessage(noLastMessageObject);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [id]);\n\n  const openThread = () => {\n    if (!threadOpen) {\n      setThreadOpen(true);\n      setThreadId(id);\n    } else {\n      if (threadId === id) {\n        setThreadOpen(false);\n        setThreadId(0);\n      } else {\n        setThreadId(id);\n      }\n\n      if (websocket !== undefined) {\n        websocket.close();\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ListItem, {\n      onClick: openThread,\n      className: classes.button,\n      children: /*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            justify: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              component: \"h1\",\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"span\",\n              variant: \"subtitle1\",\n              className: classes.timestamp,\n              children: lastMessage.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 29\n          }, this)\n        }, void 0, false),\n        secondary: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            component: \"span\",\n            variant: \"body2\",\n            className: classes.lastMessage,\n            children: [lastMessage.username, \" \", lastMessage.contents]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(ThreadButton, \"lCM+Bki/vTLUnvTorn/ceH4Utf4=\", false, function () {\n  return [useChats, useUsers, useStyles];\n});\n\n_c = ThreadButton;\nexport default ThreadButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreadButton\");","map":{"version":3,"sources":["/Users/tommivainio/Projektit/chatApp/my-app/src/components/threadButton.tsx"],"names":["Grid","ListItem","ListItemText","makeStyles","Typography","useContext","useState","useEffect","WebsocketContext","useChats","useUsers","useStyles","text","color","width","padding","inline","display","lastMessage","overflow","textOverflow","whiteSpace","fontSize","timestamp","marginLeft","button","maxWidth","borderBottom","cursor","background","ThreadButton","id","setThreadOpen","setThreadId","threadOpen","threadId","updateThreadButtonInfos","getThreadName","getLastMessage","getUsernameById","name","setName","setLastMessage","username","contents","websocket","classes","threadName","lastMessageData","length","user_id","d","Date","hours","getHours","toString","minutes","getMinutes","formatedTime","lastMessageObject","noLastMessageObject","e","console","log","message","openThread","undefined","close"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { Button, Grid, ListItem, ListItemText, makeStyles, Typography } from \"@material-ui/core\";\r\nimport { useContext, useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { WebsocketContext } from \"../contexts/websocketContext\";\r\nimport { useChats, useUsers } from '../hooks/apiHooks';\r\n\r\ninterface propType {\r\n    id: number,\r\n    setThreadOpen: Function,\r\n    setThreadId: Function,\r\n    threadOpen: Boolean,\r\n    threadId: number,\r\n    updateThreadButtonInfos: number,\r\n}\r\n\r\ninterface lastMessageObject {\r\n    username: string,\r\n    contents: string,\r\n    timestamp: any,\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    text: {\r\n        color: 'white',\r\n        width: '100%',\r\n        padding: '1rem',\r\n    },\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    lastMessage: {\r\n        display: 'block',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n        fontSize: '0.7rem'\r\n    },\r\n    timestamp: {\r\n        fontSize: '0.5rem',\r\n        marginLeft: '2rem'\r\n    },\r\n    button: {\r\n        width: '100%',\r\n        maxWidth: '30vw',\r\n        padding: '0 0.7rem',\r\n        borderBottom: '1px solid #5F4B8BFF',\r\n        cursor: 'pointer',\r\n        '&:hover': {\r\n            background: \"#f0f0f0\",\r\n        },\r\n    }\r\n}));\r\n\r\nconst ThreadButton = ({ id, setThreadOpen, setThreadId, threadOpen, threadId, updateThreadButtonInfos }: propType) => {\r\n    const { getThreadName, getLastMessage } = useChats();\r\n    const { getUsernameById } = useUsers();\r\n    const [name, setName] = useState('');\r\n    const [lastMessage, setLastMessage] = useState<lastMessageObject>({\r\n        username: '',\r\n        contents: '',\r\n        timestamp: ''\r\n    });\r\n    const { websocket } = useContext(WebsocketContext);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const threadName = await getThreadName(id)\r\n                setName(threadName)\r\n                const lastMessageData = await getLastMessage(id)\r\n                if (lastMessageData.length !== 0) {\r\n                    const username = await getUsernameById(lastMessageData[0].user_id);\r\n\r\n                    const d = new Date(lastMessageData[0].timestamp);\r\n                    let hours = d.getHours().toString();\r\n                    let minutes = d.getMinutes().toString();\r\n                    if (d.getHours() < 10) {\r\n                        hours = '0' + hours;\r\n                    }\r\n                    if (d.getMinutes() < 10) {\r\n                        minutes = '0' + minutes;\r\n                    }\r\n                    const formatedTime = hours + '.' + minutes;\r\n\r\n                    const lastMessageObject = {\r\n                        username: username.username + ':',\r\n                        contents: lastMessageData[0].contents,\r\n                        timestamp: formatedTime,\r\n                    }\r\n                    setLastMessage(lastMessageObject);\r\n                } else {\r\n                    const noLastMessageObject = {\r\n                        username: 'No messages yet.',\r\n                        contents: '',\r\n                        timestamp: '',\r\n                    }\r\n                    setLastMessage(noLastMessageObject);\r\n                }\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        })();\r\n    }, [id]);\r\n\r\n    const openThread = () => {\r\n        if (!threadOpen) {\r\n            setThreadOpen(true)\r\n            setThreadId(id)\r\n        } else {\r\n            if (threadId === id) {\r\n                setThreadOpen(false)\r\n                setThreadId(0)\r\n            } else {\r\n                setThreadId(id)\r\n            }\r\n            if (websocket !== undefined) {\r\n                websocket.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ListItem onClick={openThread} className={classes.button} >\r\n                <ListItemText\r\n                    primary={\r\n                        <>\r\n                            <Grid container justify=\"space-between\">\r\n                                <Typography\r\n                                    component=\"h1\"\r\n                                >\r\n                                    {name}\r\n                                </Typography>\r\n                                <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"subtitle1\"\r\n                                    className={classes.timestamp}\r\n                                >\r\n                                    {lastMessage.timestamp}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </>\r\n                    }\r\n                    secondary={\r\n                        <>\r\n                            <Typography\r\n                                component=\"span\"\r\n                                variant=\"body2\"\r\n                                className={classes.lastMessage}\r\n                            >\r\n                                {lastMessage.username} {lastMessage.contents}\r\n                            </Typography>\r\n                        </>\r\n                    }\r\n                />\r\n            </ListItem>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ThreadButton"]},"metadata":{},"sourceType":"module"}