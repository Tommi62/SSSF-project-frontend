{"ast":null,"code":"var _jsxFileName = \"/Users/tommivainio/Projektit/chatApp/my-app/src/components/thread.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Grid, List, TextField } from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport { IconButton } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport { MediaContext } from '../contexts/mediaContext';\nimport { useChats, useUsers } from '../hooks/apiHooks';\nimport Message from '../components/message';\nimport useWindowDimensions from '../hooks/windowDimensionsHook';\nimport { useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Thread = ({\n  messages,\n  id,\n  websocket,\n  messageAmount,\n  setMessageAmount\n}) => {\n  _s();\n\n  const [message, setMessage] = useState('');\n  const [messageId, setMessageId] = useState(0);\n  const [showButton, setShowButton] = useState(false);\n  const [usernames, setUsernames] = useState([]);\n  const [moreMessages, setMoreMessages] = useState([]);\n  const [loadMore, setLoadMore] = useState(false);\n  const [messageScroll, setMessageScroll] = useState(false);\n  const [currentThread, setCurrentThread] = useState(0);\n  const [date, setDate] = useState('');\n  const {\n    user\n  } = useContext(MediaContext);\n  const {\n    postMessage,\n    getUserIds,\n    getAllMessages\n  } = useChats();\n  const {\n    getUsernameById\n  } = useUsers();\n  const {\n    height\n  } = useWindowDimensions();\n  const heightCorrected = height - 64;\n  const messagesEndRef = useRef(null);\n  const messagesEndRef2 = useRef(null);\n\n  const scrollToBottom = number => {\n    if (number === 1) {\n      var _messagesEndRef$curre;\n\n      (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView();\n    } else {\n      var _messagesEndRef2$curr;\n\n      (_messagesEndRef2$curr = messagesEndRef2.current) === null || _messagesEndRef2$curr === void 0 ? void 0 : _messagesEndRef2$curr.scrollIntoView();\n      setMessageScroll(true);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        if (loadMore && !messageScroll) {\n          scrollToBottom(2);\n        } else {\n          scrollToBottom(1);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [messageId]);\n  useEffect(() => {\n    (async () => {\n      try {\n        if (currentThread !== id) {\n          setLoadMore(false);\n          setMessageScroll(false);\n          setMessageAmount(50);\n        }\n\n        setCurrentThread(id);\n        console.log('messageUpdate');\n\n        if (messages.length >= 50 && !loadMore) {\n          setShowButton(true);\n        } else {\n          setShowButton(false);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [messages]);\n  useEffect(() => {\n    (async () => {\n      try {\n        setUsernames([]);\n        console.log('USERNAMELIST');\n        const userIds = await getUserIds(id);\n        let usernameArray = [];\n\n        for (let i = 0; i < userIds.length; i++) {\n          const user = await getUsernameById(userIds[i].user_id);\n          const userObject = {\n            user_id: userIds[i].user_id,\n            username: user.username\n          };\n          usernameArray.push(userObject);\n        }\n\n        setUsernames(usernameArray);\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [id]);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const tzoffset = new Date().getTimezoneOffset() * 60000;\n    const localISOTime = new Date(Date.now() - tzoffset).toISOString().slice(0, -1);\n    console.log('TIMEST: ', localISOTime);\n    const messageObject = JSON.stringify({\n      contents: message,\n      timestamp: localISOTime,\n      user_id: user,\n      thread_id: id\n    });\n    const success = await postMessage(messageObject);\n    console.log('SUCCESS: ', success);\n    const webSocketUpdate = {\n      type: 'message',\n      contents: message,\n      timestamp: localISOTime,\n      user_id: user,\n      thread_id: id\n    };\n\n    if (websocket !== undefined) {\n      websocket.send(JSON.stringify(webSocketUpdate));\n    }\n\n    setMessage('');\n  };\n\n  const loadAllMessages = async () => {\n    let amount;\n\n    if (currentThread !== id) {\n      setMessageAmount(50);\n      amount = 50;\n    } else {\n      amount = messageAmount;\n    }\n\n    const allMessages = await getAllMessages(id);\n    console.log('MESSAGE AMOUNT', messageAmount, allMessages);\n    allMessages.splice(allMessages.length - amount, amount);\n    setMoreMessages(allMessages);\n    setLoadMore(true);\n    setShowButton(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justify: \"center\",\n      direction: \"column\",\n      style: {\n        height: heightCorrected\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        justify: \"center\",\n        style: {\n          padding: '2rem 6rem 1.5rem 6rem',\n          backgroundColor: '#E69A8DFF',\n          height: '90%',\n          overflowX: 'hidden',\n          overflowY: 'auto'\n        },\n        children: [loadMore && /*#__PURE__*/_jsxDEV(List, {\n          children: [moreMessages.map((item, index) => /*#__PURE__*/_jsxDEV(Message, {\n            message_id: item.id,\n            user_id: item.user_id,\n            contents: item.contents,\n            timestamp: item.timestamp,\n            setMessageId: setMessageId,\n            usernames: usernames,\n            index: index,\n            messageArray: moreMessages[index - 1].timestamp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 33\n          }, this)), ' ', /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 25\n        }, this), showButton && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: loadAllMessages,\n          children: \"Load all messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this), usernames.length > 0 && /*#__PURE__*/_jsxDEV(List, {\n          children: [messages.map(item => /*#__PURE__*/_jsxDEV(Message, {\n            message_id: item.id,\n            user_id: item.user_id,\n            contents: item.contents,\n            timestamp: item.timestamp,\n            setMessageId: setMessageId,\n            usernames: usernames,\n            index: index,\n            messageArray: messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 33\n          }, this)), ' ', /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        container: true,\n        justify: \"center\",\n        direction: \"column\",\n        style: {\n          height: '10%',\n          backgroundColor: 'lightgray'\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              value: message,\n              variant: \"outlined\",\n              label: \"Say something!\",\n              onInput: event => setMessage(event.target.value),\n              style: {\n                width: '70%',\n                backgroundColor: 'white',\n                borderRadius: '0.5rem'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              type: \"submit\",\n              color: \"default\",\n              style: {\n                marginTop: '0.15rem'\n              },\n              children: /*#__PURE__*/_jsxDEV(SendIcon, {\n                style: {\n                  fill: '#5F4B8BFF'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Thread, \"eJyoiKVAu0KAoFaRlquI8tuDC8Y=\", false, function () {\n  return [useChats, useUsers, useWindowDimensions];\n});\n\n_c = Thread;\nexport default Thread;\n\nvar _c;\n\n$RefreshReg$(_c, \"Thread\");","map":{"version":3,"sources":["/Users/tommivainio/Projektit/chatApp/my-app/src/components/thread.tsx"],"names":["Button","Grid","List","TextField","SendIcon","IconButton","useContext","useEffect","useState","MediaContext","useChats","useUsers","Message","useWindowDimensions","useRef","Thread","messages","id","websocket","messageAmount","setMessageAmount","message","setMessage","messageId","setMessageId","showButton","setShowButton","usernames","setUsernames","moreMessages","setMoreMessages","loadMore","setLoadMore","messageScroll","setMessageScroll","currentThread","setCurrentThread","date","setDate","user","postMessage","getUserIds","getAllMessages","getUsernameById","height","heightCorrected","messagesEndRef","messagesEndRef2","scrollToBottom","number","current","scrollIntoView","e","console","log","length","userIds","usernameArray","i","user_id","userObject","username","push","handleSubmit","event","preventDefault","tzoffset","Date","getTimezoneOffset","localISOTime","now","toISOString","slice","messageObject","JSON","stringify","contents","timestamp","thread_id","success","webSocketUpdate","type","undefined","send","loadAllMessages","amount","allMessages","splice","padding","backgroundColor","overflowX","overflowY","map","item","index","target","value","width","borderRadius","marginTop","fill"],"mappings":"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","sourcesContent":["import { Button, Grid, List, TextField } from '@material-ui/core';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { FormEvent, useContext, useEffect, useState } from 'react';\r\nimport { MediaContext } from '../contexts/mediaContext';\r\nimport { useChats, useUsers } from '../hooks/apiHooks';\r\nimport Message from '../components/message';\r\nimport useWindowDimensions from '../hooks/windowDimensionsHook';\r\nimport { useRef } from 'react';\r\n\r\ninterface messagesArray {\r\n    id: number,\r\n    user_id: number,\r\n    contents: string,\r\n    timestamp: Date,\r\n}\r\n\r\ninterface propType {\r\n    messages: messagesArray[],\r\n    id: number,\r\n    websocket: WebSocket | undefined,\r\n    messageAmount: number,\r\n    setMessageAmount: Function,\r\n}\r\n\r\ninterface usernamesArray {\r\n    user_id: number,\r\n    username: string,\r\n}\r\n\r\n\r\nconst Thread = ({ messages, id, websocket, messageAmount, setMessageAmount }: propType) => {\r\n    const [message, setMessage] = useState('');\r\n    const [messageId, setMessageId] = useState(0);\r\n    const [showButton, setShowButton] = useState(false);\r\n    const [usernames, setUsernames] = useState<usernamesArray[]>([])\r\n    const [moreMessages, setMoreMessages] = useState<messagesArray[]>([])\r\n    const [loadMore, setLoadMore] = useState(false);\r\n    const [messageScroll, setMessageScroll] = useState(false);\r\n    const [currentThread, setCurrentThread] = useState(0);\r\n    const [date, setDate] = useState('');\r\n    const { user } = useContext(MediaContext);\r\n    const { postMessage, getUserIds, getAllMessages } = useChats();\r\n    const { getUsernameById } = useUsers();\r\n    const { height } = useWindowDimensions();\r\n    const heightCorrected = height - 64;\r\n    const messagesEndRef = useRef<null | HTMLDivElement>(null)\r\n    const messagesEndRef2 = useRef<null | HTMLDivElement>(null)\r\n\r\n    const scrollToBottom = (number: number) => {\r\n        if (number === 1) {\r\n            messagesEndRef.current?.scrollIntoView()\r\n        } else {\r\n            messagesEndRef2.current?.scrollIntoView()\r\n            setMessageScroll(true);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                if (loadMore && !messageScroll) {\r\n                    scrollToBottom(2);\r\n                } else {\r\n                    scrollToBottom(1);\r\n                }\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        })();\r\n    }, [messageId]);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                if (currentThread !== id) {\r\n                    setLoadMore(false);\r\n                    setMessageScroll(false);\r\n                    setMessageAmount(50);\r\n                }\r\n                setCurrentThread(id);\r\n                console.log('messageUpdate')\r\n                if (messages.length >= 50 && !loadMore) {\r\n                    setShowButton(true);\r\n                } else {\r\n                    setShowButton(false);\r\n                }\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        })();\r\n    }, [messages]);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                setUsernames([]);\r\n                console.log('USERNAMELIST')\r\n                const userIds = await getUserIds(id);\r\n                let usernameArray: Array<usernamesArray> = [];\r\n                for (let i = 0; i < userIds.length; i++) {\r\n                    const user = await getUsernameById(userIds[i].user_id);\r\n                    const userObject = {\r\n                        user_id: userIds[i].user_id,\r\n                        username: user.username\r\n                    }\r\n                    usernameArray.push(userObject);\r\n                }\r\n                setUsernames(usernameArray)\r\n\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        })();\r\n    }, [id]);\r\n\r\n    const handleSubmit = async (event: FormEvent) => {\r\n        event.preventDefault();\r\n        const tzoffset = (new Date()).getTimezoneOffset() * 60000;\r\n        const localISOTime = (new Date(Date.now() - tzoffset)).toISOString().slice(0, -1);\r\n        console.log('TIMEST: ', localISOTime)\r\n        const messageObject = JSON.stringify({\r\n            contents: message,\r\n            timestamp: localISOTime,\r\n            user_id: user,\r\n            thread_id: id,\r\n\r\n        });\r\n        const success = await postMessage(messageObject)\r\n        console.log('SUCCESS: ', success)\r\n        const webSocketUpdate = {\r\n            type: 'message',\r\n            contents: message,\r\n            timestamp: localISOTime,\r\n            user_id: user,\r\n            thread_id: id\r\n        }\r\n        if (websocket !== undefined) {\r\n            websocket.send(JSON.stringify(webSocketUpdate));\r\n        }\r\n        setMessage('');\r\n    };\r\n\r\n    const loadAllMessages = async () => {\r\n        let amount;\r\n        if (currentThread !== id) {\r\n            setMessageAmount(50);\r\n            amount = 50;\r\n        } else {\r\n            amount = messageAmount;\r\n        }\r\n        const allMessages = await getAllMessages(id);\r\n        console.log('MESSAGE AMOUNT', messageAmount, allMessages);\r\n        allMessages.splice(allMessages.length - amount, amount);\r\n        setMoreMessages(allMessages);\r\n        setLoadMore(true);\r\n        setShowButton(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify=\"center\" direction=\"column\" style={{ height: heightCorrected }}>\r\n                <Grid item justify=\"center\" style=\r\n                    {{\r\n                        padding: '2rem 6rem 1.5rem 6rem',\r\n                        backgroundColor: '#E69A8DFF',\r\n                        height: '90%',\r\n                        overflowX: 'hidden',\r\n                        overflowY: 'auto'\r\n                    }}>\r\n                    {loadMore &&\r\n                        <List>\r\n                            {moreMessages.map((item, index) => (\r\n                                <Message\r\n                                    message_id={item.id}\r\n                                    user_id={item.user_id}\r\n                                    contents={item.contents}\r\n                                    timestamp={item.timestamp}\r\n                                    setMessageId={setMessageId}\r\n                                    usernames={usernames}\r\n                                    index={index}\r\n                                    messageArray={moreMessages[index - 1].timestamp}\r\n                                />\r\n                            ))}{' '}\r\n                            <div ref={messagesEndRef2} />\r\n                        </List>\r\n                    }\r\n                    {showButton &&\r\n                        <Button onClick={loadAllMessages}>Load all messages</Button>\r\n                    }\r\n                    {usernames.length > 0 &&\r\n                        <List>\r\n                            {messages.map((item) => (\r\n                                <Message\r\n                                    message_id={item.id}\r\n                                    user_id={item.user_id}\r\n                                    contents={item.contents}\r\n                                    timestamp={item.timestamp}\r\n                                    setMessageId={setMessageId}\r\n                                    usernames={usernames}\r\n                                    index={index}\r\n                                    messageArray={messages}\r\n                                />\r\n                            ))}{' '}\r\n                            <div ref={messagesEndRef} />\r\n                        </List>\r\n                    }\r\n                </Grid>\r\n                <Grid item container justify=\"center\" direction=\"column\" style={{ height: '10%', backgroundColor: 'lightgray' }}>\r\n                    <Grid item>\r\n                        <form\r\n                            onSubmit={handleSubmit}\r\n                        >\r\n\r\n                            <TextField\r\n                                value={message}\r\n                                variant=\"outlined\"\r\n                                label=\"Say something!\"\r\n                                onInput={(event) => setMessage((event.target as HTMLInputElement).value)}\r\n                                style={{ width: '70%', backgroundColor: 'white', borderRadius: '0.5rem' }}\r\n                            />\r\n                            <IconButton\r\n                                type=\"submit\"\r\n                                color=\"default\"\r\n                                style={{ marginTop: '0.15rem' }}\r\n                            >\r\n                                <SendIcon style={{ fill: '#5F4B8BFF' }} />\r\n                            </IconButton>\r\n\r\n                        </form>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Thread;"]},"metadata":{},"sourceType":"module"}