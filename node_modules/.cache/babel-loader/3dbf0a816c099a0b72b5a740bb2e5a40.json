{"ast":null,"code":"var _jsxFileName = \"/Users/tommivainio/SSSF/SSSF-project-frontend/src/views/home.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Button, Grid, List, Typography } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport Thread from '../components/thread';\nimport ThreadButton from '../components/threadButton';\nimport Modal from '../components/modal';\nimport { MediaContext } from '../contexts/mediaContext';\nimport { WebsocketContext } from '../contexts/websocketContext';\nimport { useUsers, useChats } from '../hooks/apiHooks';\nimport useWindowDimensions from '../hooks/windowDimensionsHook';\nimport { useMediaQuery } from 'react-responsive';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  newThreadButton: {\n    backgroundColor: '#5F4B8BFF',\n    marginTop: '1rem',\n    '&:hover': {\n      backgroundColor: '#7159a6'\n    },\n    [theme.breakpoints.down(1000)]: {\n      fontSize: '0.8rem',\n      padding: '6px 10px'\n    },\n    [theme.breakpoints.down(800)]: {\n      fontSize: '0.7rem',\n      padding: '6px 6px'\n    },\n    [theme.breakpoints.down(600)]: {\n      fontSize: '0.875rem',\n      padding: '6px 16px'\n    }\n  },\n  desktopContainer: {\n    [theme.breakpoints.up(1280)]: {\n      width: '70vw'\n    }\n  },\n  mobileWelcomeCard: {\n    maxWidth: '15rem',\n    margin: 'auto',\n    marginTop: '1rem'\n  },\n  mobileSubtitle: {\n    fontSize: '0.9rem'\n  }\n}));\n\nconst Home = ({\n  history\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    user,\n    setUser\n  } = useContext(MediaContext);\n  const [username, setusername] = useState('');\n  const {\n    websocket,\n    setWebsocket\n  } = useContext(WebsocketContext);\n  const {\n    getLoggedInUser,\n    getUsernameById\n  } = useUsers();\n  const {\n    getThreads,\n    getMessages\n  } = useChats();\n  const {\n    height\n  } = useWindowDimensions();\n  const [heightCorrected, setHeightCorrected] = useState(height - 64);\n  const [threads, setThreads] = useState([]);\n  const [threadData, setThreadData] = useState([]);\n  const [sortedThreads, setSortedThreads] = useState([]);\n  const [threadOpen, setThreadOpen] = useState(false);\n  const [threadId, setThreadId] = useState('0');\n  const [messages, setMessages] = useState([]);\n  const [updateState, setUpdateState] = useState(Date.now());\n  const [updateThreadButtons, setUpdateThreadButtons] = useState(Date.now());\n  const [updateThreadButtonInfos, setUpdateThreadButtonInfos] = useState(Date.now());\n  const [messageAmount, setMessageAmount] = useState(50);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [wsMessage, setWsMessage] = useState({\n    type: '',\n    contents: '',\n    timestamp: new Date(),\n    user_id: 0,\n    thread_id: 0\n  });\n  const isMobile = useMediaQuery({\n    query: '(max-width: 600px)'\n  });\n  const isDesktop = useMediaQuery({\n    query: '(min-width: 1280px)'\n  });\n  useEffect(() => {\n    try {\n      if (isMobile) {\n        setHeightCorrected(height - 56);\n      } else {\n        setHeightCorrected(height - 64);\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n  }, [isMobile]);\n  useEffect(() => {\n    (async () => {\n      try {\n        console.log('USER: ', user);\n        const token = localStorage.getItem('token');\n        if (token === null) history.push('/login');\n        const loggedInUser = await getLoggedInUser(token);\n        console.log('Logged', loggedInUser);\n\n        if (!loggedInUser.success) {\n          history.push('/login');\n        }\n\n        setUser(loggedInUser.data.id);\n        setusername(loggedInUser.data.username);\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [updateThreadButtons]);\n  useEffect(() => {\n    (async () => {\n      try {\n        if (user !== '0') {\n          const token = localStorage.getItem('token');\n          if (token === null) history.push('/login');\n          const chatThreads = await getThreads(token);\n          if (chatThreads.message === 'Not authorized') history.push('/login');\n\n          if (chatThreads.data.length > 0) {\n            const threadIdArray = [];\n\n            for (let i = 0; i < chatThreads.data.length; i++) {\n              const idObject = {\n                thread_id: chatThreads.data[i].thread.id,\n                thread_name: chatThreads.data[i].thread.name\n              };\n              threadIdArray.push(idObject);\n            }\n\n            setThreads(threadIdArray);\n            setThreadData(chatThreads.data);\n          } else {\n            setThreads([{\n              thread_id: '0',\n              thread_name: ''\n            }]);\n          }\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [user]);\n  useEffect(() => {\n    (async () => {\n      try {\n        if (threads.length > 0) {\n          if (threads[0].thread_id !== '0') {\n            console.log('THREADS', threads);\n            let idArray = [];\n            const token = localStorage.getItem('token');\n            if (token === null) history.push('/login');\n\n            for (let i = 0; i < threads.length; i++) {\n              const paramObject = {\n                threadId: threads[i].thread_id,\n                limit: 0\n              };\n              const threadMessages = await getMessages(paramObject, token);\n              const threadIdObject = {\n                id: threads[i].thread_id,\n                timestamp: threadMessages.data.length > 0 ? threadMessages.data[0].timestamp : '1999-02-06T05:47:00',\n                name: threads[i].thread_name\n              };\n              idArray.push(threadIdObject);\n            }\n\n            idArray.sort((a, b) => a.timestamp < b.timestamp ? 1 : b.timestamp < a.timestamp ? -1 : 0);\n            console.log('IDARRAY', idArray);\n            setSortedThreads(idArray);\n          }\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [threads, updateThreadButtonInfos]);\n  /*\n      useEffect(() => {\n          (async () => {\n              try {\n                  if (threadId !== 0) {\n                      const threadMessages = await getMessages(threadId);\n                      const reversedArray = threadMessages.reverse();\n                      setMessages(reversedArray);\n                  }\n              } catch (e) {\n                  console.log(e.message);\n              }\n          })();\n      }, [threadId, updateState]);\n  \n      useEffect(() => {\n          try {\n              if (wsMessage.type !== '' && wsMessage.thread_id === threadId) {\n                  const newMessageObject = {\n                      id: Date.now(),\n                      user_id: wsMessage.user_id,\n                      contents: wsMessage.contents,\n                      timestamp: wsMessage.timestamp,\n                  }\n                  setMessages(messages => [...messages, newMessageObject]);\n                  setMessageAmount(messageAmount + 1);\n              }\n          } catch (e) {\n              console.log(e.message);\n          }\n      }, [wsMessage]);\n  */\n\n  useEffect(() => {\n    try {\n      if (threads.length !== 0) {\n        if (websocket === undefined || websocket.readyState === 2 || websocket.readyState === 3) {\n          console.log('READYSTATE ', websocket === null || websocket === void 0 ? void 0 : websocket.readyState);\n          const socket = new WebSocket('ws://localhost:3001');\n          socket.addEventListener('open', function (event) {\n            try {\n              console.log('Server is opened.');\n              const client = {\n                type: 'client',\n                user_id: user,\n                threads: threads\n              };\n              socket.send(JSON.stringify(client));\n            } catch (e) {\n              console.log(e.message);\n            }\n          });\n          socket.addEventListener('message', function (event) {\n            try {\n              if (event.data !== 'ping') {\n                console.log('Message from server ', JSON.parse(event.data).thread_id);\n                const message = JSON.parse(event.data);\n\n                if (message.type === 'message') {\n                  setWsMessage(message);\n                  setUpdateThreadButtonInfos(Date.now());\n                } else if (message.type === 'newThread') {\n                  setUpdateThreadButtons(Date.now());\n                }\n              } else {\n                setTimeout(() => socket.send('pong'), 1000);\n              }\n            } catch (e) {\n              console.log(e.message);\n            }\n          });\n          socket.addEventListener('close', function (event) {\n            try {\n              console.log('Websocket connection closed.');\n              setUpdateState(Date.now());\n            } catch (e) {\n              console.log(e.message);\n            }\n          });\n          setWebsocket(socket);\n          console.log('NEW SOCKET');\n        }\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n\n    ;\n  }, [updateState, threads]);\n\n  const setCreateNewChatThreadOpen = () => {\n    setModalOpen(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isMobile ? /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"column\",\n      style: {\n        height: heightCorrected\n      },\n      children: threadOpen ? /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Thread, {\n          messages: messages,\n          id: threadId,\n          websocket: websocket,\n          messageAmount: messageAmount,\n          setMessageAmount: setMessageAmount,\n          setThreadOpen: setThreadOpen,\n          setThreadId: setThreadId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          className: classes.mobileWelcomeCard,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            alignItems: \"center\",\n            justify: \"center\",\n            direction: \"column\",\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              component: \"h6\",\n              variant: \"h6\",\n              children: [\"Welcome \", username, \"!\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.mobileSubtitle,\n              component: \"div\",\n              variant: \"body1\",\n              children: \"This is Chat App made by Tommi.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: setCreateNewChatThreadOpen,\n          color: \"primary\",\n          variant: \"contained\",\n          className: classes.newThreadButton,\n          children: \"Create a new chat thread\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          style: {\n            borderTop: '1px solid #5F4B8BFF',\n            marginTop: '1rem'\n          },\n          children: /*#__PURE__*/_jsxDEV(List, {\n            style: {\n              padding: 0,\n              width: '100vw'\n            },\n            children: [sortedThreads.map(item => /*#__PURE__*/_jsxDEV(ThreadButton, {\n              id: item.id,\n              threadName: item.name,\n              setThreadOpen: setThreadOpen,\n              setThreadId: setThreadId,\n              threadOpen: threadOpen,\n              threadId: threadId,\n              updateThreadButtonInfos: updateThreadButtonInfos\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 41\n            }, this)), ' ']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isDesktop ? /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          width: '70vw',\n          margin: 'auto'\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"row\",\n          style: {\n            height: heightCorrected\n          },\n          className: classes.desktopContainer,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            style: {\n              width: '30%',\n              borderRight: '1px solid #5F4B8BFF',\n              maxHeight: heightCorrected,\n              overflowY: 'auto'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: setCreateNewChatThreadOpen,\n              color: \"primary\",\n              variant: \"contained\",\n              className: classes.newThreadButton,\n              children: \"Create a new chat thread\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              style: {\n                borderTop: '1px solid #5F4B8BFF',\n                marginTop: '1rem'\n              },\n              children: /*#__PURE__*/_jsxDEV(List, {\n                style: {\n                  padding: 0,\n                  width: '100%'\n                },\n                children: [sortedThreads.map(item => /*#__PURE__*/_jsxDEV(ThreadButton, {\n                  id: item.id,\n                  threadName: item.name,\n                  setThreadOpen: setThreadOpen,\n                  setThreadId: setThreadId,\n                  threadOpen: threadOpen,\n                  threadId: threadId,\n                  updateThreadButtonInfos: updateThreadButtonInfos\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 392,\n                  columnNumber: 49\n                }, this)), ' ']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            style: {\n              width: '70%'\n            },\n            children: threadOpen ? /*#__PURE__*/_jsxDEV(Thread, {\n              messages: messages,\n              id: threadId,\n              websocket: websocket,\n              messageAmount: messageAmount,\n              setMessageAmount: setMessageAmount,\n              setThreadOpen: setThreadOpen,\n              setThreadId: setThreadId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              alignItems: \"center\",\n              justify: \"center\",\n              direction: \"column\",\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                component: \"h1\",\n                variant: \"h2\",\n                children: [\"Welcome \", username, \"!\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 418,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                component: \"div\",\n                variant: \"body1\",\n                children: \"This is Chat App made by Tommi.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"row\",\n        style: {\n          height: heightCorrected\n        },\n        className: classes.desktopContainer,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          style: {\n            width: '30%',\n            borderRight: '1px solid #5F4B8BFF',\n            maxHeight: heightCorrected,\n            overflowY: 'auto'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: setCreateNewChatThreadOpen,\n            color: \"primary\",\n            variant: \"contained\",\n            className: classes.newThreadButton,\n            children: \"Create a new chat thread\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            style: {\n              borderTop: '1px solid #5F4B8BFF',\n              marginTop: '1rem'\n            },\n            children: /*#__PURE__*/_jsxDEV(List, {\n              style: {\n                padding: 0,\n                width: '100%'\n              },\n              children: [sortedThreads.map(item => /*#__PURE__*/_jsxDEV(ThreadButton, {\n                id: item.id,\n                threadName: item.name,\n                setThreadOpen: setThreadOpen,\n                setThreadId: setThreadId,\n                threadOpen: threadOpen,\n                threadId: threadId,\n                updateThreadButtonInfos: updateThreadButtonInfos\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 45\n              }, this)), ' ']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          style: {\n            width: '70%'\n          },\n          children: threadOpen ? /*#__PURE__*/_jsxDEV(Thread, {\n            messages: messages,\n            id: threadId,\n            websocket: websocket,\n            messageAmount: messageAmount,\n            setMessageAmount: setMessageAmount,\n            setThreadOpen: setThreadOpen,\n            setThreadId: setThreadId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 37\n          }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            alignItems: \"center\",\n            justify: \"center\",\n            direction: \"column\",\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              component: \"h1\",\n              variant: \"h2\",\n              children: [\"Welcome \", username, \"!\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"div\",\n              variant: \"body1\",\n              children: \"This is Chat App made by Tommi.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 25\n      }, this)\n    }, void 0, false), /*#__PURE__*/_jsxDEV(Modal, {\n      modalOpen: modalOpen,\n      setModalOpen: setModalOpen,\n      websocket: websocket,\n      setThreadOpen: setThreadOpen,\n      setThreadId: setThreadId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Home, \"pYvBw/3scXeWXs4clczJd5KwZM8=\", false, function () {\n  return [useStyles, useUsers, useChats, useWindowDimensions, useMediaQuery, useMediaQuery];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/tommivainio/SSSF/SSSF-project-frontend/src/views/home.tsx"],"names":["Button","Grid","List","Typography","useContext","useEffect","useState","Thread","ThreadButton","Modal","MediaContext","WebsocketContext","useUsers","useChats","useWindowDimensions","useMediaQuery","makeStyles","Card","useStyles","theme","newThreadButton","backgroundColor","marginTop","breakpoints","down","fontSize","padding","desktopContainer","up","width","mobileWelcomeCard","maxWidth","margin","mobileSubtitle","Home","history","classes","user","setUser","username","setusername","websocket","setWebsocket","getLoggedInUser","getUsernameById","getThreads","getMessages","height","heightCorrected","setHeightCorrected","threads","setThreads","threadData","setThreadData","sortedThreads","setSortedThreads","threadOpen","setThreadOpen","threadId","setThreadId","messages","setMessages","updateState","setUpdateState","Date","now","updateThreadButtons","setUpdateThreadButtons","updateThreadButtonInfos","setUpdateThreadButtonInfos","messageAmount","setMessageAmount","modalOpen","setModalOpen","wsMessage","setWsMessage","type","contents","timestamp","user_id","thread_id","isMobile","query","isDesktop","e","console","log","message","token","localStorage","getItem","push","loggedInUser","success","data","id","chatThreads","length","threadIdArray","i","idObject","thread","thread_name","name","idArray","paramObject","limit","threadMessages","threadIdObject","sort","a","b","undefined","readyState","socket","WebSocket","addEventListener","event","client","send","JSON","stringify","parse","setTimeout","setCreateNewChatThreadOpen","borderTop","map","item","borderRight","maxHeight","overflowY"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { Button, Grid, List, Typography } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport Thread from '../components/thread';\nimport ThreadButton from '../components/threadButton';\nimport Modal from '../components/modal';\nimport { MediaContext } from '../contexts/mediaContext';\nimport { WebsocketContext } from '../contexts/websocketContext';\nimport { useUsers, useChats } from '../hooks/apiHooks';\nimport useWindowDimensions from '../hooks/windowDimensionsHook';\nimport { useMediaQuery } from 'react-responsive';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from '@mui/material';\n\nconst useStyles = makeStyles((theme) => ({\n    newThreadButton: {\n        backgroundColor: '#5F4B8BFF',\n        marginTop: '1rem',\n        '&:hover': {\n            backgroundColor: '#7159a6',\n        },\n        [theme.breakpoints.down(1000)]: {\n            fontSize: '0.8rem',\n            padding: '6px 10px'\n        },\n        [theme.breakpoints.down(800)]: {\n            fontSize: '0.7rem',\n            padding: '6px 6px'\n        },\n        [theme.breakpoints.down(600)]: {\n            fontSize: '0.875rem',\n            padding: '6px 16px'\n        },\n    },\n    desktopContainer: {\n        [theme.breakpoints.up(1280)]: {\n            width: '70vw',\n        },\n    },\n    mobileWelcomeCard: {\n        maxWidth: '15rem',\n        margin: 'auto',\n        marginTop: '1rem'\n    },\n    mobileSubtitle: {\n        fontSize: '0.9rem'\n    }\n}));\n\ninterface propType {\n    history: {\n        push: Function,\n    }\n}\n\ninterface threadsArray {\n    thread_id: string\n    thread_name: string\n}\n\ninterface sortedThreadsArray {\n    id: string,\n    timestamp: string,\n    name: string,\n}\n\ninterface userObject {\n    id: string,\n    username: string,\n}\n\ninterface threadObject {\n    id: string,\n    name: string\n}\n\ninterface messagesArray {\n    id: string,\n    contents: string,\n    timestamp: string,\n    status: string,\n    thread: threadObject,\n    user: userObject,\n}\n\ninterface creatorObject {\n    username: true\n}\n\ninterface threadObject {\n    id: string,\n    name: string,\n    private: boolean,\n    creator: creatorObject\n}\n\ninterface threadDataArray {\n    thread: threadObject\n}\n\nconst Home = ({ history }: propType) => {\n    const classes = useStyles();\n    const { user, setUser } = useContext(MediaContext);\n    const [username, setusername] = useState('');\n    const { websocket, setWebsocket } = useContext(WebsocketContext);\n    const { getLoggedInUser, getUsernameById } = useUsers();\n    const { getThreads, getMessages } = useChats();\n    const { height } = useWindowDimensions();\n    const [heightCorrected, setHeightCorrected] = useState(height - 64);\n    const [threads, setThreads] = useState<threadsArray[]>([]);\n    const [threadData, setThreadData] = useState<threadDataArray[]>([]);\n    const [sortedThreads, setSortedThreads] = useState<sortedThreadsArray[]>([]);\n    const [threadOpen, setThreadOpen] = useState(false)\n    const [threadId, setThreadId] = useState('0');\n    const [messages, setMessages] = useState<messagesArray[]>([]);\n    const [updateState, setUpdateState] = useState(Date.now());\n    const [updateThreadButtons, setUpdateThreadButtons] = useState(Date.now());\n    const [updateThreadButtonInfos, setUpdateThreadButtonInfos] = useState(Date.now());\n    const [messageAmount, setMessageAmount] = useState(50);\n    const [modalOpen, setModalOpen] = useState(false);\n    const [wsMessage, setWsMessage] = useState({\n        type: '',\n        contents: '',\n        timestamp: new Date(),\n        user_id: 0,\n        thread_id: 0\n    });\n\n    const isMobile = useMediaQuery({\n        query: '(max-width: 600px)'\n    });\n\n    const isDesktop = useMediaQuery({\n        query: '(min-width: 1280px)'\n    });\n\n    useEffect(() => {\n        try {\n            if (isMobile) {\n                setHeightCorrected(height - 56);\n            } else {\n                setHeightCorrected(height - 64);\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n    }, [isMobile]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                console.log('USER: ', user)\n                const token = localStorage.getItem('token');\n                if ( token === null) history.push('/login');\n                const loggedInUser = await getLoggedInUser(token!);\n                console.log('Logged', loggedInUser);\n                if (!loggedInUser.success) {\n                    history.push('/login');\n                }\n                setUser(loggedInUser.data.id);\n                setusername(loggedInUser.data.username);\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [updateThreadButtons]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                if (user !== '0') {\n                    const token = localStorage.getItem('token');\n                    if ( token === null) history.push('/login');\n                    const chatThreads = await getThreads(token!);\n                    if(chatThreads.message === 'Not authorized') history.push('/login');\n                    if (chatThreads.data.length > 0) {\n                        const threadIdArray = [];\n                        for(let i = 0; i < chatThreads.data.length; i++) {\n                            const idObject = {\n                                thread_id: chatThreads.data[i].thread.id,\n                                thread_name: chatThreads.data[i].thread.name\n                            }\n                            threadIdArray.push(idObject);\n                        }\n                        setThreads(threadIdArray);\n                        setThreadData(chatThreads.data);\n                    } else {\n                        setThreads([{thread_id: '0', thread_name: ''}]);\n                    }\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [user]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                if (threads.length > 0) {\n                    if (threads[0].thread_id !== '0') {\n                        console.log('THREADS', threads);\n                        let idArray = [];\n                        const token = localStorage.getItem('token');\n                        if ( token === null) history.push('/login');\n                        for (let i = 0; i < threads.length; i++) {\n                            const paramObject = {\n                                threadId: threads[i].thread_id,\n                                limit: 0\n                            }\n                            const threadMessages = await getMessages(paramObject, token!);\n                            const threadIdObject = {\n                                id: threads[i].thread_id,\n                                timestamp: threadMessages.data.length > 0 ? threadMessages.data[0].timestamp : '1999-02-06T05:47:00',\n                                name: threads[i].thread_name\n                            };\n                            idArray.push(threadIdObject);\n                        }\n                        idArray.sort((a, b) => (a.timestamp < b.timestamp) ? 1 : ((b.timestamp < a.timestamp) ? -1 : 0));\n                        console.log('IDARRAY', idArray);\n                        setSortedThreads(idArray);\n                    }\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [threads, updateThreadButtonInfos]);\n/*\n    useEffect(() => {\n        (async () => {\n            try {\n                if (threadId !== 0) {\n                    const threadMessages = await getMessages(threadId);\n                    const reversedArray = threadMessages.reverse();\n                    setMessages(reversedArray);\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [threadId, updateState]);\n\n    useEffect(() => {\n        try {\n            if (wsMessage.type !== '' && wsMessage.thread_id === threadId) {\n                const newMessageObject = {\n                    id: Date.now(),\n                    user_id: wsMessage.user_id,\n                    contents: wsMessage.contents,\n                    timestamp: wsMessage.timestamp,\n                }\n                setMessages(messages => [...messages, newMessageObject]);\n                setMessageAmount(messageAmount + 1);\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n    }, [wsMessage]);\n*/\n\n    useEffect(() => {\n        try {\n            if (threads.length !== 0) {\n                if (websocket === undefined || websocket.readyState === 2 || websocket.readyState === 3) {\n                    console.log('READYSTATE ', websocket?.readyState)\n                    const socket = new WebSocket('ws://localhost:3001');\n\n                    socket.addEventListener('open', function (event) {\n                        try {\n                            console.log('Server is opened.');\n                            const client = {\n                                type: 'client',\n                                user_id: user,\n                                threads: threads,\n                            }\n                            socket.send(JSON.stringify(client));\n                        } catch (e) {\n                            console.log(e.message);\n                        }\n                    });\n\n                    socket.addEventListener('message', function (event) {\n                        try {\n                            if (event.data !== 'ping') {\n                                console.log('Message from server ', JSON.parse(event.data).thread_id);\n                                const message = JSON.parse(event.data);\n                                if (message.type === 'message') {\n                                    setWsMessage(message);\n                                    setUpdateThreadButtonInfos(Date.now());\n                                } else if (message.type === 'newThread') {\n                                    setUpdateThreadButtons(Date.now());\n                                }\n                            } else {\n                                setTimeout(() => socket.send('pong'), 1000);\n                            }\n                        } catch (e) {\n                            console.log(e.message);\n                        }\n                    });\n\n                    socket.addEventListener('close', function (event) {\n                        try {\n                            console.log('Websocket connection closed.');\n                            setUpdateState(Date.now());\n                        } catch (e) {\n                            console.log(e.message);\n                        }\n                    });\n\n                    setWebsocket(socket);\n                    console.log('NEW SOCKET');\n                }\n            }\n        } catch (e) {\n            console.log(e.message);\n        };\n    }, [updateState, threads]);\n\n    const setCreateNewChatThreadOpen = () => {\n        setModalOpen(true);\n    }\n\n\n    return (\n        <>\n            {isMobile ? (\n                <Grid container direction=\"column\" style={{ height: heightCorrected, }} >\n                    {threadOpen ? (\n                        <Grid item >\n                            <Thread\n                                messages={messages}\n                                id={threadId}\n                                websocket={websocket}\n                                messageAmount={messageAmount}\n                                setMessageAmount={setMessageAmount}\n                                setThreadOpen={setThreadOpen}\n                                setThreadId={setThreadId}\n                            />\n                        </Grid>\n                    ) : (\n                        <Grid item>\n                            <Card className={classes.mobileWelcomeCard}>\n                                <Grid container alignItems=\"center\" justify=\"center\" direction=\"column\" >\n                                    <Typography component=\"h6\" variant=\"h6\">Welcome {username}!</Typography>\n                                    <Typography className={classes.mobileSubtitle} component=\"div\" variant=\"body1\">This is Chat App made by Tommi.</Typography>\n                                </Grid>\n                            </Card>\n                            <Button\n                                onClick={setCreateNewChatThreadOpen}\n                                color=\"primary\"\n                                variant=\"contained\"\n                                className={classes.newThreadButton}\n                            >\n                                Create a new chat thread\n                            </Button>\n                            <Grid container style={{ borderTop: '1px solid #5F4B8BFF', marginTop: '1rem' }} >\n                                <List style={{ padding: 0, width: '100vw' }}>\n                                    {sortedThreads.map((item) => (\n                                        <ThreadButton\n                                            id={item.id}\n                                            threadName={item.name}\n                                            setThreadOpen={setThreadOpen}\n                                            setThreadId={setThreadId}\n                                            threadOpen={threadOpen}\n                                            threadId={threadId}\n                                            updateThreadButtonInfos={updateThreadButtonInfos}\n                                        />\n                                    ))}{' '}\n                                </List>\n                            </Grid>\n                        </Grid>\n                    )}\n                </Grid>\n            ) : (\n                <>\n                    {isDesktop ? (\n                        <Card style={{ width: '70vw', margin: 'auto' }}>\n                            <Grid container direction=\"row\" style={{ height: heightCorrected, }} className={classes.desktopContainer} >\n                                <Grid item style={{ width: '30%', borderRight: '1px solid #5F4B8BFF', maxHeight: heightCorrected, overflowY: 'auto' }}>\n                                    <Button\n                                        onClick={setCreateNewChatThreadOpen}\n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        className={classes.newThreadButton}\n                                    >\n                                        Create a new chat thread\n                                    </Button>\n                                    <Grid container style={{ borderTop: '1px solid #5F4B8BFF', marginTop: '1rem' }} >\n                                        <List style={{ padding: 0, width: '100%' }}>\n                                            {sortedThreads.map((item) => (\n                                                <ThreadButton\n                                                    id={item.id}\n                                                    threadName={item.name}\n                                                    setThreadOpen={setThreadOpen}\n                                                    setThreadId={setThreadId}\n                                                    threadOpen={threadOpen}\n                                                    threadId={threadId}\n                                                    updateThreadButtonInfos={updateThreadButtonInfos}\n                                                />\n                                            ))}{' '}\n                                        </List>\n                                    </Grid>\n                                </Grid>\n                                <Grid item style={{ width: '70%' }}>\n                                    {threadOpen ? (\n                                        <Thread\n                                            messages={messages}\n                                            id={threadId}\n                                            websocket={websocket}\n                                            messageAmount={messageAmount}\n                                            setMessageAmount={setMessageAmount}\n                                            setThreadOpen={setThreadOpen}\n                                            setThreadId={setThreadId}\n                                        />\n                                    ) : (\n                                        <Grid container alignItems=\"center\" justify=\"center\" direction=\"column\" >\n                                            <Typography component=\"h1\" variant=\"h2\">Welcome {username}!</Typography>\n                                            <Typography component=\"div\" variant=\"body1\">This is Chat App made by Tommi.</Typography>\n                                        </Grid>\n                                    )}\n                                </Grid>\n                            </Grid>\n                        </Card>\n                    ) : (\n                        <Grid container direction=\"row\" style={{ height: heightCorrected, }} className={classes.desktopContainer} >\n                            <Grid item style={{ width: '30%', borderRight: '1px solid #5F4B8BFF', maxHeight: heightCorrected, overflowY: 'auto' }}>\n                                <Button\n                                    onClick={setCreateNewChatThreadOpen}\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                    className={classes.newThreadButton}\n                                >\n                                    Create a new chat thread\n                                </Button>\n                                <Grid container style={{ borderTop: '1px solid #5F4B8BFF', marginTop: '1rem' }} >\n                                    <List style={{ padding: 0, width: '100%' }}>\n                                        {sortedThreads.map((item) => (\n                                            <ThreadButton\n                                                id={item.id}\n                                                threadName={item.name}\n                                                setThreadOpen={setThreadOpen}\n                                                setThreadId={setThreadId}\n                                                threadOpen={threadOpen}\n                                                threadId={threadId}\n                                                updateThreadButtonInfos={updateThreadButtonInfos}\n                                            />\n                                        ))}{' '}\n                                    </List>\n                                </Grid>\n                            </Grid>\n                            <Grid item style={{ width: '70%' }}>\n                                {threadOpen ? (\n                                    <Thread\n                                        messages={messages}\n                                        id={threadId}\n                                        websocket={websocket}\n                                        messageAmount={messageAmount}\n                                        setMessageAmount={setMessageAmount}\n                                        setThreadOpen={setThreadOpen}\n                                        setThreadId={setThreadId}\n                                    />\n                                ) : (\n                                    <Grid container alignItems=\"center\" justify=\"center\" direction=\"column\" >\n                                        <Typography component=\"h1\" variant=\"h2\">Welcome {username}!</Typography>\n                                        <Typography component=\"div\" variant=\"body1\">This is Chat App made by Tommi.</Typography>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </Grid>\n                    )}\n                </>\n            )\n            }\n            <Modal\n                modalOpen={modalOpen}\n                setModalOpen={setModalOpen}\n                websocket={websocket}\n                setThreadOpen={setThreadOpen}\n                setThreadId={setThreadId}\n            />\n        </>\n    );\n\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}