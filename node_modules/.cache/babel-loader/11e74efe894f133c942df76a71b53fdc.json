{"ast":null,"code":"var _jsxFileName = \"/Users/tommivainio/SSSF/SSSF-project-frontend/src/components/thread.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Grid, List, TextField } from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport { IconButton } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { MediaContext } from '../contexts/mediaContext';\nimport { useChats } from '../hooks/apiHooks';\nimport Message from '../components/message';\nimport useWindowDimensions from '../hooks/windowDimensionsHook';\nimport { useRef } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  textField: {\n    width: '70%',\n    backgroundColor: 'white',\n    borderRadius: '0.5rem',\n    [theme.breakpoints.down(600)]: {\n      marginTop: '0.27rem'\n    }\n  },\n  sendButton: {\n    marginTop: '0.25rem',\n    padding: '12px 0 12px 12px',\n    [theme.breakpoints.down(600)]: {\n      marginTop: 0\n    }\n  },\n  thread: {\n    padding: '0 6rem',\n    backgroundColor: '#E69A8DFF',\n    height: '90%',\n    overflowX: 'hidden',\n    overflowY: 'auto',\n    [theme.breakpoints.down(1000)]: {\n      padding: '0 1rem'\n    }\n  },\n  arrowBack: {\n    position: 'absolute',\n    top: '58px',\n    left: 0,\n    zIndex: 10,\n    padding: 0\n  }\n}));\n\nconst Thread = ({\n  messages,\n  id,\n  websocket,\n  messageAmount,\n  setMessageAmount,\n  setThreadOpen,\n  setThreadId\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [message, setMessage] = useState('');\n  const [messageId, setMessageId] = useState(0);\n  const [showButton, setShowButton] = useState(false);\n  const [moreMessages, setMoreMessages] = useState([]);\n  const [loadMore, setLoadMore] = useState(false);\n  const [messageScroll, setMessageScroll] = useState(false);\n  const [currentThread, setCurrentThread] = useState('0');\n  const {\n    user\n  } = useContext(MediaContext);\n  const {\n    postMessage,\n    getMessages\n  } = useChats();\n  const {\n    height\n  } = useWindowDimensions();\n  const [heightCorrected, setHeightCorrected] = useState(height - 64);\n  const messagesEndRef = useRef(null);\n  const messagesEndRef2 = useRef(null);\n  const isMobile = useMediaQuery({\n    query: '(max-width: 600px)'\n  });\n  useEffect(() => {\n    try {\n      if (isMobile) {\n        setHeightCorrected(height - 56);\n      } else {\n        setHeightCorrected(height - 64);\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n  }, [isMobile]);\n\n  const scrollToBottom = number => {\n    if (number === 1) {\n      var _messagesEndRef$curre;\n\n      (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView();\n    } else {\n      var _messagesEndRef2$curr;\n\n      (_messagesEndRef2$curr = messagesEndRef2.current) === null || _messagesEndRef2$curr === void 0 ? void 0 : _messagesEndRef2$curr.scrollIntoView();\n      setMessageScroll(true);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        if (loadMore && !messageScroll) {\n          scrollToBottom(2);\n        } else {\n          scrollToBottom(1);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [messageId]);\n  useEffect(() => {\n    (async () => {\n      try {\n        if (currentThread !== id) {\n          setLoadMore(false);\n          setMessageScroll(false);\n          setMessageAmount(50);\n        }\n\n        setCurrentThread(id);\n        console.log('messageUpdate');\n\n        if (messages.length >= 50 && !loadMore) {\n          setShowButton(true);\n        } else {\n          setShowButton(false);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [messages]);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      if (message !== '') {\n        const tzoffset = new Date().getTimezoneOffset() * 60000;\n        const localISOTime = new Date(Date.now() - tzoffset).toISOString().slice(0, -1);\n        console.log('TIMEST: ', localISOTime);\n        const messageObject = JSON.stringify({\n          contents: message,\n          timestamp: localISOTime,\n          user_id: user,\n          thread_id: id\n        });\n        const success = await postMessage(messageObject);\n        console.log('SUCCESS: ', success);\n        const webSocketUpdate = {\n          type: 'message',\n          contents: message,\n          timestamp: localISOTime,\n          user_id: user,\n          thread_id: id\n        };\n\n        if (websocket !== undefined) {\n          websocket.send(JSON.stringify(webSocketUpdate));\n        }\n\n        setMessage('');\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n\n  const loadAllMessages = async () => {\n    try {\n      let amount;\n\n      if (currentThread !== id) {\n        setMessageAmount(50);\n        amount = 50;\n      } else {\n        amount = messageAmount;\n      }\n\n      const token = localStorage.getItem('token');\n      const paramObject = {\n        threadId: id,\n        limit: 0\n      };\n      const allMessages = await getMessages(id, 0, token);\n      const messagesToSplice = allMessages.data;\n      console.log('MESSAGE AMOUNT', messageAmount, messagesToSplice);\n      messagesToSplice.splice(messagesToSplice.length - amount, amount);\n      setMoreMessages(messagesToSplice);\n      setLoadMore(true);\n      setShowButton(false);\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n\n  const closeThread = () => {\n    try {\n      setThreadOpen(false);\n      setThreadId(0);\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isMobile && /*#__PURE__*/_jsxDEV(Button, {\n      className: classes.arrowBack,\n      onClick: closeThread,\n      children: [/*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 21\n      }, this), \" Back\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justify: \"center\",\n      direction: \"column\",\n      style: {\n        height: heightCorrected\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        justify: \"center\",\n        className: classes.thread,\n        children: [loadMore && /*#__PURE__*/_jsxDEV(List, {\n          children: [moreMessages.map((item, index) => /*#__PURE__*/_jsxDEV(Message, {\n            message_id: item.id,\n            user_id: item.user.id,\n            contents: item.contents,\n            timestamp: item.timestamp,\n            setMessageId: setMessageId,\n            username: item.user.username,\n            index: index,\n            messageArray: moreMessages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 33\n          }, this)), ' ', /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 25\n        }, this), showButton && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: loadAllMessages,\n          children: \"Load all messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          children: [messages.map((item, index) => /*#__PURE__*/_jsxDEV(Message, {\n            message_id: item.id,\n            user_id: item.user.id,\n            contents: item.contents,\n            timestamp: item.timestamp,\n            setMessageId: setMessageId,\n            username: item.user.username,\n            index: index,\n            messageArray: messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 29\n          }, this)), ' ', /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        container: true,\n        justify: \"center\",\n        direction: \"column\",\n        style: {\n          height: '10%',\n          backgroundColor: 'lightgray'\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [isMobile ? /*#__PURE__*/_jsxDEV(TextField, {\n              value: message,\n              variant: \"outlined\",\n              label: \"Say something!\",\n              onInput: event => setMessage(event.target.value),\n              className: classes.textField,\n              size: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(TextField, {\n              value: message,\n              variant: \"outlined\",\n              label: \"Say something!\",\n              onInput: event => setMessage(event.target.value),\n              className: classes.textField\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              type: \"submit\",\n              color: \"default\",\n              className: classes.sendButton,\n              children: /*#__PURE__*/_jsxDEV(SendIcon, {\n                style: {\n                  fill: '#5F4B8BFF'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 301,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Thread, \"CPhX3LZmGpb+XMrfQR5TbdmDdYw=\", false, function () {\n  return [useStyles, useChats, useWindowDimensions, useMediaQuery];\n});\n\n_c = Thread;\nexport default Thread;\n\nvar _c;\n\n$RefreshReg$(_c, \"Thread\");","map":{"version":3,"sources":["/Users/tommivainio/SSSF/SSSF-project-frontend/src/components/thread.tsx"],"names":["Button","Grid","List","TextField","SendIcon","IconButton","useContext","useEffect","useState","makeStyles","MediaContext","useChats","Message","useWindowDimensions","useRef","useMediaQuery","ArrowBackIcon","useStyles","theme","textField","width","backgroundColor","borderRadius","breakpoints","down","marginTop","sendButton","padding","thread","height","overflowX","overflowY","arrowBack","position","top","left","zIndex","Thread","messages","id","websocket","messageAmount","setMessageAmount","setThreadOpen","setThreadId","classes","message","setMessage","messageId","setMessageId","showButton","setShowButton","moreMessages","setMoreMessages","loadMore","setLoadMore","messageScroll","setMessageScroll","currentThread","setCurrentThread","user","postMessage","getMessages","heightCorrected","setHeightCorrected","messagesEndRef","messagesEndRef2","isMobile","query","e","console","log","scrollToBottom","number","current","scrollIntoView","length","handleSubmit","event","preventDefault","tzoffset","Date","getTimezoneOffset","localISOTime","now","toISOString","slice","messageObject","JSON","stringify","contents","timestamp","user_id","thread_id","success","webSocketUpdate","type","undefined","send","loadAllMessages","amount","token","localStorage","getItem","paramObject","threadId","limit","allMessages","messagesToSplice","data","splice","closeThread","map","item","index","username","target","value","fill"],"mappings":"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","sourcesContent":["import { Button, Grid, List, TextField } from '@material-ui/core';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { FormEvent, useContext, useEffect, useState } from 'react';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { MediaContext } from '../contexts/mediaContext';\r\nimport { useChats, useUsers } from '../hooks/apiHooks';\r\nimport Message from '../components/message';\r\nimport useWindowDimensions from '../hooks/windowDimensionsHook';\r\nimport { useRef } from 'react';\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    textField: {\r\n        width: '70%',\r\n        backgroundColor: 'white',\r\n        borderRadius: '0.5rem',\r\n        [theme.breakpoints.down(600)]: {\r\n            marginTop: '0.27rem'\r\n        },\r\n    },\r\n    sendButton: {\r\n        marginTop: '0.25rem',\r\n        padding: '12px 0 12px 12px',\r\n        [theme.breakpoints.down(600)]: {\r\n            marginTop: 0\r\n        },\r\n    },\r\n    thread: {\r\n        padding: '0 6rem',\r\n        backgroundColor: '#E69A8DFF',\r\n        height: '90%',\r\n        overflowX: 'hidden',\r\n        overflowY: 'auto',\r\n        [theme.breakpoints.down(1000)]: {\r\n            padding: '0 1rem',\r\n        },\r\n    },\r\n    arrowBack: {\r\n        position: 'absolute',\r\n        top: '58px',\r\n        left: 0,\r\n        zIndex: 10,\r\n        padding: 0,\r\n    }\r\n}));\r\n\r\ninterface userObject {\r\n    id: string,\r\n    username: string,\r\n}\r\n\r\ninterface threadObject {\r\n    id: string,\r\n    name: string\r\n}\r\n\r\ninterface messagesArray {\r\n    id: string,\r\n    contents: string,\r\n    timestamp: string,\r\n    status: string,\r\n    thread: threadObject,\r\n    user: userObject,\r\n}\r\n\r\ninterface propType {\r\n    messages: messagesArray[],\r\n    id: string,\r\n    websocket: WebSocket | undefined,\r\n    messageAmount: number,\r\n    setMessageAmount: Function,\r\n    setThreadOpen: Function,\r\n    setThreadId: Function,\r\n}\r\n\r\ninterface usernamesArray {\r\n    user_id: number,\r\n    username: string,\r\n}\r\n\r\n\r\nconst Thread = ({ messages, id, websocket, messageAmount, setMessageAmount, setThreadOpen, setThreadId }: propType) => {\r\n    const classes = useStyles();\r\n    const [message, setMessage] = useState('');\r\n    const [messageId, setMessageId] = useState(0);\r\n    const [showButton, setShowButton] = useState(false);\r\n    const [moreMessages, setMoreMessages] = useState<messagesArray[]>([])\r\n    const [loadMore, setLoadMore] = useState(false);\r\n    const [messageScroll, setMessageScroll] = useState(false);\r\n    const [currentThread, setCurrentThread] = useState('0');\r\n    const { user } = useContext(MediaContext);\r\n    const { postMessage, getMessages } = useChats();\r\n    const { height } = useWindowDimensions();\r\n    const [heightCorrected, setHeightCorrected] = useState(height - 64);\r\n    const messagesEndRef = useRef<null | HTMLDivElement>(null)\r\n    const messagesEndRef2 = useRef<null | HTMLDivElement>(null)\r\n\r\n    const isMobile = useMediaQuery({\r\n        query: '(max-width: 600px)'\r\n    });\r\n\r\n    useEffect(() => {\r\n        try {\r\n            if (isMobile) {\r\n                setHeightCorrected(height - 56);\r\n            } else {\r\n                setHeightCorrected(height - 64);\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message);\r\n        }\r\n    }, [isMobile]);\r\n\r\n    const scrollToBottom = (number: number) => {\r\n        if (number === 1) {\r\n            messagesEndRef.current?.scrollIntoView()\r\n        } else {\r\n            messagesEndRef2.current?.scrollIntoView()\r\n            setMessageScroll(true);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                if (loadMore && !messageScroll) {\r\n                    scrollToBottom(2);\r\n                } else {\r\n                    scrollToBottom(1);\r\n                }\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        })();\r\n    }, [messageId]);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                if (currentThread !== id) {\r\n                    setLoadMore(false);\r\n                    setMessageScroll(false);\r\n                    setMessageAmount(50);\r\n                }\r\n                setCurrentThread(id);\r\n                console.log('messageUpdate')\r\n                if (messages.length >= 50 && !loadMore) {\r\n                    setShowButton(true);\r\n                } else {\r\n                    setShowButton(false);\r\n                }\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        })();\r\n    }, [messages]);\r\n\r\n    const handleSubmit = async (event: FormEvent) => {\r\n        event.preventDefault();\r\n        try {\r\n            if (message !== '') {\r\n                const tzoffset = (new Date()).getTimezoneOffset() * 60000;\r\n                const localISOTime = (new Date(Date.now() - tzoffset)).toISOString().slice(0, -1);\r\n                console.log('TIMEST: ', localISOTime)\r\n                const messageObject = JSON.stringify({\r\n                    contents: message,\r\n                    timestamp: localISOTime,\r\n                    user_id: user,\r\n                    thread_id: id,\r\n\r\n                });\r\n                const success = await postMessage(messageObject)\r\n                console.log('SUCCESS: ', success)\r\n                const webSocketUpdate = {\r\n                    type: 'message',\r\n                    contents: message,\r\n                    timestamp: localISOTime,\r\n                    user_id: user,\r\n                    thread_id: id\r\n                }\r\n                if (websocket !== undefined) {\r\n                    websocket.send(JSON.stringify(webSocketUpdate));\r\n                }\r\n                setMessage('');\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message);\r\n        }\r\n    };\r\n\r\n    const loadAllMessages = async () => {\r\n        try {\r\n            let amount;\r\n            if (currentThread !== id) {\r\n                setMessageAmount(50);\r\n                amount = 50;\r\n            } else {\r\n                amount = messageAmount;\r\n            }\r\n            const token = localStorage.getItem('token');\r\n            const paramObject = {\r\n                threadId : id,\r\n                limit: 0\r\n            }\r\n            const allMessages = await getMessages(id, 0, token!);\r\n            const messagesToSplice = allMessages.data;\r\n            console.log('MESSAGE AMOUNT', messageAmount, messagesToSplice);\r\n            messagesToSplice.splice(messagesToSplice.length - amount, amount);\r\n            setMoreMessages(messagesToSplice);\r\n            setLoadMore(true);\r\n            setShowButton(false);\r\n        } catch (e) {\r\n            console.log(e.message);\r\n        }\r\n    };\r\n\r\n    const closeThread = () => {\r\n        try {\r\n            setThreadOpen(false);\r\n            setThreadId(0);\r\n        } catch (e) {\r\n            console.log(e.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isMobile &&\r\n                <Button className={classes.arrowBack} onClick={closeThread}>\r\n                    <ArrowBackIcon /> Back\r\n                </Button>\r\n            }\r\n            <Grid container justify=\"center\" direction=\"column\" style={{ height: heightCorrected }}>\r\n                <Grid item justify=\"center\" className={classes.thread}>\r\n                    {loadMore &&\r\n                        <List>\r\n                            {moreMessages.map((item, index) => (\r\n                                <Message\r\n                                    message_id={item.id}\r\n                                    user_id={item.user.id}\r\n                                    contents={item.contents}\r\n                                    timestamp={item.timestamp}\r\n                                    setMessageId={setMessageId}\r\n                                    username={item.user.username}\r\n                                    index={index}\r\n                                    messageArray={moreMessages}\r\n                                />\r\n                            ))}{' '}\r\n                            <div ref={messagesEndRef2} />\r\n                        </List>\r\n                    }\r\n                    {showButton &&\r\n                        <Button onClick={loadAllMessages}>Load all messages</Button>\r\n                    }\r\n                    <List>\r\n                        {messages.map((item, index) => (\r\n                            <Message\r\n                                message_id={item.id}\r\n                                user_id={item.user.id}\r\n                                contents={item.contents}\r\n                                timestamp={item.timestamp}\r\n                                setMessageId={setMessageId}\r\n                                username={item.user.username}\r\n                                index={index}\r\n                                messageArray={messages}\r\n                            />\r\n                        ))}{' '}\r\n                        <div ref={messagesEndRef} />\r\n                    </List>\r\n                </Grid>\r\n                <Grid item container justify=\"center\" direction=\"column\" style={{ height: '10%', backgroundColor: 'lightgray' }}>\r\n                    <Grid item>\r\n                        <form\r\n                            onSubmit={handleSubmit}\r\n                        >\r\n                            {isMobile ? (\r\n                                <TextField\r\n                                    value={message}\r\n                                    variant=\"outlined\"\r\n                                    label=\"Say something!\"\r\n                                    onInput={(event) => setMessage((event.target as HTMLInputElement).value)}\r\n                                    className={classes.textField}\r\n                                    size=\"small\"\r\n                                />\r\n                            ) : (\r\n                                <TextField\r\n                                    value={message}\r\n                                    variant=\"outlined\"\r\n                                    label=\"Say something!\"\r\n                                    onInput={(event) => setMessage((event.target as HTMLInputElement).value)}\r\n                                    className={classes.textField}\r\n                                />\r\n                            )}\r\n                            <IconButton\r\n                                type=\"submit\"\r\n                                color=\"default\"\r\n                                className={classes.sendButton}\r\n                            >\r\n                                <SendIcon style={{ fill: '#5F4B8BFF' }} />\r\n                            </IconButton>\r\n\r\n                        </form>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Thread;"]},"metadata":{},"sourceType":"module"}