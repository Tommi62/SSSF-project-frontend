{"ast":null,"code":"var _jsxFileName = \"/Users/tommivainio/Desktop/chatApp/my-app/src/views/home.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Grid, List, Typography } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport Thread from '../components/thread';\nimport ThreadButton from '../components/threadButton';\nimport { MediaContext } from '../contexts/mediaContext';\nimport { WebsocketContext } from '../contexts/websocketContext';\nimport { useUsers, useChats } from '../hooks/apiHooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = ({\n  history\n}) => {\n  _s();\n\n  const {\n    user,\n    setUser\n  } = useContext(MediaContext);\n  const {\n    websocket,\n    setWebsocket\n  } = useContext(WebsocketContext);\n  const {\n    getIsLoggedIn\n  } = useUsers();\n  const {\n    getThreadIds,\n    getMessages\n  } = useChats();\n  const [threads, setThreads] = useState([]);\n  const [threadOpen, setThreadOpen] = useState(false);\n  const [threadId, setThreadId] = useState(0);\n  const [messages, setMessages] = useState([]);\n  const [webSocketUpdate, setWebSocketUpdate] = useState('');\n  const [socketThreadId, setSocketThreadId] = useState(0);\n  const [socketInterval, setSocketInterval] = useState(Date.now());\n  useEffect(() => {\n    (async () => {\n      try {\n        console.log('USER: ', user);\n        const isLoggedIn = await getIsLoggedIn();\n\n        if (!isLoggedIn.success) {\n          history.push('/login');\n        }\n\n        setUser(isLoggedIn.id);\n        console.log('Logged user: ', user, isLoggedIn.id);\n\n        if (user !== 0) {\n          const chatThreads = await getThreadIds(isLoggedIn.id);\n          setThreads(chatThreads);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [user]);\n  useEffect(() => {\n    (async () => {\n      try {\n        if (threadId !== 0) {\n          const threadMessages = await getMessages(threadId);\n          setMessages(threadMessages);\n          console.log('USEEFFECT');\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [threadId, webSocketUpdate]);\n  useEffect(() => {\n    try {\n      if (threadOpen) {\n        if (websocket === undefined || websocket.readyState === 2 || websocket.readyState === 3 || threadId !== socketThreadId) {\n          console.log('READYSTATE ', websocket === null || websocket === void 0 ? void 0 : websocket.readyState);\n          const socket = new WebSocket('ws://localhost:3001');\n          const checkIfAlive = setInterval(() => {\n            console.log('INTERVAL');\n\n            if (socket.readyState === 3) {\n              console.log('ACTIVED');\n              socket.close();\n              setSocketInterval(Date.now());\n            }\n          }, 60000);\n          socket.addEventListener('open', function (event) {\n            console.log('Server is opened.');\n            const client = {\n              type: 'client',\n              thread_id: threadId,\n              user_id: user\n            };\n            socket.send(JSON.stringify(client));\n          });\n          socket.addEventListener('message', function (event) {\n            if (event.data !== 'ping') {\n              console.log('Message from server ', JSON.parse(event.data).thread_id);\n              const message = JSON.parse(event.data);\n\n              if (message.thread_id === threadId) {\n                setWebSocketUpdate(message.timestamp);\n              }\n            } else {\n              setTimeout(() => socket.send('pong'), 1000);\n            }\n          });\n          socket.addEventListener('close', function (event) {\n            console.log('Websocket connection closed.');\n          });\n          setWebsocket(socket);\n          setSocketThreadId(threadId);\n          console.log('NEW SOCKET');\n        }\n      } else {\n        if (websocket !== undefined) {\n          console.log('CLOSE');\n          websocket.close();\n        }\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n\n    ;\n  }, [threadOpen, threadId, socketInterval]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: threadOpen ? /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        style: {\n          width: '30%'\n        },\n        children: /*#__PURE__*/_jsxDEV(List, {\n          children: [threads.map(item => /*#__PURE__*/_jsxDEV(ThreadButton, {\n            id: item.thread_id,\n            setThreadOpen: setThreadOpen,\n            setThreadId: setThreadId,\n            threadOpen: threadOpen\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 33\n          }, this)), ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        style: {\n          width: '70%'\n        },\n        children: /*#__PURE__*/_jsxDEV(Thread, {\n          messages: messages,\n          id: threadId,\n          websocket: websocket\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justify: \"center\",\n      direction: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        component: \"h1\",\n        variant: \"h2\",\n        children: \"Welcome\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        children: [threads.map(item => /*#__PURE__*/_jsxDEV(ThreadButton, {\n          id: item.thread_id,\n          setThreadOpen: setThreadOpen,\n          setThreadId: setThreadId,\n          threadOpen: threadOpen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 29\n        }, this)), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Home, \"vXhz00inOXU1nVEztn1PUhzx36w=\", false, function () {\n  return [useUsers, useChats];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/tommivainio/Desktop/chatApp/my-app/src/views/home.tsx"],"names":["Grid","List","Typography","useContext","useEffect","useState","Thread","ThreadButton","MediaContext","WebsocketContext","useUsers","useChats","Home","history","user","setUser","websocket","setWebsocket","getIsLoggedIn","getThreadIds","getMessages","threads","setThreads","threadOpen","setThreadOpen","threadId","setThreadId","messages","setMessages","webSocketUpdate","setWebSocketUpdate","socketThreadId","setSocketThreadId","socketInterval","setSocketInterval","Date","now","console","log","isLoggedIn","success","push","id","chatThreads","e","message","threadMessages","undefined","readyState","socket","WebSocket","checkIfAlive","setInterval","close","addEventListener","event","client","type","thread_id","user_id","send","JSON","stringify","data","parse","timestamp","setTimeout","width","map","item"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { Grid, List, Typography } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport Thread from '../components/thread';\nimport ThreadButton from '../components/threadButton';\nimport { MediaContext } from '../contexts/mediaContext';\nimport { WebsocketContext } from '../contexts/websocketContext';\nimport { useUsers, useChats } from '../hooks/apiHooks';\n\ninterface propType {\n    history: {\n        push: Function,\n    }\n}\n\ninterface threadsArray {\n    thread_id: number\n}\n\ninterface messagesArray {\n    id: number,\n    user_id: number,\n    contents: string,\n    timestamp: Date,\n}\n\nconst Home = ({ history }: propType) => {\n    const { user, setUser } = useContext(MediaContext);\n    const { websocket, setWebsocket } = useContext(WebsocketContext);\n    const { getIsLoggedIn } = useUsers();\n    const { getThreadIds, getMessages } = useChats();\n    const [threads, setThreads] = useState<threadsArray[]>([]);\n    const [threadOpen, setThreadOpen] = useState(false)\n    const [threadId, setThreadId] = useState(0)\n    const [messages, setMessages] = useState<messagesArray[]>([]);\n    const [webSocketUpdate, setWebSocketUpdate] = useState('');\n    const [socketThreadId, setSocketThreadId] = useState(0);\n    const [socketInterval, setSocketInterval] = useState(Date.now());\n\n    useEffect(() => {\n        (async () => {\n            try {\n                console.log('USER: ', user)\n                const isLoggedIn = await getIsLoggedIn();\n                if (!isLoggedIn.success) {\n                    history.push('/login');\n                }\n                setUser(isLoggedIn.id)\n                console.log('Logged user: ', user, isLoggedIn.id);\n                if (user !== 0) {\n                    const chatThreads = await getThreadIds(isLoggedIn.id)\n                    setThreads(chatThreads)\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [user]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                if (threadId !== 0) {\n                    const threadMessages = await getMessages(threadId);\n                    setMessages(threadMessages);\n                    console.log('USEEFFECT');\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [threadId, webSocketUpdate]);\n\n    useEffect(() => {\n        try {\n            if (threadOpen) {\n                if (websocket === undefined || websocket.readyState === 2 || websocket.readyState === 3 || threadId !== socketThreadId) {\n                    console.log('READYSTATE ', websocket?.readyState)\n                    const socket = new WebSocket('ws://localhost:3001');\n                    const checkIfAlive = setInterval(() => {\n                        console.log('INTERVAL');\n                        if (socket.readyState === 3) {\n                            console.log('ACTIVED');\n                            socket.close();\n                            setSocketInterval(Date.now());\n                        }\n                    }, 60000);\n\n                    socket.addEventListener('open', function (event) {\n                        console.log('Server is opened.');\n                        const client = {\n                            type: 'client',\n                            thread_id: threadId,\n                            user_id: user,\n                        }\n                        socket.send(JSON.stringify(client));\n                    });\n\n                    socket.addEventListener('message', function (event) {\n                        if (event.data !== 'ping') {\n                            console.log('Message from server ', JSON.parse(event.data).thread_id);\n                            const message = JSON.parse(event.data);\n                            if (message.thread_id === threadId) {\n                                setWebSocketUpdate(message.timestamp);\n                            }\n                        } else {\n                            setTimeout(() => socket.send('pong'), 1000);\n                        }\n                    });\n\n                    socket.addEventListener('close', function (event) {\n                        console.log('Websocket connection closed.');\n                    });\n\n                    setWebsocket(socket);\n                    setSocketThreadId(threadId);\n                    console.log('NEW SOCKET');\n                }\n            } else {\n                if (websocket !== undefined) {\n                    console.log('CLOSE');\n                    websocket.close();\n                }\n            }\n        } catch (e) {\n            console.log(e.message);\n        };\n    }, [threadOpen, threadId, socketInterval]);\n\n\n    return (\n        <>\n            {threadOpen ? (\n                <Grid container direction=\"row\">\n                    <Grid item style={{ width: '30%' }}>\n                        <List>\n                            {threads.map((item) => (\n                                <ThreadButton id={item.thread_id} setThreadOpen={setThreadOpen} setThreadId={setThreadId} threadOpen={threadOpen} />\n                            ))}{' '}\n                        </List>\n                    </Grid>\n                    <Grid item style={{ width: '70%' }}>\n                        <Thread messages={messages} id={threadId} websocket={websocket} />\n                    </Grid>\n                </Grid>\n            ) : (\n                <Grid container justify=\"center\" direction=\"column\">\n                    <Typography component=\"h1\" variant=\"h2\">Welcome</Typography>\n                    <List>\n                        {threads.map((item) => (\n                            <ThreadButton id={item.thread_id} setThreadOpen={setThreadOpen} setThreadId={setThreadId} threadOpen={threadOpen} />\n                        ))}{' '}\n                    </List>\n                </Grid>\n            )}\n        </>\n    );\n\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}