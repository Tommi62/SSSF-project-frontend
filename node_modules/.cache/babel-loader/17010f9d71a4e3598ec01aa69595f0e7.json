{"ast":null,"code":"var _jsxFileName = \"/Users/tommivainio/Projektit/chatApp/my-app/src/components/registerForm.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport useForm from '../hooks/formHooks';\nimport { useUsers } from '../hooks/apiHooks';\nimport { Grid, Typography, Button } from '@material-ui/core';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { useEffect } from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  registerHeader: {\n    [theme.breakpoints.down(600)]: {\n      fontSize: '2rem'\n    }\n  },\n  registerButton: {\n    backgroundColor: '#5F4B8BFF',\n    marginTop: '2rem',\n    marginBottom: '0.5rem',\n    '&:hover': {\n      backgroundColor: '#7159a6'\n    }\n  }\n}));\n\nconst RegisterForm = ({\n  setToggle\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    register,\n    getUserAvailable\n  } = useUsers();\n  const validators = {\n    username: ['required', 'minStringLength: 3', 'maxStringLength: 15', 'isAvailable'],\n    password: ['required', 'minStringLength: 5'],\n    confirm: ['required', 'isPasswordMatch']\n  };\n  const errorMessages = {\n    username: ['Required field', 'Minimum of 3 characters', 'Too many characters!', 'Username is not available'],\n    password: ['Required field', 'Minimum of 5 characters'],\n    confirm: ['Required field', 'Passwords do not match']\n  };\n\n  const doRegister = async () => {\n    try {\n      const available = await getUserAvailable(inputs.username);\n\n      if (available) {\n        delete inputs.confirm;\n        const result = await register(inputs);\n\n        if (result.length > 0) {\n          alert(result);\n          setToggle(true);\n        }\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n\n  const {\n    inputs,\n    handleInputChange,\n    handleSubmit\n  } = useForm(doRegister, {\n    username: '',\n    password: '',\n    confirm: ''\n  });\n  useEffect(() => {\n    ValidatorForm.addValidationRule('isAvailable', async value => {\n      if (value.length > 2) {\n        try {\n          const available = await getUserAvailable(value);\n          return available;\n        } catch (e) {\n          console.log(e.message);\n          return true;\n        }\n      }\n    });\n    ValidatorForm.addValidationRule('isPasswordMatch', value => value === inputs.password);\n  }, [inputs]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    alignItems: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 0,\n      direction: \"column\",\n      alignItems: \"center\",\n      justify: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.registerHeader,\n        component: \"h3\",\n        variant: \"h3\",\n        gutterBottom: true,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      container: true,\n      direction: \"column\",\n      alignItems: \"center\",\n      children: /*#__PURE__*/_jsxDEV(ValidatorForm, {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(TextValidator, {\n              fullWidth: true,\n              type: \"text\",\n              name: \"username\",\n              label: \"Username\",\n              onChange: handleInputChange,\n              value: inputs.username,\n              validators: validators.username,\n              errorMessages: errorMessages.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(TextValidator, {\n              fullWidth: true,\n              type: \"password\",\n              name: \"password\",\n              label: \"Password\",\n              onChange: handleInputChange,\n              value: inputs.password,\n              validators: validators.password,\n              errorMessages: errorMessages.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(TextValidator, {\n              fullWidth: true,\n              type: \"password\",\n              name: \"confirm\",\n              label: \"Confirm password\",\n              onChange: handleInputChange,\n              value: inputs.confirm,\n              validators: validators.confirm,\n              errorMessages: errorMessages.confirm\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              style: {\n                marginTop: '2rem',\n                marginBottom: '0.5rem'\n              },\n              fullWidth: true,\n              color: \"primary\",\n              type: \"submit\",\n              variant: \"contained\",\n              children: \"Register\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n\n_s(RegisterForm, \"5VwXBCPQjAuF/fYLBK+G01eR9bs=\", false, function () {\n  return [useStyles, useUsers, useForm];\n});\n\n_c = RegisterForm;\nexport default RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"sources":["/Users/tommivainio/Projektit/chatApp/my-app/src/components/registerForm.tsx"],"names":["useForm","useUsers","Grid","Typography","Button","ValidatorForm","TextValidator","useEffect","makeStyles","useStyles","theme","registerHeader","breakpoints","down","fontSize","registerButton","backgroundColor","marginTop","marginBottom","RegisterForm","setToggle","classes","register","getUserAvailable","validators","username","password","confirm","errorMessages","doRegister","available","inputs","result","length","alert","e","console","log","message","handleInputChange","handleSubmit","addValidationRule","value"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport useForm from '../hooks/formHooks';\r\nimport { useUsers } from '../hooks/apiHooks';\r\nimport { Grid, Typography, Button } from '@material-ui/core';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\nimport { useEffect } from 'react';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    registerHeader: {\r\n        [theme.breakpoints.down(600)]: {\r\n            fontSize: '2rem'\r\n        },\r\n    },\r\n    registerButton: {\r\n        backgroundColor: '#5F4B8BFF',\r\n        marginTop: '2rem',\r\n        marginBottom: '0.5rem',\r\n        '&:hover': {\r\n            backgroundColor: '#7159a6',\r\n        },\r\n    }\r\n}));\r\n\r\ninterface propType {\r\n    setToggle: Function\r\n}\r\n\r\nconst RegisterForm = ({ setToggle }: propType) => {\r\n    const classes = useStyles();\r\n    const { register, getUserAvailable } = useUsers();\r\n    const validators = {\r\n        username: ['required', 'minStringLength: 3', 'maxStringLength: 15', 'isAvailable'],\r\n        password: ['required', 'minStringLength: 5'],\r\n        confirm: ['required', 'isPasswordMatch'],\r\n    };\r\n\r\n    const errorMessages = {\r\n        username: [\r\n            'Required field',\r\n            'Minimum of 3 characters',\r\n            'Too many characters!',\r\n            'Username is not available',\r\n        ],\r\n        password: ['Required field', 'Minimum of 5 characters'],\r\n        confirm: ['Required field', 'Passwords do not match'],\r\n    };\r\n\r\n    const doRegister = async () => {\r\n        try {\r\n            const available = await getUserAvailable(inputs.username);\r\n            if (available) {\r\n                delete inputs.confirm;\r\n                const result = await register(inputs);\r\n                if (result.length > 0) {\r\n                    alert(result);\r\n                    setToggle(true);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message);\r\n        }\r\n    };\r\n\r\n    const { inputs, handleInputChange, handleSubmit } = useForm(doRegister, {\r\n        username: '',\r\n        password: '',\r\n        confirm: '',\r\n    });\r\n\r\n    useEffect(() => {\r\n        ValidatorForm.addValidationRule('isAvailable', async (value) => {\r\n            if (value.length > 2) {\r\n                try {\r\n                    const available = await getUserAvailable(value);\r\n                    return available;\r\n                } catch (e) {\r\n                    console.log(e.message);\r\n                    return true;\r\n                }\r\n            }\r\n        });\r\n\r\n        ValidatorForm.addValidationRule(\r\n            'isPasswordMatch',\r\n            (value) => value === inputs.password\r\n        );\r\n    }, [inputs]);\r\n\r\n    return (\r\n        <Grid container alignItems=\"center\">\r\n            <Grid\r\n                container\r\n                spacing={0}\r\n                direction=\"column\"\r\n                alignItems=\"center\"\r\n                justify=\"center\"\r\n            >\r\n                <Typography className={classes.registerHeader} component=\"h3\" variant=\"h3\" gutterBottom>\r\n                    Register\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item xs={12} container direction=\"column\" alignItems=\"center\">\r\n                <ValidatorForm onSubmit={handleSubmit}>\r\n                    <Grid container direction=\"column\">\r\n                        <Grid container item>\r\n                            <TextValidator\r\n                                fullWidth\r\n                                type=\"text\"\r\n                                name=\"username\"\r\n                                label=\"Username\"\r\n                                onChange={handleInputChange}\r\n                                value={inputs.username}\r\n                                validators={validators.username}\r\n                                errorMessages={errorMessages.username}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid container item>\r\n                            <TextValidator\r\n                                fullWidth\r\n                                type=\"password\"\r\n                                name=\"password\"\r\n                                label=\"Password\"\r\n                                onChange={handleInputChange}\r\n                                value={inputs.password}\r\n                                validators={validators.password}\r\n                                errorMessages={errorMessages.password}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid container item>\r\n                            <TextValidator\r\n                                fullWidth\r\n                                type=\"password\"\r\n                                name=\"confirm\"\r\n                                label=\"Confirm password\"\r\n                                onChange={handleInputChange}\r\n                                value={inputs.confirm}\r\n                                validators={validators.confirm}\r\n                                errorMessages={errorMessages.confirm}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid container item>\r\n                            <Button\r\n                                style={{ marginTop: '2rem', marginBottom: '0.5rem' }}\r\n                                fullWidth\r\n                                color=\"primary\"\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                            >\r\n                                Register\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </ValidatorForm>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default RegisterForm;"]},"metadata":{},"sourceType":"module"}