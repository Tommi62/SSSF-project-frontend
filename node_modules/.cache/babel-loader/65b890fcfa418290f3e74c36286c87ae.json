{"ast":null,"code":"var _jsxFileName = \"/Users/tommivainio/Desktop/chatApp/my-app/src/components/thread.tsx\",\n    _s = $RefreshSig$();\n\nimport { Grid, List, TextField } from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport { IconButton } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport { MediaContext } from '../contexts/mediaContext';\nimport { useChats } from '../hooks/apiHooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Thread = ({\n  id\n}) => {\n  _s();\n\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const {\n    user\n  } = useContext(MediaContext);\n  const {\n    postMessage\n  } = useChats();\n  console.log('YYSER: ', user);\n  useEffect(() => {\n    (async () => {\n      try {\n        console.log('USER: ', user);\n        const isLoggedIn = await getIsLoggedIn();\n\n        if (!isLoggedIn.success) {\n          history.push('/login');\n        }\n\n        setUser(isLoggedIn.id);\n        console.log('Logged user: ', user, isLoggedIn.id);\n\n        if (user !== 0) {\n          const chatThreads = await getThreadIds(isLoggedIn.id);\n          setThreads(chatThreads);\n          console.log('THREADS: ', chatThreads[0].thread_id, threads);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [user]);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const timestamp = new Date();\n    const messageObject = JSON.stringify({\n      contents: message,\n      timestamp: timestamp,\n      user_id: user,\n      thread_id: id\n    });\n    const success = await postMessage(messageObject);\n    console.log('SUCCESS: ', success);\n    setMessage('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justify: \"center\",\n      direction: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        justify: \"center\",\n        children: /*#__PURE__*/_jsxDEV(List, {\n          children: [threads.map(item => /*#__PURE__*/_jsxDEV(ThreadButton, {\n            id: item.thread_id,\n            setThreadOpen: setThreadOpen,\n            setThreadId: setThreadId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 29\n          }, this)), ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        justify: \"center\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            id: \"input-with-icon-grid\",\n            value: message,\n            onInput: event => setMessage(event.target.value),\n            style: {\n              width: '20rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"delete\",\n            type: \"submit\",\n            color: \"default\",\n            children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Thread, \"2/JL6ddEAtSi69YoQvvRuTO1ZPU=\", false, function () {\n  return [useChats];\n});\n\n_c = Thread;\nexport default Thread;\n\nvar _c;\n\n$RefreshReg$(_c, \"Thread\");","map":{"version":3,"sources":["/Users/tommivainio/Desktop/chatApp/my-app/src/components/thread.tsx"],"names":["Grid","List","TextField","SendIcon","IconButton","useContext","useEffect","useState","MediaContext","useChats","Thread","id","message","setMessage","messages","setMessages","user","postMessage","console","log","isLoggedIn","getIsLoggedIn","success","history","push","setUser","chatThreads","getThreadIds","setThreads","thread_id","threads","e","handleSubmit","event","preventDefault","timestamp","Date","messageObject","JSON","stringify","contents","user_id","map","item","setThreadOpen","setThreadId","target","value","width"],"mappings":"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","sourcesContent":["import { Grid, List, TextField } from '@material-ui/core';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { FormEvent, useContext, useEffect, useState } from 'react';\r\nimport { MediaContext } from '../contexts/mediaContext';\r\nimport { useChats } from '../hooks/apiHooks';\r\n\r\ninterface propType {\r\n    id: number\r\n}\r\n\r\n\r\nconst Thread = ({ id }: propType) => {\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState<messagesArray[]>([]);\r\n    const { user } = useContext(MediaContext);\r\n    const { postMessage } = useChats();\r\n    console.log('YYSER: ', user)\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                console.log('USER: ', user)\r\n                const isLoggedIn = await getIsLoggedIn();\r\n                if (!isLoggedIn.success) {\r\n                    history.push('/login');\r\n                }\r\n                setUser(isLoggedIn.id)\r\n                console.log('Logged user: ', user, isLoggedIn.id);\r\n                if (user !== 0) {\r\n                    const chatThreads = await getThreadIds(isLoggedIn.id)\r\n                    setThreads(chatThreads)\r\n                    console.log('THREADS: ', chatThreads[0].thread_id, threads)\r\n                }\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        })();\r\n    }, [user]);\r\n\r\n    const handleSubmit = async (event: FormEvent) => {\r\n        event.preventDefault();\r\n        const timestamp = new Date()\r\n        const messageObject = JSON.stringify({\r\n            contents: message,\r\n            timestamp: timestamp,\r\n            user_id: user,\r\n            thread_id: id,\r\n\r\n        });\r\n        const success = await postMessage(messageObject)\r\n        console.log('SUCCESS: ', success)\r\n        setMessage('');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify=\"center\" direction=\"column\">\r\n                <Grid item justify=\"center\">\r\n                    <List>\r\n                        {threads.map((item) => (\r\n                            <ThreadButton id={item.thread_id} setThreadOpen={setThreadOpen} setThreadId={setThreadId} />\r\n                        ))}{' '}\r\n                    </List>\r\n                </Grid>\r\n                <Grid item justify=\"center\">\r\n                    <form\r\n                        onSubmit={handleSubmit}\r\n                    >\r\n\r\n                        <TextField\r\n                            id=\"input-with-icon-grid\"\r\n                            value={message}\r\n                            onInput={(event) => setMessage((event.target as HTMLInputElement).value)}\r\n                            style={{ width: '20rem' }}\r\n                        />\r\n                        <IconButton\r\n                            aria-label=\"delete\"\r\n                            type=\"submit\"\r\n                            color=\"default\"\r\n                        >\r\n                            <SendIcon />\r\n                        </IconButton>\r\n\r\n                    </form>\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Thread;"]},"metadata":{},"sourceType":"module"}