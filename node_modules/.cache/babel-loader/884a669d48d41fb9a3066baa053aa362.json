{"ast":null,"code":"import _slicedToArray from\"/Users/tommivainio/Projektit/chatApp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from'react';var getWindowDimensions=function getWindowDimensions(){var _window=window,width=_window.innerWidth,height=_window.innerHeight;return{width:width,height:height};};export default function useWindowDimensions(){var _useState=useState(getWindowDimensions()),_useState2=_slicedToArray(_useState,2),windowDimensions=_useState2[0],setWindowDimensions=_useState2[1];useEffect(function(){function handleResize(){setWindowDimensions(getWindowDimensions());}window.addEventListener('resize',handleResize);return function(){return window.removeEventListener('resize',handleResize);};},[]);return windowDimensions;}","map":{"version":3,"sources":["/Users/tommivainio/Projektit/chatApp/my-app/src/hooks/windowDimensionsHook.tsx"],"names":["useState","useEffect","getWindowDimensions","window","width","innerWidth","height","innerHeight","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener"],"mappings":"kKAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CAC9B,YAAmDC,MAAnD,CAAoBC,KAApB,SAAQC,UAAR,CAAwCC,MAAxC,SAA2BC,WAA3B,CACA,MAAO,CACHH,KAAK,CAALA,KADG,CAEHE,MAAM,CAANA,MAFG,CAAP,CAIH,CAND,CAQA,cAAe,SAASE,CAAAA,mBAAT,EAA+B,CAC1C,cAAgDR,QAAQ,CACpDE,mBAAmB,EADiC,CAAxD,wCAAOO,gBAAP,eAAyBC,mBAAzB,eAIAT,SAAS,CAAC,UAAM,CACZ,QAASU,CAAAA,YAAT,EAAwB,CACpBD,mBAAmB,CAACR,mBAAmB,EAApB,CAAnB,CACH,CAEDC,MAAM,CAACS,gBAAP,CAAwB,QAAxB,CAAkCD,YAAlC,EACA,MAAO,kBAAMR,CAAAA,MAAM,CAACU,mBAAP,CAA2B,QAA3B,CAAqCF,YAArC,CAAN,EAAP,CACH,CAPQ,CAON,EAPM,CAAT,CASA,MAAOF,CAAAA,gBAAP,CACH","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst getWindowDimensions = () => {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height,\n    };\n};\n\nexport default function useWindowDimensions() {\n    const [windowDimensions, setWindowDimensions] = useState(\n        getWindowDimensions()\n    );\n\n    useEffect(() => {\n        function handleResize() {\n            setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return windowDimensions;\n}"]},"metadata":{},"sourceType":"module"}