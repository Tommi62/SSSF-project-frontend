{"ast":null,"code":"var _jsxFileName = \"/Users/tommivainio/Desktop/chatApp/my-app/src/components/threadButton.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Button } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useChats } from '../hooks/apiHooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ThreadButton = ({\n  id,\n  setThreadOpen,\n  setThreadId,\n  threadOpen\n}) => {\n  _s();\n\n  const {\n    getThreadName\n  } = useChats();\n  const [name, setName] = useState('');\n  useEffect(() => {\n    (async () => {\n      try {\n        console.log('THREADBUTTON: ', id);\n        const threadName = await getThreadName(id);\n        console.log('THREADNAME: ', threadName);\n        setName(threadName);\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, []);\n\n  const openThread = () => {\n    setThreadOpen(true);\n    setThreadId(id);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      onClick: openThread,\n      color: \"primary\",\n      variant: \"contained\",\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(ThreadButton, \"8/zU4n0oSp3uev0c+0AXC8cTLsw=\", false, function () {\n  return [useChats];\n});\n\n_c = ThreadButton;\nexport default ThreadButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreadButton\");","map":{"version":3,"sources":["/Users/tommivainio/Desktop/chatApp/my-app/src/components/threadButton.tsx"],"names":["Button","useState","useEffect","useChats","ThreadButton","id","setThreadOpen","setThreadId","threadOpen","getThreadName","name","setName","console","log","threadName","e","message","openThread"],"mappings":";;;AAAA;AACA,SAASA,MAAT,QAAuB,mBAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,mBAAzB;;;;AASA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,aAAN;AAAqBC,EAAAA,WAArB;AAAkCC,EAAAA;AAAlC,CAAD,KAA8D;AAAA;;AAC/E,QAAM;AAAEC,IAAAA;AAAF,MAAoBN,QAAQ,EAAlC;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAY;AACT,UAAI;AACAU,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BR,EAA9B;AACA,cAAMS,UAAU,GAAG,MAAML,aAAa,CAACJ,EAAD,CAAtC;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BC,UAA5B;AACAH,QAAAA,OAAO,CAACG,UAAD,CAAP;AACH,OALD,CAKE,OAAOC,CAAP,EAAU;AACRH,QAAAA,OAAO,CAACC,GAAR,CAAYE,CAAC,CAACC,OAAd;AACH;AACJ,KATD;AAUH,GAXQ,EAWN,EAXM,CAAT;;AAaA,QAAMC,UAAU,GAAG,MAAM;AACrBX,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAC,IAAAA,WAAW,CAACF,EAAD,CAAX;AACH,GAHD;;AAKA,sBACI;AAAA,2BACI,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEY,UAAjB;AAA6B,MAAA,KAAK,EAAC,SAAnC;AAA6C,MAAA,OAAO,EAAC,WAArD;AAAA,gBAAkEP;AAAlE;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAKH,CA3BD;;GAAMN,Y;UACwBD,Q;;;KADxBC,Y;AA6BN,eAAeA,YAAf","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { Button } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useChats } from '../hooks/apiHooks';\r\n\r\ninterface propType {\r\n    id: number,\r\n    setThreadOpen: Function,\r\n    setThreadId: Function,\r\n    threadOpen: Boolean,\r\n}\r\n\r\nconst ThreadButton = ({ id, setThreadOpen, setThreadId, threadOpen }: propType) => {\r\n    const { getThreadName } = useChats();\r\n    const [name, setName] = useState('');\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                console.log('THREADBUTTON: ', id)\r\n                const threadName = await getThreadName(id)\r\n                console.log('THREADNAME: ', threadName)\r\n                setName(threadName)\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    const openThread = () => {\r\n        setThreadOpen(true)\r\n        setThreadId(id)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={openThread} color=\"primary\" variant=\"contained\">{name}</Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ThreadButton"]},"metadata":{},"sourceType":"module"}