{"ast":null,"code":"var _jsxFileName = \"C:\\\\USERS\\\\Tommi Vainio\\\\desktop\\\\chatApp\\\\my-app\\\\src\\\\contexts\\\\mediaContext.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MediaContext = /*#__PURE__*/React.createContext({});\n\nconst MediaProvider = ({\n  children\n}) => {\n  _s();\n\n  const [user, setUser] = useState(null);\n  return /*#__PURE__*/_jsxDEV(MediaContext.Provider, {\n    value: [user, setUser],\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MediaProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n\n_c = MediaProvider;\nMediaProvider.propTypes = {\n  children: PropTypes.node\n};\nexport { MediaContext, MediaProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"MediaProvider\");","map":{"version":3,"sources":["C:/USERS/Tommi Vainio/desktop/chatApp/my-app/src/contexts/mediaContext.tsx"],"names":["React","useState","PropTypes","MediaContext","createContext","MediaProvider","children","user","setUser","propTypes","node"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAOA,MAAMC,YAAY,gBAAGH,KAAK,CAACI,aAAN,CAAoB,EAApB,CAArB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA4B;AAAA;;AAC9C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,IAAD,CAAhC;AACA,sBACI,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE,CAACM,IAAD,EAAOC,OAAP,CAA9B;AAAA,cACKF;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAPD;;GAAMD,a;;KAAAA,a;AASNA,aAAa,CAACI,SAAd,GAA0B;AACtBH,EAAAA,QAAQ,EAAEJ,SAAS,CAACQ;AADE,CAA1B;AAIA,SAASP,YAAT,EAAuBE,aAAvB","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Node } from 'typescript';\r\n\r\ninterface propType {\r\n    children: Node\r\n}\r\n\r\nconst MediaContext = React.createContext({});\r\n\r\nconst MediaProvider = ({ children }: propType) => {\r\n    const [user, setUser] = useState(null);\r\n    return (\r\n        <MediaContext.Provider value={[user, setUser]}>\r\n            {children}\r\n        </MediaContext.Provider>\r\n    );\r\n};\r\n\r\nMediaProvider.propTypes = {\r\n    children: PropTypes.node,\r\n};\r\n\r\nexport { MediaContext, MediaProvider };"]},"metadata":{},"sourceType":"module"}