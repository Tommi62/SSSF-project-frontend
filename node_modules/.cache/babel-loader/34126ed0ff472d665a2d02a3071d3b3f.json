{"ast":null,"code":"var _jsxFileName = \"/Users/tommivainio/Projektit/chatApp/my-app/src/views/home.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Button, Grid, List, Typography } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport Thread from '../components/thread';\nimport ThreadButton from '../components/threadButton';\nimport Modal from '../components/modal';\nimport { MediaContext } from '../contexts/mediaContext';\nimport { WebsocketContext } from '../contexts/websocketContext';\nimport { useUsers, useChats } from '../hooks/apiHooks';\nimport useWindowDimensions from '../hooks/windowDimensionsHook';\nimport { useMediaQuery } from 'react-responsive';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  newThreadButton: {\n    backgroundColor: '#5F4B8BFF',\n    marginTop: '1rem',\n    '&:hover': {\n      backgroundColor: '#7159a6'\n    },\n    [theme.breakpoints.down(1000)]: {\n      fontSize: '0.8rem',\n      padding: '6px 10px'\n    },\n    [theme.breakpoints.down(800)]: {\n      fontSize: '0.7rem',\n      padding: '6px 6px'\n    },\n    [theme.breakpoints.down(600)]: {\n      fontSize: '0.875rem',\n      padding: '6px 16px'\n    }\n  },\n  desktopContainer: {\n    [theme.breakpoints.up(1280)]: {\n      width: '70vw'\n    }\n  }\n}));\n\nconst Home = ({\n  history\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    user,\n    setUser\n  } = useContext(MediaContext);\n  const [username, setusername] = useState('');\n  const {\n    websocket,\n    setWebsocket\n  } = useContext(WebsocketContext);\n  const {\n    getIsLoggedIn\n  } = useUsers();\n  const {\n    getThreadIds,\n    getMessages\n  } = useChats();\n  const {\n    height\n  } = useWindowDimensions();\n  const [heightCorrected, setHeightCorrected] = useState(height - 64);\n  const [threads, setThreads] = useState([]);\n  const [sortedThreads, setSortedThreads] = useState([]);\n  const [threadOpen, setThreadOpen] = useState(false);\n  const [threadId, setThreadId] = useState(0);\n  const [messages, setMessages] = useState([]);\n  const [updateState, setUpdateState] = useState(Date.now());\n  const [updateThreadButtons, setUpdateThreadButtons] = useState(Date.now());\n  const [updateThreadButtonInfos, setUpdateThreadButtonInfos] = useState(Date.now());\n  const [messageAmount, setMessageAmount] = useState(50);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [wsMessage, setWsMessage] = useState({\n    type: '',\n    contents: '',\n    timestamp: new Date(),\n    user_id: 0,\n    thread_id: 0\n  });\n  const isMobile = useMediaQuery({\n    query: '(max-width: 600px)'\n  });\n  const isDesktop = useMediaQuery({\n    query: '(min-width: 1280px)'\n  });\n  useEffect(() => {\n    try {\n      if (isMobile) {\n        setHeightCorrected(height - 56);\n      } else {\n        setHeightCorrected(height - 64);\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n  }, [isMobile]);\n  useEffect(() => {\n    (async () => {\n      try {\n        console.log('USER: ', user);\n        const isLoggedIn = await getIsLoggedIn();\n\n        if (!isLoggedIn.success) {\n          history.push('/login');\n        }\n\n        setUser(isLoggedIn.id);\n        const name = await getUsernameById(userIds[i].user_id);\n        console.log('Logged user: ', user, isLoggedIn.id);\n\n        if (user !== 0) {\n          const chatThreads = await getThreadIds(isLoggedIn.id);\n          setThreads(chatThreads);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [user, updateThreadButtons]);\n  useEffect(() => {\n    (async () => {\n      try {\n        if (threads.length > 0) {\n          let idArray = [];\n\n          for (let i = 0; i < threads.length; i++) {\n            const threadMessages = await getMessages(threads[i].thread_id);\n            const threadIdObject = {\n              id: threads[i].thread_id,\n              timestamp: threadMessages.length > 0 ? threadMessages[0].timestamp : '1999-02-06T05:47:00'\n            };\n            idArray.push(threadIdObject);\n          }\n\n          idArray.sort((a, b) => a.timestamp < b.timestamp ? 1 : b.timestamp < a.timestamp ? -1 : 0);\n          console.log('IDARRAY', idArray);\n          setSortedThreads(idArray);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [threads, updateThreadButtonInfos]);\n  useEffect(() => {\n    (async () => {\n      try {\n        if (threadId !== 0) {\n          const threadMessages = await getMessages(threadId);\n          const reversedArray = threadMessages.reverse();\n          setMessages(reversedArray);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, [threadId, updateState]);\n  useEffect(() => {\n    try {\n      if (wsMessage.type !== '' && wsMessage.thread_id === threadId) {\n        const newMessageObject = {\n          id: Date.now(),\n          user_id: wsMessage.user_id,\n          contents: wsMessage.contents,\n          timestamp: wsMessage.timestamp\n        };\n        setMessages(messages => [...messages, newMessageObject]);\n        setMessageAmount(messageAmount + 1);\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n  }, [wsMessage]);\n  useEffect(() => {\n    try {\n      if (threads.length !== 0) {\n        if (websocket === undefined || websocket.readyState === 2 || websocket.readyState === 3) {\n          console.log('READYSTATE ', websocket === null || websocket === void 0 ? void 0 : websocket.readyState);\n          const socket = new WebSocket('ws://localhost:3001');\n          socket.addEventListener('open', function (event) {\n            console.log('Server is opened.');\n            const client = {\n              type: 'client',\n              user_id: user,\n              threads: threads\n            };\n            socket.send(JSON.stringify(client));\n          });\n          socket.addEventListener('message', function (event) {\n            if (event.data !== 'ping') {\n              console.log('Message from server ', JSON.parse(event.data).thread_id);\n              const message = JSON.parse(event.data);\n\n              if (message.type === 'message') {\n                setWsMessage(message);\n                setUpdateThreadButtonInfos(Date.now());\n              } else if (message.type === 'newThread') {\n                setUpdateThreadButtons(Date.now());\n              }\n            } else {\n              setTimeout(() => socket.send('pong'), 1000);\n            }\n          });\n          socket.addEventListener('close', function (event) {\n            console.log('Websocket connection closed.');\n            setUpdateState(Date.now());\n          });\n          setWebsocket(socket);\n          console.log('NEW SOCKET');\n        }\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n\n    ;\n  }, [updateState, threads]);\n\n  const setCreateNewChatThreadOpen = () => {\n    setModalOpen(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isMobile ? /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"column\",\n      style: {\n        height: heightCorrected\n      },\n      children: threadOpen ? /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Thread, {\n          messages: messages,\n          id: threadId,\n          websocket: websocket,\n          messageAmount: messageAmount,\n          setMessageAmount: setMessageAmount,\n          setThreadOpen: setThreadOpen,\n          setThreadId: setThreadId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: setCreateNewChatThreadOpen,\n          color: \"primary\",\n          variant: \"contained\",\n          className: classes.newThreadButton,\n          children: \"Create a new chat thread\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          style: {\n            borderTop: '1px solid #5F4B8BFF',\n            marginTop: '1rem'\n          },\n          children: /*#__PURE__*/_jsxDEV(List, {\n            style: {\n              padding: 0,\n              width: '100vw'\n            },\n            children: [sortedThreads.map(item => /*#__PURE__*/_jsxDEV(ThreadButton, {\n              id: item.id,\n              setThreadOpen: setThreadOpen,\n              setThreadId: setThreadId,\n              threadOpen: threadOpen,\n              threadId: threadId,\n              updateThreadButtonInfos: updateThreadButtonInfos\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 41\n            }, this)), ' ']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isDesktop ? /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          width: '70vw',\n          margin: 'auto'\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"row\",\n          style: {\n            height: heightCorrected\n          },\n          className: classes.desktopContainer,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            style: {\n              width: '30%',\n              borderRight: '1px solid #5F4B8BFF',\n              maxHeight: heightCorrected,\n              overflowY: 'auto'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: setCreateNewChatThreadOpen,\n              color: \"primary\",\n              variant: \"contained\",\n              className: classes.newThreadButton,\n              children: \"Create a new chat thread\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              style: {\n                borderTop: '1px solid #5F4B8BFF',\n                marginTop: '1rem'\n              },\n              children: /*#__PURE__*/_jsxDEV(List, {\n                style: {\n                  padding: 0,\n                  width: '100%'\n                },\n                children: [sortedThreads.map(item => /*#__PURE__*/_jsxDEV(ThreadButton, {\n                  id: item.id,\n                  setThreadOpen: setThreadOpen,\n                  setThreadId: setThreadId,\n                  threadOpen: threadOpen,\n                  threadId: threadId,\n                  updateThreadButtonInfos: updateThreadButtonInfos\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 49\n                }, this)), ' ']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            style: {\n              width: '70%'\n            },\n            children: threadOpen ? /*#__PURE__*/_jsxDEV(Thread, {\n              messages: messages,\n              id: threadId,\n              websocket: websocket,\n              messageAmount: messageAmount,\n              setMessageAmount: setMessageAmount,\n              setThreadOpen: setThreadOpen,\n              setThreadId: setThreadId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              alignItems: \"center\",\n              justify: \"center\",\n              direction: \"column\",\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                component: \"h1\",\n                variant: \"h2\",\n                children: \"Welcome\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                component: \"div\",\n                variant: \"body1\",\n                children: \"This is Chat App made by Tommi.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"row\",\n        style: {\n          height: heightCorrected\n        },\n        className: classes.desktopContainer,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          style: {\n            width: '30%',\n            borderRight: '1px solid #5F4B8BFF',\n            maxHeight: heightCorrected,\n            overflowY: 'auto'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: setCreateNewChatThreadOpen,\n            color: \"primary\",\n            variant: \"contained\",\n            className: classes.newThreadButton,\n            children: \"Create a new chat thread\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            style: {\n              borderTop: '1px solid #5F4B8BFF',\n              marginTop: '1rem'\n            },\n            children: /*#__PURE__*/_jsxDEV(List, {\n              style: {\n                padding: 0,\n                width: '100%'\n              },\n              children: [sortedThreads.map(item => /*#__PURE__*/_jsxDEV(ThreadButton, {\n                id: item.id,\n                setThreadOpen: setThreadOpen,\n                setThreadId: setThreadId,\n                threadOpen: threadOpen,\n                threadId: threadId,\n                updateThreadButtonInfos: updateThreadButtonInfos\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 45\n              }, this)), ' ']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          style: {\n            width: '70%'\n          },\n          children: threadOpen ? /*#__PURE__*/_jsxDEV(Thread, {\n            messages: messages,\n            id: threadId,\n            websocket: websocket,\n            messageAmount: messageAmount,\n            setMessageAmount: setMessageAmount,\n            setThreadOpen: setThreadOpen,\n            setThreadId: setThreadId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 37\n          }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            alignItems: \"center\",\n            justify: \"center\",\n            direction: \"column\",\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              component: \"h1\",\n              variant: \"h2\",\n              children: \"Welcome\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"div\",\n              variant: \"body1\",\n              children: \"This is Chat App made by Tommi.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 25\n      }, this)\n    }, void 0, false), /*#__PURE__*/_jsxDEV(Modal, {\n      modalOpen: modalOpen,\n      setModalOpen: setModalOpen,\n      websocket: websocket,\n      setThreadOpen: setThreadOpen,\n      setThreadId: setThreadId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Home, \"Y9JAs0kGhS3PTxz8SyXSJRq/EEA=\", false, function () {\n  return [useStyles, useUsers, useChats, useWindowDimensions, useMediaQuery, useMediaQuery];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/tommivainio/Projektit/chatApp/my-app/src/views/home.tsx"],"names":["Button","Grid","List","Typography","useContext","useEffect","useState","Thread","ThreadButton","Modal","MediaContext","WebsocketContext","useUsers","useChats","useWindowDimensions","useMediaQuery","makeStyles","Card","useStyles","theme","newThreadButton","backgroundColor","marginTop","breakpoints","down","fontSize","padding","desktopContainer","up","width","Home","history","classes","user","setUser","username","setusername","websocket","setWebsocket","getIsLoggedIn","getThreadIds","getMessages","height","heightCorrected","setHeightCorrected","threads","setThreads","sortedThreads","setSortedThreads","threadOpen","setThreadOpen","threadId","setThreadId","messages","setMessages","updateState","setUpdateState","Date","now","updateThreadButtons","setUpdateThreadButtons","updateThreadButtonInfos","setUpdateThreadButtonInfos","messageAmount","setMessageAmount","modalOpen","setModalOpen","wsMessage","setWsMessage","type","contents","timestamp","user_id","thread_id","isMobile","query","isDesktop","e","console","log","message","isLoggedIn","success","push","id","name","getUsernameById","userIds","i","chatThreads","length","idArray","threadMessages","threadIdObject","sort","a","b","reversedArray","reverse","newMessageObject","undefined","readyState","socket","WebSocket","addEventListener","event","client","send","JSON","stringify","data","parse","setTimeout","setCreateNewChatThreadOpen","borderTop","map","item","margin","borderRight","maxHeight","overflowY"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { Button, Grid, List, Typography } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport Thread from '../components/thread';\nimport ThreadButton from '../components/threadButton';\nimport Modal from '../components/modal';\nimport { MediaContext } from '../contexts/mediaContext';\nimport { WebsocketContext } from '../contexts/websocketContext';\nimport { useUsers, useChats } from '../hooks/apiHooks';\nimport useWindowDimensions from '../hooks/windowDimensionsHook';\nimport { useMediaQuery } from 'react-responsive';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from '@mui/material';\n\nconst useStyles = makeStyles((theme) => ({\n    newThreadButton: {\n        backgroundColor: '#5F4B8BFF',\n        marginTop: '1rem',\n        '&:hover': {\n            backgroundColor: '#7159a6',\n        },\n        [theme.breakpoints.down(1000)]: {\n            fontSize: '0.8rem',\n            padding: '6px 10px'\n        },\n        [theme.breakpoints.down(800)]: {\n            fontSize: '0.7rem',\n            padding: '6px 6px'\n        },\n        [theme.breakpoints.down(600)]: {\n            fontSize: '0.875rem',\n            padding: '6px 16px'\n        },\n    },\n    desktopContainer: {\n        [theme.breakpoints.up(1280)]: {\n            width: '70vw',\n        },\n    },\n}));\n\ninterface propType {\n    history: {\n        push: Function,\n    }\n}\n\ninterface threadsArray {\n    thread_id: number\n}\n\ninterface sortedThreadsArray {\n    id: number,\n    timestamp: string,\n}\n\ninterface messagesArray {\n    id: number,\n    user_id: number,\n    contents: string,\n    timestamp: Date,\n}\n\nconst Home = ({ history }: propType) => {\n    const classes = useStyles();\n    const { user, setUser } = useContext(MediaContext);\n    const [username, setusername] = useState('');\n    const { websocket, setWebsocket } = useContext(WebsocketContext);\n    const { getIsLoggedIn } = useUsers();\n    const { getThreadIds, getMessages } = useChats();\n    const { height } = useWindowDimensions();\n    const [heightCorrected, setHeightCorrected] = useState(height - 64);\n    const [threads, setThreads] = useState<threadsArray[]>([]);\n    const [sortedThreads, setSortedThreads] = useState<sortedThreadsArray[]>([]);\n    const [threadOpen, setThreadOpen] = useState(false)\n    const [threadId, setThreadId] = useState(0)\n    const [messages, setMessages] = useState<messagesArray[]>([]);\n    const [updateState, setUpdateState] = useState(Date.now());\n    const [updateThreadButtons, setUpdateThreadButtons] = useState(Date.now());\n    const [updateThreadButtonInfos, setUpdateThreadButtonInfos] = useState(Date.now());\n    const [messageAmount, setMessageAmount] = useState(50);\n    const [modalOpen, setModalOpen] = useState(false);\n    const [wsMessage, setWsMessage] = useState({\n        type: '',\n        contents: '',\n        timestamp: new Date(),\n        user_id: 0,\n        thread_id: 0\n    });\n\n    const isMobile = useMediaQuery({\n        query: '(max-width: 600px)'\n    });\n\n    const isDesktop = useMediaQuery({\n        query: '(min-width: 1280px)'\n    });\n\n    useEffect(() => {\n        try {\n            if (isMobile) {\n                setHeightCorrected(height - 56);\n            } else {\n                setHeightCorrected(height - 64);\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n    }, [isMobile]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                console.log('USER: ', user)\n                const isLoggedIn = await getIsLoggedIn();\n                if (!isLoggedIn.success) {\n                    history.push('/login');\n                }\n                setUser(isLoggedIn.id)\n                const name = await getUsernameById(userIds[i].user_id);\n                console.log('Logged user: ', user, isLoggedIn.id);\n                if (user !== 0) {\n                    const chatThreads = await getThreadIds(isLoggedIn.id)\n                    setThreads(chatThreads)\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [user, updateThreadButtons]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                if (threads.length > 0) {\n                    let idArray = [];\n                    for (let i = 0; i < threads.length; i++) {\n                        const threadMessages = await getMessages(threads[i].thread_id);\n                        const threadIdObject = {\n                            id: threads[i].thread_id,\n                            timestamp: threadMessages.length > 0 ? threadMessages[0].timestamp : '1999-02-06T05:47:00',\n                        };\n                        idArray.push(threadIdObject);\n                    }\n                    idArray.sort((a, b) => (a.timestamp < b.timestamp) ? 1 : ((b.timestamp < a.timestamp) ? -1 : 0));\n                    console.log('IDARRAY', idArray);\n                    setSortedThreads(idArray);\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [threads, updateThreadButtonInfos]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                if (threadId !== 0) {\n                    const threadMessages = await getMessages(threadId);\n                    const reversedArray = threadMessages.reverse();\n                    setMessages(reversedArray);\n                }\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, [threadId, updateState]);\n\n    useEffect(() => {\n        try {\n            if (wsMessage.type !== '' && wsMessage.thread_id === threadId) {\n                const newMessageObject = {\n                    id: Date.now(),\n                    user_id: wsMessage.user_id,\n                    contents: wsMessage.contents,\n                    timestamp: wsMessage.timestamp,\n                }\n                setMessages(messages => [...messages, newMessageObject]);\n                setMessageAmount(messageAmount + 1);\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n    }, [wsMessage]);\n\n    useEffect(() => {\n        try {\n            if (threads.length !== 0) {\n                if (websocket === undefined || websocket.readyState === 2 || websocket.readyState === 3) {\n                    console.log('READYSTATE ', websocket?.readyState)\n                    const socket = new WebSocket('ws://localhost:3001');\n\n                    socket.addEventListener('open', function (event) {\n                        console.log('Server is opened.');\n                        const client = {\n                            type: 'client',\n                            user_id: user,\n                            threads: threads,\n                        }\n                        socket.send(JSON.stringify(client));\n                    });\n\n                    socket.addEventListener('message', function (event) {\n                        if (event.data !== 'ping') {\n                            console.log('Message from server ', JSON.parse(event.data).thread_id);\n                            const message = JSON.parse(event.data);\n                            if (message.type === 'message') {\n                                setWsMessage(message);\n                                setUpdateThreadButtonInfos(Date.now());\n                            } else if (message.type === 'newThread') {\n                                setUpdateThreadButtons(Date.now());\n                            }\n                        } else {\n                            setTimeout(() => socket.send('pong'), 1000);\n                        }\n                    });\n\n                    socket.addEventListener('close', function (event) {\n                        console.log('Websocket connection closed.');\n                        setUpdateState(Date.now());\n                    });\n\n                    setWebsocket(socket);\n                    console.log('NEW SOCKET');\n                }\n            }\n        } catch (e) {\n            console.log(e.message);\n        };\n    }, [updateState, threads]);\n\n    const setCreateNewChatThreadOpen = () => {\n        setModalOpen(true);\n    }\n\n\n    return (\n        <>\n            {isMobile ? (\n                <Grid container direction=\"column\" style={{ height: heightCorrected, }} >\n                    {threadOpen ? (\n                        <Grid item >\n                            <Thread\n                                messages={messages}\n                                id={threadId}\n                                websocket={websocket}\n                                messageAmount={messageAmount}\n                                setMessageAmount={setMessageAmount}\n                                setThreadOpen={setThreadOpen}\n                                setThreadId={setThreadId}\n                            />\n                        </Grid>\n                    ) : (\n                        <Grid item>\n                            <Button\n                                onClick={setCreateNewChatThreadOpen}\n                                color=\"primary\"\n                                variant=\"contained\"\n                                className={classes.newThreadButton}\n                            >\n                                Create a new chat thread\n                            </Button>\n                            <Grid container style={{ borderTop: '1px solid #5F4B8BFF', marginTop: '1rem' }} >\n                                <List style={{ padding: 0, width: '100vw' }}>\n                                    {sortedThreads.map((item) => (\n                                        <ThreadButton\n                                            id={item.id}\n                                            setThreadOpen={setThreadOpen}\n                                            setThreadId={setThreadId}\n                                            threadOpen={threadOpen}\n                                            threadId={threadId}\n                                            updateThreadButtonInfos={updateThreadButtonInfos}\n                                        />\n                                    ))}{' '}\n                                </List>\n                            </Grid>\n                        </Grid>\n                    )}\n                </Grid>\n            ) : (\n                <>\n                    {isDesktop ? (\n                        <Card style={{ width: '70vw', margin: 'auto' }}>\n                            <Grid container direction=\"row\" style={{ height: heightCorrected, }} className={classes.desktopContainer} >\n                                <Grid item style={{ width: '30%', borderRight: '1px solid #5F4B8BFF', maxHeight: heightCorrected, overflowY: 'auto' }}>\n                                    <Button\n                                        onClick={setCreateNewChatThreadOpen}\n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        className={classes.newThreadButton}\n                                    >\n                                        Create a new chat thread\n                                    </Button>\n                                    <Grid container style={{ borderTop: '1px solid #5F4B8BFF', marginTop: '1rem' }} >\n                                        <List style={{ padding: 0, width: '100%' }}>\n                                            {sortedThreads.map((item) => (\n                                                <ThreadButton\n                                                    id={item.id}\n                                                    setThreadOpen={setThreadOpen}\n                                                    setThreadId={setThreadId}\n                                                    threadOpen={threadOpen}\n                                                    threadId={threadId}\n                                                    updateThreadButtonInfos={updateThreadButtonInfos}\n                                                />\n                                            ))}{' '}\n                                        </List>\n                                    </Grid>\n                                </Grid>\n                                <Grid item style={{ width: '70%' }}>\n                                    {threadOpen ? (\n                                        <Thread\n                                            messages={messages}\n                                            id={threadId}\n                                            websocket={websocket}\n                                            messageAmount={messageAmount}\n                                            setMessageAmount={setMessageAmount}\n                                            setThreadOpen={setThreadOpen}\n                                            setThreadId={setThreadId}\n                                        />\n                                    ) : (\n                                        <Grid container alignItems=\"center\" justify=\"center\" direction=\"column\" >\n                                            <Typography component=\"h1\" variant=\"h2\">Welcome</Typography>\n                                            <Typography component=\"div\" variant=\"body1\">This is Chat App made by Tommi.</Typography>\n                                        </Grid>\n                                    )}\n                                </Grid>\n                            </Grid>\n                        </Card>\n                    ) : (\n                        <Grid container direction=\"row\" style={{ height: heightCorrected, }} className={classes.desktopContainer} >\n                            <Grid item style={{ width: '30%', borderRight: '1px solid #5F4B8BFF', maxHeight: heightCorrected, overflowY: 'auto' }}>\n                                <Button\n                                    onClick={setCreateNewChatThreadOpen}\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                    className={classes.newThreadButton}\n                                >\n                                    Create a new chat thread\n                                </Button>\n                                <Grid container style={{ borderTop: '1px solid #5F4B8BFF', marginTop: '1rem' }} >\n                                    <List style={{ padding: 0, width: '100%' }}>\n                                        {sortedThreads.map((item) => (\n                                            <ThreadButton\n                                                id={item.id}\n                                                setThreadOpen={setThreadOpen}\n                                                setThreadId={setThreadId}\n                                                threadOpen={threadOpen}\n                                                threadId={threadId}\n                                                updateThreadButtonInfos={updateThreadButtonInfos}\n                                            />\n                                        ))}{' '}\n                                    </List>\n                                </Grid>\n                            </Grid>\n                            <Grid item style={{ width: '70%' }}>\n                                {threadOpen ? (\n                                    <Thread\n                                        messages={messages}\n                                        id={threadId}\n                                        websocket={websocket}\n                                        messageAmount={messageAmount}\n                                        setMessageAmount={setMessageAmount}\n                                        setThreadOpen={setThreadOpen}\n                                        setThreadId={setThreadId}\n                                    />\n                                ) : (\n                                    <Grid container alignItems=\"center\" justify=\"center\" direction=\"column\" >\n                                        <Typography component=\"h1\" variant=\"h2\">Welcome</Typography>\n                                        <Typography component=\"div\" variant=\"body1\">This is Chat App made by Tommi.</Typography>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </Grid>\n                    )}\n                </>\n            )\n            }\n            <Modal modalOpen={modalOpen} setModalOpen={setModalOpen} websocket={websocket} setThreadOpen={setThreadOpen} setThreadId={setThreadId} />\n        </>\n    );\n\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}