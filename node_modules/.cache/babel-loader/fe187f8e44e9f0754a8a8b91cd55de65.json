{"ast":null,"code":"import config from '../config';\n\nconst doFetch = async (url, options = {}) => {\n  const response = await fetch(config.backendUrl + url, options);\n  const json = await response.json();\n\n  if (json.error) {\n    // if API response contains error message (use Postman to get further details)\n    throw new Error(json.message + ': ' + json.error);\n  } else if (!response.ok) {\n    // if API response does not contain error message, but there is some other error\n    throw new Error('doFetch failed');\n  } else {\n    // if all goes well\n    return json;\n  }\n};\n\nconst doQueryFetch = async query => {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify(query)\n  };\n\n  try {\n    const response = await fetch(config.backendUrl, options);\n    console.log('RESPONES', response);\n    const json = await response.json();\n    console.log('JSON', json);\n    return json.data;\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n};\n\nconst useUsers = () => {\n  const getUsers = async () => {\n    const fetchOptions = {\n      method: 'GET',\n      credentials: 'include'\n    };\n\n    try {\n      return await doFetch('/users', fetchOptions);\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const getUserAvailable = async username => {\n    try {\n      return await doFetch('/users/username/' + username);\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const getUsernameById = async id => {\n    try {\n      return await doFetch('/user/' + id);\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const register = async inputs => {\n    const fetchOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(inputs),\n      credentials: 'include'\n    };\n\n    try {\n      const result = await doFetch('/user', fetchOptions);\n      console.log('RegisterResult', result.message);\n      return result.message;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const getLoggedInUser = async () => {\n    try {\n      const query = {\n        query: `\n                {\n                  getLoggedInUser{\n                    id\n                    username\n                  }\n                }\n                `\n      };\n      const data = await doQueryFetch(query);\n      console.log('DATA', data);\n      return data.getLoggedInUser;\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const postLogin = async inputs => {\n    const fetchOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(inputs),\n      credentials: 'include'\n    };\n\n    try {\n      const result = await doFetch('/login', fetchOptions);\n      return result;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const logout = async () => {\n    const fetchOptions = {\n      method: 'DELETE',\n      credentials: 'include'\n    };\n\n    try {\n      return await doFetch('/logout', fetchOptions);\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const getProfile = async () => {\n    const fetchOptions = {\n      method: 'GET',\n      credentials: 'include'\n    };\n\n    try {\n      return await doFetch('/profile', fetchOptions);\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  return {\n    getUsers,\n    getUserAvailable,\n    getUsernameById,\n    register,\n    getLoggedInUser,\n    postLogin,\n    logout,\n    getProfile\n  };\n};\n\nconst useChats = () => {\n  const getThreadIds = async userId => {\n    try {\n      return await doFetch('/threads/' + userId);\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const getUserIds = async userId => {\n    try {\n      return await doFetch('/threadusers/' + userId);\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const getThreadName = async threadId => {\n    try {\n      const thread = await doFetch('/thread/' + threadId);\n      return thread.name;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const postMessage = async messageObject => {\n    const fetchOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: messageObject,\n      credentials: 'include'\n    };\n\n    try {\n      const result = await doFetch('/message', fetchOptions);\n      return result.success;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const getMessages = async threadId => {\n    try {\n      return await doFetch('/messages/' + threadId);\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const getAllMessages = async threadId => {\n    try {\n      return await doFetch('/all_messages/' + threadId);\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const getLastMessage = async id => {\n    try {\n      return await doFetch('/last_message/' + id);\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const createNewChatThread = async chatThreadObject => {\n    const fetchOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: chatThreadObject,\n      credentials: 'include'\n    };\n\n    try {\n      const result = await doFetch('/new_thread', fetchOptions);\n      return result;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  return {\n    getThreadIds,\n    getUserIds,\n    getThreadName,\n    postMessage,\n    getMessages,\n    getAllMessages,\n    getLastMessage,\n    createNewChatThread\n  };\n};\n\nexport { useUsers, useChats };","map":{"version":3,"sources":["/Users/tommivainio/SSSF/SSSF-project-frontend/src/hooks/apiHooks.tsx"],"names":["config","doFetch","url","options","response","fetch","backendUrl","json","error","Error","message","ok","doQueryFetch","query","method","headers","body","JSON","stringify","console","log","data","e","useUsers","getUsers","fetchOptions","credentials","getUserAvailable","username","alert","getUsernameById","id","register","inputs","result","getLoggedInUser","postLogin","logout","getProfile","useChats","getThreadIds","userId","getUserIds","getThreadName","threadId","thread","name","postMessage","messageObject","success","getMessages","getAllMessages","getLastMessage","createNewChatThread","chatThreadObject"],"mappings":"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","sourcesContent":["import config from '../config'\r\n\r\ninterface fetchQuery {\r\n    query: string\r\n}\r\n\r\nconst doFetch = async (url: string, options = {}) => {\r\n    const response = await fetch(config.backendUrl + url, options);\r\n    const json = await response.json();\r\n    if (json.error) {\r\n        // if API response contains error message (use Postman to get further details)\r\n        throw new Error(json.message + ': ' + json.error);\r\n    } else if (!response.ok) {\r\n        // if API response does not contain error message, but there is some other error\r\n        throw new Error('doFetch failed');\r\n    } else {\r\n        // if all goes well\r\n        return json;\r\n    }\r\n};\r\n\r\nconst doQueryFetch = async (query: fetchQuery) => {\r\n    const options = {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n        },\r\n        body: JSON.stringify(query),\r\n      };\r\n      try {\r\n        const response = await fetch(config.backendUrl, options);\r\n        console.log('RESPONES', response);\r\n        const json = await response.json();\r\n        console.log('JSON', json);\r\n        return json.data;\r\n      }\r\n      catch (e) {\r\n        console.log(e);\r\n        return false;\r\n      }\r\n};\r\n\r\nconst useUsers = () => {\r\n\r\n    const getUsers = async () => {\r\n        const fetchOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            return await doFetch('/users', fetchOptions);\r\n        } catch (e) {\r\n            throw new Error(e.message);\r\n        }\r\n    };\r\n\r\n    const getUserAvailable = async (username: String) => {\r\n        try {\r\n            return await doFetch('/users/username/' + username);\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const getUsernameById = async (id: number) => {\r\n        try {\r\n            return await doFetch('/user/' + id);\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const register = async (inputs: Object) => {\r\n        const fetchOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(inputs),\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            const result = await doFetch('/user', fetchOptions);\r\n            console.log('RegisterResult', result.message)\r\n            return result.message\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const getLoggedInUser = async () => {\r\n        try {\r\n            const query = {\r\n                query: `\r\n                {\r\n                  getLoggedInUser{\r\n                    id\r\n                    username\r\n                  }\r\n                }\r\n                `\r\n              };\r\n              const data = await doQueryFetch(query);\r\n              console.log('DATA', data);\r\n              return data.getLoggedInUser;\r\n        } catch (e) {\r\n            throw new Error(e.message);\r\n        }\r\n    };\r\n\r\n    const postLogin = async (inputs: Object) => {\r\n        const fetchOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(inputs),\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            const result = await doFetch('/login', fetchOptions);\r\n            return result\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const logout = async () => {\r\n        const fetchOptions = {\r\n            method: 'DELETE',\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            return await doFetch('/logout', fetchOptions);\r\n        } catch (e) {\r\n            throw new Error(e.message);\r\n        }\r\n    }\r\n\r\n    const getProfile = async () => {\r\n        const fetchOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            return await doFetch('/profile', fetchOptions);\r\n        } catch (e) {\r\n            throw new Error(e.message);\r\n        }\r\n    };\r\n\r\n    return { getUsers, getUserAvailable, getUsernameById, register, getLoggedInUser, postLogin, logout, getProfile };\r\n};\r\n\r\nconst useChats = () => {\r\n\r\n    const getThreadIds = async (userId: number) => {\r\n        try {\r\n            return await doFetch('/threads/' + userId);\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const getUserIds = async (userId: number) => {\r\n        try {\r\n            return await doFetch('/threadusers/' + userId);\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const getThreadName = async (threadId: number) => {\r\n        try {\r\n            const thread = await doFetch('/thread/' + threadId);\r\n            return thread.name;\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const postMessage = async (messageObject: Object) => {\r\n        const fetchOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: messageObject,\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            const result = await doFetch('/message', fetchOptions);\r\n            return result.success\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const getMessages = async (threadId: number) => {\r\n        try {\r\n            return await doFetch('/messages/' + threadId);\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const getAllMessages = async (threadId: number) => {\r\n        try {\r\n            return await doFetch('/all_messages/' + threadId);\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const getLastMessage = async (id: number) => {\r\n        try {\r\n            return await doFetch('/last_message/' + id);\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const createNewChatThread = async (chatThreadObject: Object) => {\r\n        const fetchOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: chatThreadObject,\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            const result = await doFetch('/new_thread', fetchOptions);\r\n            return result\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    return { getThreadIds, getUserIds, getThreadName, postMessage, getMessages, getAllMessages, getLastMessage, createNewChatThread }\r\n}\r\n\r\nexport { useUsers, useChats };"]},"metadata":{},"sourceType":"module"}