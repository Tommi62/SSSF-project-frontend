{"ast":null,"code":"import config from '../config';\n\nconst doFetch = async (url, options = {}) => {\n  const response = await fetch(config.backendUrl + url, options);\n  const json = await response.json();\n\n  if (json.error) {\n    // if API response contains error message (use Postman to get further details)\n    throw new Error(json.message + ': ' + json.error);\n  } else if (!response.ok) {\n    // if API response does not contain error message, but there is some other error\n    throw new Error('doFetch failed');\n  } else {\n    // if all goes well\n    return json;\n  }\n};\n\nconst useUsers = () => {\n  const getUsers = async () => {\n    const fetchOptions = {\n      method: 'GET',\n      credentials: 'include'\n    };\n\n    try {\n      return await doFetch('/users', fetchOptions);\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const getUserAvailable = async username => {\n    try {\n      return await doFetch('/users/username/' + username);\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const register = async inputs => {\n    const fetchOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(inputs),\n      credentials: 'include'\n    };\n\n    try {\n      const result = await doFetch('/user', fetchOptions);\n      console.log('RegisterResult', result.message);\n      return result.message;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const getIsLoggedIn = async () => {\n    const fetchOptions = {\n      method: 'GET',\n      credentials: 'include'\n    };\n\n    try {\n      return await doFetch('/isloggedin', fetchOptions);\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const postLogin = async inputs => {\n    const fetchOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(inputs),\n      credentials: 'include'\n    };\n\n    try {\n      const result = await doFetch('/login', fetchOptions);\n      console.log('RegisterResult', result);\n      return result;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const logout = async () => {\n    const fetchOptions = {\n      method: 'DELETE',\n      credentials: 'include'\n    };\n\n    try {\n      return await doFetch('/logout', fetchOptions);\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const getProfile = async () => {\n    const fetchOptions = {\n      method: 'GET',\n      credentials: 'include'\n    };\n\n    try {\n      return await doFetch('/profile', fetchOptions);\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  return {\n    getUsers,\n    getUserAvailable,\n    register,\n    getIsLoggedIn,\n    postLogin,\n    logout,\n    getProfile\n  };\n};\n\nexport { useUsers };","map":{"version":3,"sources":["C:/USERS/Tommi Vainio/desktop/chatApp/my-app/src/hooks/apiHooks.tsx"],"names":["config","doFetch","url","options","response","fetch","backendUrl","json","error","Error","message","ok","useUsers","getUsers","fetchOptions","method","credentials","e","getUserAvailable","username","alert","register","inputs","headers","body","JSON","stringify","result","console","log","getIsLoggedIn","postLogin","logout","getProfile"],"mappings":"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","sourcesContent":["import config from '../config'\r\n\r\n\r\nconst doFetch = async (url: string, options = {}) => {\r\n    const response = await fetch(config.backendUrl + url, options);\r\n    const json = await response.json();\r\n    if (json.error) {\r\n        // if API response contains error message (use Postman to get further details)\r\n        throw new Error(json.message + ': ' + json.error);\r\n    } else if (!response.ok) {\r\n        // if API response does not contain error message, but there is some other error\r\n        throw new Error('doFetch failed');\r\n    } else {\r\n        // if all goes well\r\n        return json;\r\n    }\r\n};\r\n\r\nconst useUsers = () => {\r\n\r\n    const getUsers = async () => {\r\n        const fetchOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            return await doFetch('/users', fetchOptions);\r\n        } catch (e) {\r\n            throw new Error(e.message);\r\n        }\r\n    };\r\n\r\n    const getUserAvailable = async (username: String) => {\r\n        try {\r\n            return await doFetch('/users/username/' + username);\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const register = async (inputs: Object) => {\r\n        const fetchOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(inputs),\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            const result = await doFetch('/user', fetchOptions);\r\n            console.log('RegisterResult', result.message)\r\n            return result.message\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const getIsLoggedIn = async () => {\r\n        const fetchOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            return await doFetch('/isloggedin', fetchOptions);\r\n        } catch (e) {\r\n            throw new Error(e.message);\r\n        }\r\n    };\r\n\r\n    const postLogin = async (inputs: Object) => {\r\n        const fetchOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(inputs),\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            const result = await doFetch('/login', fetchOptions);\r\n            console.log('RegisterResult', result)\r\n            return result\r\n        } catch (e) {\r\n            alert(e.message);\r\n        }\r\n    };\r\n\r\n    const logout = async () => {\r\n        const fetchOptions = {\r\n            method: 'DELETE',\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            return await doFetch('/logout', fetchOptions);\r\n        } catch (e) {\r\n            throw new Error(e.message);\r\n        }\r\n    }\r\n\r\n    const getProfile = async () => {\r\n        const fetchOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n        };\r\n        try {\r\n            return await doFetch('/profile', fetchOptions);\r\n        } catch (e) {\r\n            throw new Error(e.message);\r\n        }\r\n    };\r\n\r\n    return { getUsers, getUserAvailable, register, getIsLoggedIn, postLogin, logout, getProfile };\r\n};\r\n\r\nexport { useUsers };"]},"metadata":{},"sourceType":"module"}