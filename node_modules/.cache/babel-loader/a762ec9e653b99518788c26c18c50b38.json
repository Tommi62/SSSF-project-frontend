{"ast":null,"code":"var _jsxFileName = \"/Users/tommivainio/Desktop/chatApp/my-app/src/components/threadForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { Grid, MenuItem, Select } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport { useContext, useEffect } from \"react\";\nimport { TextValidator, ValidatorForm } from \"react-material-ui-form-validator\";\nimport { MediaContext } from \"../contexts/mediaContext\";\nimport { useUsers, useChats } from \"../hooks/apiHooks\";\nimport useForm from \"../hooks/formHooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ThreadForm = () => {\n  _s();\n\n  const {\n    user\n  } = useContext(MediaContext);\n  const {\n    createNewChatThread\n  } = useChats();\n  const {\n    getUsers\n  } = useUsers();\n  const [usersArray, setUsersArray] = useState([]);\n  const validators = {\n    threadName: ['required', 'minStringLength: 3']\n  };\n  const errorMessages = {\n    threadName: ['Required field', 'Minimum of 3 characters']\n  };\n\n  const createNewThread = async () => {\n    try {\n      if (inputs.user2 !== '') {\n        const chatThreadObject = JSON.stringify({\n          name: inputs.threadName,\n          user_id: user,\n          user2_id: inputs.user2\n        });\n        const success = await createNewChatThread(chatThreadObject);\n        console.log('SUCCESS: ', success);\n      } else {\n        alert('Choose a user with whom you want to chat!');\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n\n  const {\n    inputs,\n    handleInputChange,\n    handleSubmit\n  } = useForm(createNewThread, {\n    threadName: '',\n    user2: ''\n  });\n  useEffect(() => {\n    (async () => {\n      try {\n        const users = await getUsers();\n        setUsersArray(users);\n      } catch (e) {\n        console.log(e.message);\n      }\n    })();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: /*#__PURE__*/_jsxDEV(ValidatorForm, {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(TextValidator, {\n          type: \"text\",\n          name: \"threadName\",\n          label: \"Thread name\",\n          onChange: handleInputChange,\n          value: inputs.threadName,\n          validators: validators.threadName,\n          errorMessages: errorMessages.threadName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          name: \"user2\",\n          value: inputs.user2,\n          label: \"With whon do you want to chat?\",\n          onChange: handleInputChange,\n          children: [usersArray.map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: 10,\n            children: \"Ten\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this)), ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(ThreadForm, \"KUwLpyl/E2xPCm0n2ARexyEppI8=\", false, function () {\n  return [useChats, useUsers, useForm];\n});\n\n_c = ThreadForm;\nexport default ThreadForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreadForm\");","map":{"version":3,"sources":["/Users/tommivainio/Desktop/chatApp/my-app/src/components/threadForm.tsx"],"names":["Grid","MenuItem","Select","useState","useContext","useEffect","TextValidator","ValidatorForm","MediaContext","useUsers","useChats","useForm","ThreadForm","user","createNewChatThread","getUsers","usersArray","setUsersArray","validators","threadName","errorMessages","createNewThread","inputs","user2","chatThreadObject","JSON","stringify","name","user_id","user2_id","success","console","log","alert","e","message","handleInputChange","handleSubmit","users","map","item"],"mappings":"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","sourcesContent":["import { Grid, MenuItem, Select } from \"@material-ui/core\"\nimport { useState } from \"react\";\nimport { useContext, useEffect } from \"react\";\nimport { TextValidator, ValidatorForm } from \"react-material-ui-form-validator\"\nimport { MediaContext } from \"../contexts/mediaContext\";\nimport { useUsers, useChats } from \"../hooks/apiHooks\";\nimport useForm from \"../hooks/formHooks\";\n\nconst ThreadForm = () => {\n    const { user } = useContext(MediaContext);\n    const { createNewChatThread } = useChats();\n    const { getUsers } = useUsers();\n    const [usersArray, setUsersArray] = useState([]);\n\n    const validators = {\n        threadName: ['required', 'minStringLength: 3'],\n    };\n\n    const errorMessages = {\n        threadName: [\n            'Required field',\n            'Minimum of 3 characters'\n        ]\n    };\n\n    const createNewThread = async () => {\n        try {\n            if (inputs.user2 !== '') {\n                const chatThreadObject = JSON.stringify({\n                    name: inputs.threadName,\n                    user_id: user,\n                    user2_id: inputs.user2\n\n                });\n                const success = await createNewChatThread(chatThreadObject);\n                console.log('SUCCESS: ', success)\n            } else {\n                alert('Choose a user with whom you want to chat!');\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n    }\n\n    const { inputs, handleInputChange, handleSubmit } = useForm(createNewThread, {\n        threadName: '',\n        user2: '',\n    });\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const users = await getUsers();\n                setUsersArray(users);\n            } catch (e) {\n                console.log(e.message);\n            }\n        })();\n    }, []);\n\n    return (\n        <>\n            <Grid container>\n                <ValidatorForm onSubmit={handleSubmit}>\n                    <TextValidator\n                        type=\"text\"\n                        name=\"threadName\"\n                        label=\"Thread name\"\n                        onChange={handleInputChange}\n                        value={inputs.threadName}\n                        validators={validators.threadName}\n                        errorMessages={errorMessages.threadName}\n                    />\n                    <Select\n                        name=\"user2\"\n                        value={inputs.user2}\n                        label=\"With whon do you want to chat?\"\n                        onChange={handleInputChange}\n                    >\n                        {usersArray.map((item) => (\n                            <MenuItem value={10}>Ten</MenuItem>\n                        ))}{' '}\n                    </Select>\n                </ValidatorForm>\n            </Grid>\n        </>\n    )\n}\n\nexport default ThreadForm;"]},"metadata":{},"sourceType":"module"}